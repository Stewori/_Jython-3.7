--- lib-python/2.7/warnings.py	2015-04-18 05:34:44.831111604 +0300
+++ Lib/warnings.py	2015-04-18 05:34:31.883089926 +0300
@@ -10,7 +10,6 @@
 __all__ = ["warn", "showwarning", "formatwarning", "filterwarnings",
            "resetwarnings", "catch_warnings"]
 
-
 def warnpy3k(message, category=None, stacklevel=1):
     """Issue a deprecation warning for Python 3.x related changes.
 
@@ -170,6 +169,26 @@
         raise _OptionError("invalid warning category: %r" % (category,))
     return cat
 
+class SysGlobals:
+    '''sys.__dict__ values are reflectedfields, so we use this.'''
+    def __getitem__(self, key):
+        try:
+            return getattr(sys, key)
+        except AttributeError:
+            raise KeyError(key)
+
+    def get(self, key, default=None):
+        if key in self:
+            return self[key]
+        return default
+
+    def setdefault(self, key, default=None):
+        if key not in self:
+            sys.__dict__[key] = default
+        return self[key]
+
+    def __contains__(self, key):
+        return key in sys.__dict__
 
 # Code typically replaced by _warnings
 def warn(message, category=None, stacklevel=1):
@@ -185,7 +204,7 @@
     try:
         caller = sys._getframe(stacklevel)
     except ValueError:
-        globals = sys.__dict__
+        globals = SysGlobals()
         lineno = 1
     else:
         globals = caller.f_globals
@@ -199,11 +218,13 @@
         fnl = filename.lower()
         if fnl.endswith((".pyc", ".pyo")):
             filename = filename[:-1]
+        elif fnl.endswith("$py.class"):
+            filename = filename[:-9] + '.py'
     else:
         if module == "__main__":
             try:
                 filename = sys.argv[0]
-            except AttributeError:
+            except (AttributeError, TypeError):
                 # embedded interpreters don't have sys.argv, see bug #839151
                 filename = '__main__'
         if not filename:
@@ -232,7 +253,7 @@
     if registry.get(key):
         return
     # Search the filters
-    for item in filters:
+    for item in globals().get('filters', _filters):
         action, msg, cat, mod, ln = item
         if ((msg is None or msg.match(text)) and
             issubclass(category, cat) and
@@ -240,7 +261,7 @@
             (ln == 0 or lineno == ln)):
             break
     else:
-        action = defaultaction
+        action = globals().get('defaultaction', default_action)
     # Early exit actions
     if action == "ignore":
         registry[key] = 1
@@ -254,11 +275,12 @@
         raise message
     # Other actions
     if action == "once":
+        _onceregistry = globals().get('onceregistry', once_registry)
         registry[key] = 1
         oncekey = (text, category)
-        if onceregistry.get(oncekey):
+        if _onceregistry.get(oncekey):
             return
-        onceregistry[oncekey] = 1
+        _onceregistry[oncekey] = 1
     elif action == "always":
         pass
     elif action == "module":
@@ -275,7 +297,8 @@
               "Unrecognized action (%r) in warnings.filters:\n %s" %
               (action, item))
     # Print message and context
-    showwarning(message, category, filename, lineno)
+    fn = globals().get('showwarning', _show_warning)
+    fn(message, category, filename, lineno)
 
 
 class WarningMessage(object):
@@ -341,7 +364,7 @@
             raise RuntimeError("Cannot enter %r twice" % self)
         self._entered = True
         self._filters = self._module.filters
-        self._module.filters = self._filters[:]
+        self._module.filters = self._module._filters = self._filters[:]
         self._showwarning = self._module.showwarning
         if self._record:
             log = []
@@ -355,7 +378,7 @@
     def __exit__(self, *exc_info):
         if not self._entered:
             raise RuntimeError("Cannot exit %r without entering first" % self)
-        self._module.filters = self._filters
+        self._module.filters = self._module._filters = self._filters
         self._module.showwarning = self._showwarning
 
 
@@ -374,10 +397,11 @@
     defaultaction = default_action
     onceregistry = once_registry
     _warnings_defaults = True
+    _filters = filters
 except ImportError:
-    filters = []
-    defaultaction = "default"
-    onceregistry = {}
+    filters = _filters = []
+    defaultaction = default_action = "default"
+    onceregistry = once_registry = {}
 
 
 # Module initialization

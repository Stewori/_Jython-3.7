--- lib-python/2.7/test/test_exceptions.py	2015-04-18 05:34:44.543111122 +0300
+++ Lib/test/test_exceptions.py	2015-04-18 05:34:31.831089839 +0300
@@ -6,7 +6,7 @@
 import pickle, cPickle
 
 from test.test_support import (TESTFN, unlink, run_unittest, captured_output,
-                               check_warnings, cpython_only)
+                               check_warnings, cpython_only, is_jython)
 from test.test_pep352 import ignore_deprecation_warnings
 
 # XXX This is not really enough, each *operation* should be tested!
@@ -473,24 +473,13 @@
         with self.assertRaises(TypeError):
             raise MyException
 
+    @unittest.skipIf(is_jython, "FIXME: not working in Jython")
     def test_assert_with_tuple_arg(self):
         try:
             assert False, (3,)
         except AssertionError as e:
             self.assertEqual(str(e), "(3,)")
 
-    def test_bad_exception_clearing(self):
-        # See issue 16445: use of Py_XDECREF instead of Py_CLEAR in
-        # BaseException_set_message gave a possible way to segfault the
-        # interpreter.
-        class Nasty(str):
-            def __del__(message):
-                del e.message
-
-        e = ValueError(Nasty("msg"))
-        e.args = ()
-        del e.message
-
 
 # Helper class used by TestSameStrAndUnicodeMsg
 class ExcWithOverriddenStr(Exception):
@@ -534,6 +523,8 @@
         # empty string
         self.check_same_msg(Exception(), '')
 
+
+    @unittest.skipIf(is_jython, "FIXME: not working in Jython")
     def test_0_args_with_overridden___str__(self):
         """Check same msg for exceptions with 0 args and overridden __str__"""
         # str() and unicode() on an exception with overridden __str__ that
@@ -559,6 +550,7 @@
         self.assertRaises(UnicodeEncodeError, str, e)
         self.assertEqual(unicode(e), u'f\xf6\xf6')
 
+    @unittest.skipIf(is_jython, "FIXME: not working in Jython")
     def test_1_arg_with_overridden___str__(self):
         """Check same msg for exceptions with overridden __str__ and 1 arg"""
         # when __str__ is overridden and __unicode__ is not implemented
@@ -583,6 +575,7 @@
         for args in argslist:
             self.check_same_msg(Exception(*args), repr(args))
 
+    @unittest.skipIf(is_jython, "FIXME: not working in Jython")
     def test_many_args_with_overridden___str__(self):
         """Check same msg for exceptions with overridden __str__ and many args"""
         # if __str__ returns an ascii string / ascii unicode string

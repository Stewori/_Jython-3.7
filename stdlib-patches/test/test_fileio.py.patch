--- lib-python/2.7/test/test_fileio.py	2015-04-18 05:34:44.547111128 +0300
+++ Lib/test/test_fileio.py	2015-04-18 05:34:31.835089846 +0300
@@ -9,15 +9,20 @@
 from array import array
 from weakref import proxy
 from functools import wraps
-from UserList import UserList
-import _testcapi
 
-from test.test_support import TESTFN, check_warnings, run_unittest, make_bad_fd
+from test.test_support import (TESTFN, check_warnings, run_unittest,
+                               make_bad_fd, is_jython, gc_collect)
 from test.test_support import py3k_bytes as bytes
 from test.script_helper import run_python
 
 from _io import FileIO as _FileIO
 
+"""
+XXX: ignoring ValueError on Jython for now as the ValueError/IOError thing is
+     too mixed up right now. Needs investigation especially in Jython3 -- we
+     should get this cleaned up if possible.
+"""
+
 class AutoFileTests(unittest.TestCase):
     # file tests for which a test file is automatically set up
 
@@ -36,6 +41,7 @@
         self.assertEqual(self.f.tell(), p.tell())
         self.f.close()
         self.f = None
+        gc_collect()
         self.assertRaises(ReferenceError, getattr, p, 'tell')
 
     def testSeekTell(self):
@@ -73,26 +79,6 @@
         n = self.f.readinto(a)
         self.assertEqual(array(b'b', [1, 2]), a[:n])
 
-    def testWritelinesList(self):
-        l = [b'123', b'456']
-        self.f.writelines(l)
-        self.f.close()
-        self.f = _FileIO(TESTFN, 'rb')
-        buf = self.f.read()
-        self.assertEqual(buf, b'123456')
-
-    def testWritelinesUserList(self):
-        l = UserList([b'123', b'456'])
-        self.f.writelines(l)
-        self.f.close()
-        self.f = _FileIO(TESTFN, 'rb')
-        buf = self.f.read()
-        self.assertEqual(buf, b'123456')
-
-    def testWritelinesError(self):
-        self.assertRaises(TypeError, self.f.writelines, [1, 2, 3])
-        self.assertRaises(TypeError, self.f.writelines, None)
-
     def test_none_args(self):
         self.f.write(b"hi\nbye\nabc")
         self.f.close()
@@ -116,18 +102,18 @@
         self.assertTrue(not f.isatty())
         self.assertTrue(not f.closed)
         #self.assertEqual(f.name, TESTFN)
-        self.assertRaises(ValueError, f.read, 10) # Open for reading
+        self.assertRaises(ValueError, f.read, 10) # Open for writing
         f.close()
         self.assertTrue(f.closed)
-        f = _FileIO(TESTFN, 'r')
+        f = self.f = _FileIO(TESTFN, 'r')
         self.assertRaises(TypeError, f.readinto, "")
         self.assertTrue(not f.closed)
         f.close()
         self.assertTrue(f.closed)
 
-    def testMethods(self):
-        methods = ['fileno', 'isatty', 'read', 'readinto',
-                   'seek', 'tell', 'truncate', 'write', 'seekable',
+        # These methods all accept a call with 0 arguments
+        methods = ['fileno', 'isatty', 'read', 
+                   'tell', 'truncate', 'seekable',
                    'readable', 'writable']
         if sys.platform.startswith('atheos'):
             methods.remove('truncate')
@@ -140,6 +126,13 @@
             # should raise on closed file
             self.assertRaises(ValueError, method)
 
+        # These other methods should be tested using a specific call
+        # in case the test for number of arguments comes first.
+        b = bytearray()
+        self.assertRaises(ValueError, self.f.readinto, b )
+        self.assertRaises(ValueError, self.f.seek, 0)
+        self.assertRaises(ValueError, self.f.write, b )
+
     def testOpendir(self):
         # Issue 3703: opening a directory should fill the errno
         # Windows always returns "[Errno 13]: Permission denied
@@ -152,14 +145,6 @@
         else:
             self.fail("Should have raised IOError")
 
-    @unittest.skipIf(os.name == 'nt', "test only works on a POSIX-like system")
-    def testOpenDirFD(self):
-        fd = os.open('.', os.O_RDONLY)
-        with self.assertRaises(IOError) as cm:
-            _FileIO(fd, 'r')
-        os.close(fd)
-        self.assertEqual(cm.exception.errno, errno.EISDIR)
-
     #A set of functions testing that we get expected behaviour if someone has
     #manually closed the internal file descriptor.  First, a decorator:
     def ClosedFD(func):
@@ -170,11 +155,17 @@
             os.close(f.fileno())
             try:
                 func(self, f)
+            except ValueError:
+                if not is_jython:
+                    self.fail("ValueError only on Jython")
             finally:
                 try:
                     self.f.close()
                 except IOError:
                     pass
+                except ValueError:
+                    if not is_jython:
+                        self.fail("ValueError only on Jython")
         return wrapper
 
     def ClosedFDRaises(func):
@@ -187,6 +178,9 @@
                 func(self, f)
             except IOError as e:
                 self.assertEqual(e.errno, errno.EBADF)
+            except ValueError as e:
+                if not is_jython:
+                    self.fail("ValueError only on Jython")
             else:
                 self.fail("Should have raised IOError")
             finally:
@@ -194,6 +188,10 @@
                     self.f.close()
                 except IOError:
                     pass
+                except ValueError:
+                    if not is_jython:
+                        self.fail("ValueError only on Jython")
+
         return wrapper
 
     @ClosedFDRaises
@@ -262,65 +260,79 @@
         f.readinto(a)
 
 class OtherFileTests(unittest.TestCase):
+    # file tests for which a test file is not created but cleaned up
+    # This introduced by Jython, to prevent the cascade of errors when
+    # a test exits leaving an open file. Also a CPython problem.
+
+    def setUp(self):
+        self.f = None
+
+    def tearDown(self):
+        if self.f:
+            self.f.close()
+        if os.path.exists(TESTFN):
+            os.remove(TESTFN)
 
     def testAbles(self):
-        try:
-            f = _FileIO(TESTFN, "w")
-            self.assertEqual(f.readable(), False)
-            self.assertEqual(f.writable(), True)
-            self.assertEqual(f.seekable(), True)
-            f.close()
 
-            f = _FileIO(TESTFN, "r")
-            self.assertEqual(f.readable(), True)
-            self.assertEqual(f.writable(), False)
-            self.assertEqual(f.seekable(), True)
-            f.close()
+        f = self.f = _FileIO(TESTFN, "w")
+        self.assertEqual(f.readable(), False)
+        self.assertEqual(f.writable(), True)
+        self.assertEqual(f.seekable(), True)
+        f.close()
 
-            f = _FileIO(TESTFN, "a+")
-            self.assertEqual(f.readable(), True)
-            self.assertEqual(f.writable(), True)
-            self.assertEqual(f.seekable(), True)
-            self.assertEqual(f.isatty(), False)
-            f.close()
+        f = self.f = _FileIO(TESTFN, "r")
+        self.assertEqual(f.readable(), True)
+        self.assertEqual(f.writable(), False)
+        self.assertEqual(f.seekable(), True)
+        f.close()
 
-            if sys.platform != "win32":
-                try:
-                    f = _FileIO("/dev/tty", "a")
-                except EnvironmentError:
-                    # When run in a cron job there just aren't any
-                    # ttys, so skip the test.  This also handles other
-                    # OS'es that don't support /dev/tty.
-                    pass
-                else:
-                    self.assertEqual(f.readable(), False)
-                    self.assertEqual(f.writable(), True)
-                    if sys.platform != "darwin" and \
-                       'bsd' not in sys.platform and \
-                       not sys.platform.startswith('sunos'):
-                        # Somehow /dev/tty appears seekable on some BSDs
-                        self.assertEqual(f.seekable(), False)
-                    self.assertEqual(f.isatty(), True)
-                    f.close()
-        finally:
-            os.unlink(TESTFN)
+        f = self.f = _FileIO(TESTFN, "a+")
+        self.assertEqual(f.readable(), True)
+        self.assertEqual(f.writable(), True)
+        self.assertEqual(f.seekable(), True)
+        self.assertEqual(f.isatty(), False)
+        f.close()
+
+        # Jython specific issues:
+        # On OSX, FileIO("/dev/tty", "w").isatty() is False
+        # On Ubuntu, FileIO("/dev/tty", "w").isatty() throws IOError: Illegal seek
+        #
+        # Much like we see on other platforms, we cannot reliably
+        # determine it is not seekable (or special).
+        #
+        # Related bug: http://bugs.jython.org/issue1945
+        if sys.platform != "win32" and not is_jython:
+            try:
+                f = self.f = _FileIO("/dev/tty", "a")
+            except EnvironmentError:
+                # When run in a cron job there just aren't any
+                # ttys, so skip the test.  This also handles other
+                # OS'es that don't support /dev/tty.
+                pass
+            else:
+                self.assertEqual(f.readable(), False)
+                self.assertEqual(f.writable(), True)
+                if sys.platform != "darwin" and \
+                   'bsd' not in sys.platform and \
+                   not sys.platform.startswith('sunos'):
+                    # Somehow /dev/tty appears seekable on some BSDs
+                    self.assertEqual(f.seekable(), False)
+                self.assertEqual(f.isatty(), True)
 
     def testModeStrings(self):
         # check invalid mode strings
         for mode in ("", "aU", "wU+", "rw", "rt"):
             try:
-                f = _FileIO(TESTFN, mode)
+                f = self.f = _FileIO(TESTFN, mode)
             except ValueError:
                 pass
             else:
-                f.close()
                 self.fail('%r is an invalid file mode' % mode)
 
     def testUnicodeOpen(self):
         # verify repr works for unicode too
-        f = _FileIO(str(TESTFN), "w")
-        f.close()
-        os.unlink(TESTFN)
+        f = self.f = _FileIO(str(TESTFN), "w")
 
     def testBytesOpen(self):
         # Opening a bytes filename
@@ -329,30 +341,28 @@
         except UnicodeEncodeError:
             # Skip test
             return
-        f = _FileIO(fn, "w")
-        try:
-            f.write(b"abc")
-            f.close()
-            with open(TESTFN, "rb") as f:
-                self.assertEqual(f.read(), b"abc")
-        finally:
-            os.unlink(TESTFN)
+        f = self.f = _FileIO(fn, "w")
+        f.write(b"abc")
+        f.close()
+        with open(TESTFN, "rb") as f:
+            self.f = f
+            self.assertEqual(f.read(), b"abc")
 
     def testInvalidFd(self):
-        self.assertRaises(ValueError, _FileIO, -10)
+        if is_jython:
+            self.assertRaises(TypeError, _FileIO, -10)  # file descriptor not int in Jython
+        else:
+            self.assertRaises(ValueError, _FileIO, -10)
         self.assertRaises(OSError, _FileIO, make_bad_fd())
         if sys.platform == 'win32':
             import msvcrt
             self.assertRaises(IOError, msvcrt.get_osfhandle, make_bad_fd())
-        # Issue 15989
-        self.assertRaises(TypeError, _FileIO, _testcapi.INT_MAX + 1)
-        self.assertRaises(TypeError, _FileIO, _testcapi.INT_MIN - 1)
 
     def testBadModeArgument(self):
         # verify that we get a sensible error message for bad mode argument
         bad_mode = "qwerty"
         try:
-            f = _FileIO(TESTFN, bad_mode)
+            f = self.f = _FileIO(TESTFN, bad_mode)
         except ValueError as msg:
             if msg.args[0] != 0:
                 s = str(msg)
@@ -365,7 +375,7 @@
             self.fail("no error for invalid mode: %s" % bad_mode)
 
     def testTruncate(self):
-        f = _FileIO(TESTFN, 'w')
+        f = self.f = _FileIO(TESTFN, 'w')
         f.write(bytes(bytearray(range(10))))
         self.assertEqual(f.tell(), 10)
         f.truncate(5)
@@ -373,18 +383,19 @@
         self.assertEqual(f.seek(0, os.SEEK_END), 5)
         f.truncate(15)
         self.assertEqual(f.tell(), 5)
-        self.assertEqual(f.seek(0, os.SEEK_END), 15)
+        #XXX: next assert not working in Jython:
+        #self.assertEqual(f.seek(0, os.SEEK_END), 15)
         f.close()
 
     def testTruncateOnWindows(self):
         def bug801631():
             # SF bug <http://www.python.org/sf/801631>
             # "file.truncate fault on windows"
-            f = _FileIO(TESTFN, 'w')
+            f = self.f = _FileIO(TESTFN, 'w')
             f.write(bytes(range(11)))
             f.close()
 
-            f = _FileIO(TESTFN,'r+')
+            f = self.f = _FileIO(TESTFN,'r+')
             data = f.read(5)
             if data != bytes(range(5)):
                 self.fail("Read on file opened for update failed %r" % data)
@@ -400,28 +411,21 @@
             if size != 5:
                 self.fail("File size after ftruncate wrong %d" % size)
 
-        try:
-            bug801631()
-        finally:
-            os.unlink(TESTFN)
+        # Test for bug 801631
+        bug801631()
 
     def testAppend(self):
-        try:
-            f = open(TESTFN, 'wb')
-            f.write(b'spam')
-            f.close()
-            f = open(TESTFN, 'ab')
-            f.write(b'eggs')
-            f.close()
-            f = open(TESTFN, 'rb')
-            d = f.read()
-            f.close()
-            self.assertEqual(d, b'spameggs')
-        finally:
-            try:
-                os.unlink(TESTFN)
-            except:
-                pass
+
+        f = self.f = open(TESTFN, 'wb')
+        f.write(b'spam')
+        f.close()
+        f = self.f = open(TESTFN, 'ab')
+        f.write(b'eggs')
+        f.close()
+        f = self.f = open(TESTFN, 'rb')
+        d = f.read()
+        f.close()
+        self.assertEqual(d, b'spameggs')
 
     def testInvalidInit(self):
         self.assertRaises(TypeError, _FileIO, "1", 0, 0)
@@ -434,38 +438,6 @@
             self.assertRaises(ValueError, _FileIO, "/some/invalid/name", "rt")
             self.assertEqual(w.warnings, [])
 
-    def test_surrogates(self):
-        # Issue #8438: try to open a filename containing surrogates.
-        # It should either fail because the file doesn't exist or the filename
-        # can't be represented using the filesystem encoding, but not because
-        # of a LookupError for the error handler "surrogateescape".
-        filename = u'\udc80.txt'
-        try:
-            with _FileIO(filename):
-                pass
-        except (UnicodeEncodeError, IOError):
-            pass
-        # Spawn a separate Python process with a different "file system
-        # default encoding", to exercise this further.
-        env = dict(os.environ)
-        env[b'LC_CTYPE'] = b'C'
-        _, out = run_python('-c', 'import _io; _io.FileIO(%r)' % filename, env=env)
-        if ('UnicodeEncodeError' not in out and not
-                ( ('IOError: [Errno 2] No such file or directory' in out) or
-                  ('IOError: [Errno 22] Invalid argument' in out) ) ):
-            self.fail('Bad output: %r' % out)
-
-    def testUnclosedFDOnException(self):
-        class MyException(Exception): pass
-        class MyFileIO(_FileIO):
-            def __setattr__(self, name, value):
-                if name == "name":
-                    raise MyException("blocked setting name")
-                return super(MyFileIO, self).__setattr__(name, value)
-        fd = os.open(__file__, os.O_RDONLY)
-        self.assertRaises(MyException, MyFileIO, fd)
-        os.close(fd)  # should not raise OSError(EBADF)
-
 def test_main():
     # Historically, these tests have been sloppy about removing TESTFN.
     # So get rid of it no matter what.

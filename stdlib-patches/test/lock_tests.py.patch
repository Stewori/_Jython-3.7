--- lib-python/2.7/test/lock_tests.py	2015-04-18 05:34:44.859111651 +0300
+++ Lib/test/lock_tests.py	2015-04-18 05:34:31.811089806 +0300
@@ -149,6 +149,7 @@
     Tests for non-recursive, weak locks
     (which can be acquired and released from different threads).
     """
+    @unittest.skipIf(support.is_jython, "Jython only supports recursive locks")
     def test_reacquire(self):
         # Lock needs to be released before re-acquiring.
         lock = self.locktype()
@@ -168,6 +169,7 @@
             _wait()
         self.assertEqual(len(phase), 2)
 
+    @unittest.skipIf(support.is_jython, "Java does not allow locks to be released from different threads")
     def test_different_thread(self):
         # Lock can be released from a different thread.
         lock = self.locktype()
@@ -289,9 +291,10 @@
             results2.append((r, t2 - t1))
         Bunch(f, N).wait_for_finished()
         self.assertEqual(results1, [False] * N)
+        epsilon = 1e-5  # wait time is hard to test precisely, so keep low resolution
         for r, dt in results2:
             self.assertFalse(r)
-            self.assertTrue(dt >= 0.2, dt)
+            self.assertTrue(dt >= (0.2 - epsilon), dt)
         # The event is set
         results1 = []
         results2 = []
@@ -318,13 +321,13 @@
         lock = threading.Lock()
         cond = self.condtype(lock)
         cond.acquire()
-        self.assertFalse(lock.acquire(False))
+        self.assertTrue(lock.acquire(False))  # All locks in Jython are recursive!
         cond.release()
         self.assertTrue(lock.acquire(False))
-        self.assertFalse(cond.acquire(False))
+        self.assertTrue(cond.acquire(False))  # All locks in Jython are recursive!
         lock.release()
         with cond:
-            self.assertFalse(lock.acquire(False))
+            self.assertTrue(lock.acquire(False))  # All locks in Jython are recursive!
 
     def test_unacquired_wait(self):
         cond = self.condtype()
@@ -352,9 +355,17 @@
         b.wait_for_started()
         _wait()
         self.assertEqual(results1, [])
+        # FIXME: notify(n) is not currently implemented in Jython, trying
+        # repeated notifies instead. (and honestly w/o understanding what
+        # notify(n) really even means for CPython...).
+
         # Notify 3 threads at first
         cond.acquire()
-        cond.notify(3)
+        ###cond.notify(3)
+        cond.notify()
+        cond.notify()
+        cond.notify()
+
         _wait()
         phase_num = 1
         cond.release()
@@ -364,7 +375,12 @@
         self.assertEqual(results2, [])
         # Notify 5 threads: they might be in their first or second wait
         cond.acquire()
-        cond.notify(5)
+        ###cond.notify(5)
+        cond.notify()
+        cond.notify()
+        cond.notify()
+        cond.notify()
+        cond.notify()
         _wait()
         phase_num = 2
         cond.release()
@@ -403,8 +419,9 @@
             results.append(t2 - t1)
         Bunch(f, N).wait_for_finished()
         self.assertEqual(len(results), 5)
+        epsilon = 1e-5  # wait time is hard to test precisely, so keep low resolution
         for dt in results:
-            self.assertTrue(dt >= 0.2, dt)
+            self.assertTrue(dt >= (0.2 - epsilon), dt)
 
 
 class BaseSemaphoreTests(BaseTestCase):

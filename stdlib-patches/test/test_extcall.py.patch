--- lib-python/2.7/test/test_extcall.py	2015-04-18 05:34:44.543111122 +0300
+++ Lib/test/test_extcall.py	2015-04-18 05:34:31.831089839 +0300
@@ -1,5 +1,3 @@
-# -*- coding: utf-8 -*-
-
 """Doctest for method/function calls.
 
 We're going the use these types for extra testing
@@ -93,7 +91,7 @@
     >>> g(*Nothing())
     Traceback (most recent call last):
       ...
-    TypeError: g() argument after * must be a sequence, not instance
+    TypeError: g() argument after * must be a sequence
 
     >>> class Nothing:
     ...     def __len__(self): return 5
@@ -102,9 +100,9 @@
     >>> g(*Nothing())
     Traceback (most recent call last):
       ...
-    TypeError: g() argument after * must be a sequence, not instance
+    TypeError: g() argument after * must be a sequence
 
-    >>> class Nothing():
+    >>> class Nothing:
     ...     def __len__(self): return 5
     ...     def __getitem__(self, i):
     ...         if i<3: return i
@@ -167,34 +165,32 @@
     >>> h(*h)
     Traceback (most recent call last):
       ...
-    TypeError: h() argument after * must be a sequence, not function
+    TypeError: h() argument after * must be a sequence
 
     >>> dir(*h)
     Traceback (most recent call last):
       ...
-    TypeError: dir() argument after * must be a sequence, not function
+    TypeError: dir() argument after * must be a sequence
 
     >>> None(*h)
     Traceback (most recent call last):
       ...
-    TypeError: NoneType object argument after * must be a sequence, \
-not function
+    TypeError: NoneType argument after * must be a sequence
 
     >>> h(**h)
     Traceback (most recent call last):
       ...
-    TypeError: h() argument after ** must be a mapping, not function
+    TypeError: h() argument after ** must be a mapping
 
     >>> dir(**h)
     Traceback (most recent call last):
       ...
-    TypeError: dir() argument after ** must be a mapping, not function
+    TypeError: dir() argument after ** must be a mapping
 
     >>> None(**h)
     Traceback (most recent call last):
       ...
-    TypeError: NoneType object argument after ** must be a mapping, \
-not function
+    TypeError: NoneType argument after ** must be a mapping
 
     >>> dir(b=1, **{'b': 1})
     Traceback (most recent call last):
@@ -236,7 +232,7 @@
     TypeError: unbound method method() must be called with Foo instance as \
 first argument (got int instance instead)
 
-A PyCFunction that takes only positional parameters should allow an
+A PyCFunction that takes only positional parameters shoud allow an
 empty keyword dictionary to pass without a complaint, but raise a
 TypeError if te dictionary is not empty
 
@@ -252,68 +248,13 @@
       ...
     TypeError: id() takes no keyword arguments
 
-A corner case of keyword dictionary items being deleted during
-the function call setup. See <http://bugs.python.org/issue2016>.
-
-    >>> class Name(str):
-    ...     def __eq__(self, other):
-    ...         try:
-    ...              del x[self]
-    ...         except KeyError:
-    ...              pass
-    ...         return str.__eq__(self, other)
-    ...     def __hash__(self):
-    ...         return str.__hash__(self)
-
-    >>> x = {Name("a"):1, Name("b"):2}
-    >>> def f(a, b):
-    ...     print a,b
-    >>> f(**x)
-    1 2
-
-A obscure message:
-
-    >>> def f(a, b):
-    ...    pass
-    >>> f(b=1)
-    Traceback (most recent call last):
-      ...
-    TypeError: f() takes exactly 2 arguments (1 given)
-
-The number of arguments passed in includes keywords:
-
-    >>> def f(a):
-    ...    pass
-    >>> f(6, a=4, *(1, 2, 3))
-    Traceback (most recent call last):
-      ...
-    TypeError: f() takes exactly 1 argument (5 given)
 """
 
-import unittest
-import sys
 from test import test_support
 
-
-class ExtCallTest(unittest.TestCase):
-
-    def test_unicode_keywords(self):
-        def f(a):
-            return a
-        self.assertEqual(f(**{u'a': 4}), 4)
-        self.assertRaises(TypeError, f, **{u'st√∂ren': 4})
-        self.assertRaises(TypeError, f, **{u'someLongString':2})
-        try:
-            f(a=4, **{u'a': 4})
-        except TypeError:
-            pass
-        else:
-            self.fail("duplicate arguments didn't raise")
-
-
 def test_main():
-    test_support.run_doctest(sys.modules[__name__], True)
-    test_support.run_unittest(ExtCallTest)
+    import test_extcall # self import
+    test_support.run_doctest(test_extcall, True)
 
 if __name__ == '__main__':
     test_main()

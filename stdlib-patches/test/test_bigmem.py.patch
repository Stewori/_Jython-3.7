--- lib-python/2.7/test/test_bigmem.py	2015-04-18 05:34:44.879111685 +0300
+++ Lib/test/test_bigmem.py	2015-04-18 05:34:31.819089820 +0300
@@ -1,5 +1,5 @@
 from test import test_support
-from test.test_support import bigmemtest, _1G, _2G, _4G, precisionbigmemtest
+from test.test_support import bigmemtest, _1G, _2G
 
 import unittest
 import operator
@@ -13,7 +13,7 @@
 #    doesn't release the old 's' (if it exists) until well after its new
 #    value has been created. Use 'del s' before the create_largestring call.
 #
-#  - Do *not* compare large objects using assertEqual or similar. It's a
+#  - Do *not* compare large objects using assertEquals or similar. It's a
 #    lengty operation and the errormessage will be utterly useless due to
 #    its size. To make sure whether a result has the right contents, better
 #    to use the strip or count methods, or compare meaningful slices.
@@ -39,152 +39,94 @@
         SUBSTR = ' abc def ghi'
         s = '-' * size + SUBSTR
         caps = s.capitalize()
-        self.assertEqual(caps[-len(SUBSTR):],
+        self.assertEquals(caps[-len(SUBSTR):],
                          SUBSTR.capitalize())
-        self.assertEqual(caps.lstrip('-'), SUBSTR)
+        self.assertEquals(caps.lstrip('-'), SUBSTR)
 
     @bigmemtest(minsize=_2G + 10, memuse=1)
     def test_center(self, size):
         SUBSTR = ' abc def ghi'
         s = SUBSTR.center(size)
-        self.assertEqual(len(s), size)
+        self.assertEquals(len(s), size)
         lpadsize = rpadsize = (len(s) - len(SUBSTR)) // 2
         if len(s) % 2:
             lpadsize += 1
-        self.assertEqual(s[lpadsize:-rpadsize], SUBSTR)
-        self.assertEqual(s.strip(), SUBSTR.strip())
-
-    @precisionbigmemtest(size=_2G - 1, memuse=1)
-    def test_center_unicode(self, size):
-        SUBSTR = u' abc def ghi'
-        try:
-            s = SUBSTR.center(size)
-        except OverflowError:
-            pass # acceptable on 32-bit
-        else:
-            self.assertEqual(len(s), size)
-            lpadsize = rpadsize = (len(s) - len(SUBSTR)) // 2
-            if len(s) % 2:
-                lpadsize += 1
-            self.assertEqual(s[lpadsize:-rpadsize], SUBSTR)
-            self.assertEqual(s.strip(), SUBSTR.strip())
-            del s
+        self.assertEquals(s[lpadsize:-rpadsize], SUBSTR)
+        self.assertEquals(s.strip(), SUBSTR.strip())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_count(self, size):
         SUBSTR = ' abc def ghi'
         s = '.' * size + SUBSTR
-        self.assertEqual(s.count('.'), size)
+        self.assertEquals(s.count('.'), size)
         s += '.'
-        self.assertEqual(s.count('.'), size + 1)
-        self.assertEqual(s.count(' '), 3)
-        self.assertEqual(s.count('i'), 1)
-        self.assertEqual(s.count('j'), 0)
+        self.assertEquals(s.count('.'), size + 1)
+        self.assertEquals(s.count(' '), 3)
+        self.assertEquals(s.count('i'), 1)
+        self.assertEquals(s.count('j'), 0)
 
     @bigmemtest(minsize=_2G + 2, memuse=3)
     def test_decode(self, size):
         s = '.' * size
-        self.assertEqual(len(s.decode('utf-8')), size)
-
-    def basic_encode_test(self, size, enc, c=u'.', expectedsize=None):
-        if expectedsize is None:
-            expectedsize = size
-
-        s = c * size
-        self.assertEqual(len(s.encode(enc)), expectedsize)
+        self.assertEquals(len(s.decode('utf-8')), size)
 
     @bigmemtest(minsize=_2G + 2, memuse=3)
     def test_encode(self, size):
-        return self.basic_encode_test(size, 'utf-8')
-
-    @precisionbigmemtest(size=_4G // 6 + 2, memuse=2)
-    def test_encode_raw_unicode_escape(self, size):
-        try:
-            return self.basic_encode_test(size, 'raw_unicode_escape')
-        except MemoryError:
-            pass # acceptable on 32-bit
-
-    @precisionbigmemtest(size=_4G // 5 + 70, memuse=3)
-    def test_encode_utf7(self, size):
-        try:
-            return self.basic_encode_test(size, 'utf7')
-        except MemoryError:
-            pass # acceptable on 32-bit
-
-    @precisionbigmemtest(size=_4G // 4 + 5, memuse=6)
-    def test_encode_utf32(self, size):
-        try:
-            return self.basic_encode_test(size, 'utf32', expectedsize=4*size+4)
-        except MemoryError:
-            pass # acceptable on 32-bit
-
-    @precisionbigmemtest(size=_2G-1, memuse=4)
-    def test_decodeascii(self, size):
-        return self.basic_encode_test(size, 'ascii', c='A')
-
-    @precisionbigmemtest(size=_4G // 5, memuse=6+2)
-    def test_unicode_repr_oflw(self, size):
-        self.skipTest("test crashes - see issue #14904")
-        try:
-            s = u"\uAAAA"*size
-            r = repr(s)
-        except MemoryError:
-            pass # acceptable on 32-bit
-        else:
-            self.assertTrue(s == eval(r))
+        s = u'.' * size
+        self.assertEquals(len(s.encode('utf-8')), size)
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_endswith(self, size):
         SUBSTR = ' abc def ghi'
         s = '-' * size + SUBSTR
-        self.assertTrue(s.endswith(SUBSTR))
-        self.assertTrue(s.endswith(s))
+        self.failUnless(s.endswith(SUBSTR))
+        self.failUnless(s.endswith(s))
         s2 = '...' + s
-        self.assertTrue(s2.endswith(s))
-        self.assertFalse(s.endswith('a' + SUBSTR))
-        self.assertFalse(SUBSTR.endswith(s))
+        self.failUnless(s2.endswith(s))
+        self.failIf(s.endswith('a' + SUBSTR))
+        self.failIf(SUBSTR.endswith(s))
 
     @bigmemtest(minsize=_2G + 10, memuse=2)
     def test_expandtabs(self, size):
         s = '-' * size
         tabsize = 8
-        self.assertEqual(s.expandtabs(), s)
+        self.assertEquals(s.expandtabs(), s)
         del s
         slen, remainder = divmod(size, tabsize)
         s = '       \t' * slen
         s = s.expandtabs(tabsize)
-        self.assertEqual(len(s), size - remainder)
-        self.assertEqual(len(s.strip(' ')), 0)
+        self.assertEquals(len(s), size - remainder)
+        self.assertEquals(len(s.strip(' ')), 0)
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_find(self, size):
         SUBSTR = ' abc def ghi'
         sublen = len(SUBSTR)
         s = ''.join([SUBSTR, '-' * size, SUBSTR])
-        self.assertEqual(s.find(' '), 0)
-        self.assertEqual(s.find(SUBSTR), 0)
-        self.assertEqual(s.find(' ', sublen), sublen + size)
-        self.assertEqual(s.find(SUBSTR, len(SUBSTR)), sublen + size)
-        self.assertEqual(s.find('i'), SUBSTR.find('i'))
-        self.assertEqual(s.find('i', sublen),
+        self.assertEquals(s.find(' '), 0)
+        self.assertEquals(s.find(SUBSTR), 0)
+        self.assertEquals(s.find(' ', sublen), sublen + size)
+        self.assertEquals(s.find(SUBSTR, len(SUBSTR)), sublen + size)
+        self.assertEquals(s.find('i'), SUBSTR.find('i'))
+        self.assertEquals(s.find('i', sublen),
                          sublen + size + SUBSTR.find('i'))
-        self.assertEqual(s.find('i', size),
+        self.assertEquals(s.find('i', size),
                          sublen + size + SUBSTR.find('i'))
-        self.assertEqual(s.find('j'), -1)
+        self.assertEquals(s.find('j'), -1)
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_index(self, size):
         SUBSTR = ' abc def ghi'
         sublen = len(SUBSTR)
         s = ''.join([SUBSTR, '-' * size, SUBSTR])
-        self.assertEqual(s.index(' '), 0)
-        self.assertEqual(s.index(SUBSTR), 0)
-        self.assertEqual(s.index(' ', sublen), sublen + size)
-        self.assertEqual(s.index(SUBSTR, sublen), sublen + size)
-        self.assertEqual(s.index('i'), SUBSTR.index('i'))
-        self.assertEqual(s.index('i', sublen),
+        self.assertEquals(s.index(' '), 0)
+        self.assertEquals(s.index(SUBSTR), 0)
+        self.assertEquals(s.index(' ', sublen), sublen + size)
+        self.assertEquals(s.index(SUBSTR, sublen), sublen + size)
+        self.assertEquals(s.index('i'), SUBSTR.index('i'))
+        self.assertEquals(s.index('i', sublen),
                          sublen + size + SUBSTR.index('i'))
-        self.assertEqual(s.index('i', size),
+        self.assertEquals(s.index('i', size),
                          sublen + size + SUBSTR.index('i'))
         self.assertRaises(ValueError, s.index, 'j')
 
@@ -192,163 +134,167 @@
     def test_isalnum(self, size):
         SUBSTR = '123456'
         s = 'a' * size + SUBSTR
-        self.assertTrue(s.isalnum())
+        self.failUnless(s.isalnum())
         s += '.'
-        self.assertFalse(s.isalnum())
+        self.failIf(s.isalnum())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_isalpha(self, size):
         SUBSTR = 'zzzzzzz'
         s = 'a' * size + SUBSTR
-        self.assertTrue(s.isalpha())
+        self.failUnless(s.isalpha())
         s += '.'
-        self.assertFalse(s.isalpha())
+        self.failIf(s.isalpha())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_isdigit(self, size):
         SUBSTR = '123456'
         s = '9' * size + SUBSTR
-        self.assertTrue(s.isdigit())
+        self.failUnless(s.isdigit())
         s += 'z'
-        self.assertFalse(s.isdigit())
+        self.failIf(s.isdigit())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_islower(self, size):
         chars = ''.join([ chr(c) for c in range(255) if not chr(c).isupper() ])
         repeats = size // len(chars) + 2
         s = chars * repeats
-        self.assertTrue(s.islower())
+        self.failUnless(s.islower())
         s += 'A'
-        self.assertFalse(s.islower())
+        self.failIf(s.islower())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_isspace(self, size):
         whitespace = ' \f\n\r\t\v'
         repeats = size // len(whitespace) + 2
         s = whitespace * repeats
-        self.assertTrue(s.isspace())
+        self.failUnless(s.isspace())
         s += 'j'
-        self.assertFalse(s.isspace())
+        self.failIf(s.isspace())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_istitle(self, size):
         SUBSTR = '123456'
         s = ''.join(['A', 'a' * size, SUBSTR])
-        self.assertTrue(s.istitle())
+        self.failUnless(s.istitle())
         s += 'A'
-        self.assertTrue(s.istitle())
+        self.failUnless(s.istitle())
         s += 'aA'
-        self.assertFalse(s.istitle())
+        self.failIf(s.istitle())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_isupper(self, size):
         chars = ''.join([ chr(c) for c in range(255) if not chr(c).islower() ])
         repeats = size // len(chars) + 2
         s = chars * repeats
-        self.assertTrue(s.isupper())
+        self.failUnless(s.isupper())
         s += 'a'
-        self.assertFalse(s.isupper())
+        self.failIf(s.isupper())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_join(self, size):
         s = 'A' * size
         x = s.join(['aaaaa', 'bbbbb'])
-        self.assertEqual(x.count('a'), 5)
-        self.assertEqual(x.count('b'), 5)
-        self.assertTrue(x.startswith('aaaaaA'))
-        self.assertTrue(x.endswith('Abbbbb'))
+        self.assertEquals(x.count('a'), 5)
+        self.assertEquals(x.count('b'), 5)
+        self.failUnless(x.startswith('aaaaaA'))
+        self.failUnless(x.endswith('Abbbbb'))
 
     @bigmemtest(minsize=_2G + 10, memuse=1)
     def test_ljust(self, size):
         SUBSTR = ' abc def ghi'
         s = SUBSTR.ljust(size)
-        self.assertTrue(s.startswith(SUBSTR + '  '))
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.strip(), SUBSTR.strip())
+        self.failUnless(s.startswith(SUBSTR + '  '))
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.strip(), SUBSTR.strip())
 
     @bigmemtest(minsize=_2G + 10, memuse=2)
     def test_lower(self, size):
         s = 'A' * size
         s = s.lower()
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.count('a'), size)
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.count('a'), size)
 
     @bigmemtest(minsize=_2G + 10, memuse=1)
     def test_lstrip(self, size):
         SUBSTR = 'abc def ghi'
         s = SUBSTR.rjust(size)
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.lstrip(), SUBSTR.lstrip())
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.lstrip(), SUBSTR.lstrip())
         del s
         s = SUBSTR.ljust(size)
-        self.assertEqual(len(s), size)
+        self.assertEquals(len(s), size)
         stripped = s.lstrip()
-        self.assertTrue(stripped is s)
+        # jython - unlike python, we cannot rely on this string
+        # maintaining its identity
+        self.failUnless(stripped == s)
 
     @bigmemtest(minsize=_2G + 10, memuse=2)
     def test_replace(self, size):
         replacement = 'a'
         s = ' ' * size
         s = s.replace(' ', replacement)
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.count(replacement), size)
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.count(replacement), size)
         s = s.replace(replacement, ' ', size - 4)
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.count(replacement), 4)
-        self.assertEqual(s[-10:], '      aaaa')
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.count(replacement), 4)
+        self.assertEquals(s[-10:], '      aaaa')
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_rfind(self, size):
         SUBSTR = ' abc def ghi'
         sublen = len(SUBSTR)
         s = ''.join([SUBSTR, '-' * size, SUBSTR])
-        self.assertEqual(s.rfind(' '), sublen + size + SUBSTR.rfind(' '))
-        self.assertEqual(s.rfind(SUBSTR), sublen + size)
-        self.assertEqual(s.rfind(' ', 0, size), SUBSTR.rfind(' '))
-        self.assertEqual(s.rfind(SUBSTR, 0, sublen + size), 0)
-        self.assertEqual(s.rfind('i'), sublen + size + SUBSTR.rfind('i'))
-        self.assertEqual(s.rfind('i', 0, sublen), SUBSTR.rfind('i'))
-        self.assertEqual(s.rfind('i', 0, sublen + size),
-                         SUBSTR.rfind('i'))
-        self.assertEqual(s.rfind('j'), -1)
+        self.assertEquals(s.rfind(' '), sublen + size + SUBSTR.rfind(' '))
+        self.assertEquals(s.rfind(SUBSTR), sublen + size)
+        self.assertEquals(s.rfind(' ', 0, size), SUBSTR.rfind(' '))
+        self.assertEquals(s.rfind(SUBSTR, 0, sublen + size), 0)
+        self.assertEquals(s.rfind('i'), sublen + size + SUBSTR.rfind('i'))
+        self.assertEquals(s.rfind('i', 0, sublen), SUBSTR.rfind('i'))
+        self.assertEquals(s.rfind('i', 0, sublen + size),
+                          SUBSTR.rfind('i'))
+        self.assertEquals(s.rfind('j'), -1)
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_rindex(self, size):
         SUBSTR = ' abc def ghi'
         sublen = len(SUBSTR)
         s = ''.join([SUBSTR, '-' * size, SUBSTR])
-        self.assertEqual(s.rindex(' '),
+        self.assertEquals(s.rindex(' '),
                           sublen + size + SUBSTR.rindex(' '))
-        self.assertEqual(s.rindex(SUBSTR), sublen + size)
-        self.assertEqual(s.rindex(' ', 0, sublen + size - 1),
-                         SUBSTR.rindex(' '))
-        self.assertEqual(s.rindex(SUBSTR, 0, sublen + size), 0)
-        self.assertEqual(s.rindex('i'),
-                         sublen + size + SUBSTR.rindex('i'))
-        self.assertEqual(s.rindex('i', 0, sublen), SUBSTR.rindex('i'))
-        self.assertEqual(s.rindex('i', 0, sublen + size),
-                         SUBSTR.rindex('i'))
+        self.assertEquals(s.rindex(SUBSTR), sublen + size)
+        self.assertEquals(s.rindex(' ', 0, sublen + size - 1),
+                          SUBSTR.rindex(' '))
+        self.assertEquals(s.rindex(SUBSTR, 0, sublen + size), 0)
+        self.assertEquals(s.rindex('i'),
+                          sublen + size + SUBSTR.rindex('i'))
+        self.assertEquals(s.rindex('i', 0, sublen), SUBSTR.rindex('i'))
+        self.assertEquals(s.rindex('i', 0, sublen + size),
+                          SUBSTR.rindex('i'))
         self.assertRaises(ValueError, s.rindex, 'j')
 
     @bigmemtest(minsize=_2G + 10, memuse=1)
     def test_rjust(self, size):
         SUBSTR = ' abc def ghi'
         s = SUBSTR.ljust(size)
-        self.assertTrue(s.startswith(SUBSTR + '  '))
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.strip(), SUBSTR.strip())
+        self.failUnless(s.startswith(SUBSTR + '  '))
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.strip(), SUBSTR.strip())
 
     @bigmemtest(minsize=_2G + 10, memuse=1)
     def test_rstrip(self, size):
         SUBSTR = ' abc def ghi'
         s = SUBSTR.ljust(size)
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.rstrip(), SUBSTR.rstrip())
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.rstrip(), SUBSTR.rstrip())
         del s
         s = SUBSTR.rjust(size)
-        self.assertEqual(len(s), size)
+        self.assertEquals(len(s), size)
         stripped = s.rstrip()
-        self.assertTrue(stripped is s)
+        # jython - unlike python, we cannot rely on this string
+        # maintaining its identity
+        self.failUnless(stripped == s)
 
     # The test takes about size bytes to build a string, and then about
     # sqrt(size) substrings of sqrt(size) in size and a list to
@@ -361,12 +307,12 @@
         SUBSTR = 'a' + ' ' * chunksize
         s = SUBSTR * chunksize
         l = s.split()
-        self.assertEqual(len(l), chunksize)
-        self.assertEqual(set(l), set(['a']))
+        self.assertEquals(len(l), chunksize)
+        self.assertEquals(set(l), set(['a']))
         del l
         l = s.split('a')
-        self.assertEqual(len(l), chunksize + 1)
-        self.assertEqual(set(l), set(['', ' ' * chunksize]))
+        self.assertEquals(len(l), chunksize + 1)
+        self.assertEquals(set(l), set(['', ' ' * chunksize]))
 
     # Allocates a string of twice size (and briefly two) and a list of
     # size.  Because of internal affairs, the s.split() call produces a
@@ -378,12 +324,12 @@
     def test_split_large(self, size):
         s = ' a' * size + ' '
         l = s.split()
-        self.assertEqual(len(l), size)
-        self.assertEqual(set(l), set(['a']))
+        self.assertEquals(len(l), size)
+        self.assertEquals(set(l), set(['a']))
         del l
         l = s.split('a')
-        self.assertEqual(len(l), size + 1)
-        self.assertEqual(set(l), set([' ']))
+        self.assertEquals(len(l), size + 1)
+        self.assertEquals(set(l), set([' ']))
 
     @bigmemtest(minsize=_2G, memuse=2.1)
     def test_splitlines(self, size):
@@ -393,27 +339,27 @@
         SUBSTR = ' ' * chunksize + '\n' + ' ' * chunksize + '\r\n'
         s = SUBSTR * chunksize
         l = s.splitlines()
-        self.assertEqual(len(l), chunksize * 2)
-        self.assertEqual(set(l), set([' ' * chunksize]))
+        self.assertEquals(len(l), chunksize * 2)
+        self.assertEquals(set(l), set([' ' * chunksize]))
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_startswith(self, size):
         SUBSTR = ' abc def ghi'
         s = '-' * size + SUBSTR
-        self.assertTrue(s.startswith(s))
-        self.assertTrue(s.startswith('-' * size))
-        self.assertFalse(s.startswith(SUBSTR))
+        self.failUnless(s.startswith(s))
+        self.failUnless(s.startswith('-' * size))
+        self.failIf(s.startswith(SUBSTR))
 
     @bigmemtest(minsize=_2G, memuse=1)
     def test_strip(self, size):
         SUBSTR = '   abc def ghi   '
         s = SUBSTR.rjust(size)
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.strip(), SUBSTR.strip())
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.strip(), SUBSTR.strip())
         del s
         s = SUBSTR.ljust(size)
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.strip(), SUBSTR.strip())
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.strip(), SUBSTR.strip())
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_swapcase(self, size):
@@ -422,17 +368,17 @@
         repeats = size // sublen + 2
         s = SUBSTR * repeats
         s = s.swapcase()
-        self.assertEqual(len(s), sublen * repeats)
-        self.assertEqual(s[:sublen * 3], SUBSTR.swapcase() * 3)
-        self.assertEqual(s[-sublen * 3:], SUBSTR.swapcase() * 3)
+        self.assertEquals(len(s), sublen * repeats)
+        self.assertEquals(s[:sublen * 3], SUBSTR.swapcase() * 3)
+        self.assertEquals(s[-sublen * 3:], SUBSTR.swapcase() * 3)
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_title(self, size):
         SUBSTR = 'SpaaHAaaAaham'
         s = SUBSTR * (size // len(SUBSTR) + 2)
         s = s.title()
-        self.assertTrue(s.startswith((SUBSTR * 3).title()))
-        self.assertTrue(s.endswith(SUBSTR.lower() * 3))
+        self.failUnless(s.startswith((SUBSTR * 3).title()))
+        self.failUnless(s.endswith(SUBSTR.lower() * 3))
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_translate(self, size):
@@ -442,39 +388,39 @@
         repeats = size // sublen + 2
         s = SUBSTR * repeats
         s = s.translate(trans)
-        self.assertEqual(len(s), repeats * sublen)
-        self.assertEqual(s[:sublen], SUBSTR.translate(trans))
-        self.assertEqual(s[-sublen:], SUBSTR.translate(trans))
-        self.assertEqual(s.count('.'), 0)
-        self.assertEqual(s.count('!'), repeats * 2)
-        self.assertEqual(s.count('z'), repeats * 3)
+        self.assertEquals(len(s), repeats * sublen)
+        self.assertEquals(s[:sublen], SUBSTR.translate(trans))
+        self.assertEquals(s[-sublen:], SUBSTR.translate(trans))
+        self.assertEquals(s.count('.'), 0)
+        self.assertEquals(s.count('!'), repeats * 2)
+        self.assertEquals(s.count('z'), repeats * 3)
 
     @bigmemtest(minsize=_2G + 5, memuse=2)
     def test_upper(self, size):
         s = 'a' * size
         s = s.upper()
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.count('A'), size)
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.count('A'), size)
 
     @bigmemtest(minsize=_2G + 20, memuse=1)
     def test_zfill(self, size):
         SUBSTR = '-568324723598234'
         s = SUBSTR.zfill(size)
-        self.assertTrue(s.endswith('0' + SUBSTR[1:]))
-        self.assertTrue(s.startswith('-0'))
-        self.assertEqual(len(s), size)
-        self.assertEqual(s.count('0'), size - len(SUBSTR))
+        self.failUnless(s.endswith('0' + SUBSTR[1:]))
+        self.failUnless(s.startswith('-0'))
+        self.assertEquals(len(s), size)
+        self.assertEquals(s.count('0'), size - len(SUBSTR))
 
     @bigmemtest(minsize=_2G + 10, memuse=2)
     def test_format(self, size):
         s = '-' * size
         sf = '%s' % (s,)
-        self.assertTrue(s == sf)
+        self.failUnless(s == sf)
         del sf
         sf = '..%s..' % (s,)
-        self.assertEqual(len(sf), len(s) + 4)
-        self.assertTrue(sf.startswith('..-'))
-        self.assertTrue(sf.endswith('-..'))
+        self.assertEquals(len(sf), len(s) + 4)
+        self.failUnless(sf.startswith('..-'))
+        self.failUnless(sf.endswith('-..'))
         del s, sf
 
         size //= 2
@@ -482,66 +428,62 @@
         s = ''.join([edge, '%s', edge])
         del edge
         s = s % '...'
-        self.assertEqual(len(s), size * 2 + 3)
-        self.assertEqual(s.count('.'), 3)
-        self.assertEqual(s.count('-'), size * 2)
+        self.assertEquals(len(s), size * 2 + 3)
+        self.assertEquals(s.count('.'), 3)
+        self.assertEquals(s.count('-'), size * 2)
 
-    @bigmemtest(minsize=_2G + 10, memuse=5)
+    @bigmemtest(minsize=_2G + 10, memuse=2)
     def test_repr_small(self, size):
         s = '-' * size
         s = repr(s)
-        self.assertEqual(len(s), size + 2)
-        self.assertEqual(s[0], "'")
-        self.assertEqual(s[-1], "'")
-        self.assertEqual(s.count('-'), size)
+        self.assertEquals(len(s), size + 2)
+        self.assertEquals(s[0], "'")
+        self.assertEquals(s[-1], "'")
+        self.assertEquals(s.count('-'), size)
         del s
         # repr() will create a string four times as large as this 'binary
         # string', but we don't want to allocate much more than twice
         # size in total.  (We do extra testing in test_repr_large())
+        size = size // 5 * 2
         s = '\x00' * size
         s = repr(s)
-        self.assertEqual(len(s), size * 4 + 2)
-        self.assertEqual(s[0], "'")
-        self.assertEqual(s[-1], "'")
-        self.assertEqual(s.count('\\'), size)
-        self.assertEqual(s.count('0'), size * 2)
+        self.assertEquals(len(s), size * 4 + 2)
+        self.assertEquals(s[0], "'")
+        self.assertEquals(s[-1], "'")
+        self.assertEquals(s.count('\\'), size)
+        self.assertEquals(s.count('0'), size * 2)
 
     @bigmemtest(minsize=_2G + 10, memuse=5)
     def test_repr_large(self, size):
         s = '\x00' * size
         s = repr(s)
-        self.assertEqual(len(s), size * 4 + 2)
-        self.assertEqual(s[0], "'")
-        self.assertEqual(s[-1], "'")
-        self.assertEqual(s.count('\\'), size)
-        self.assertEqual(s.count('0'), size * 2)
-
-    @bigmemtest(minsize=2**32 // 5, memuse=6+2)
-    def test_unicode_repr(self, size):
-        s = u"\uAAAA" * size
-        self.assertTrue(len(repr(s)) > size)
+        self.assertEquals(len(s), size * 4 + 2)
+        self.assertEquals(s[0], "'")
+        self.assertEquals(s[-1], "'")
+        self.assertEquals(s.count('\\'), size)
+        self.assertEquals(s.count('0'), size * 2)
 
     # This test is meaningful even with size < 2G, as long as the
     # doubled string is > 2G (but it tests more if both are > 2G :)
     @bigmemtest(minsize=_1G + 2, memuse=3)
     def test_concat(self, size):
         s = '.' * size
-        self.assertEqual(len(s), size)
+        self.assertEquals(len(s), size)
         s = s + s
-        self.assertEqual(len(s), size * 2)
-        self.assertEqual(s.count('.'), size * 2)
+        self.assertEquals(len(s), size * 2)
+        self.assertEquals(s.count('.'), size * 2)
 
     # This test is meaningful even with size < 2G, as long as the
     # repeated string is > 2G (but it tests more if both are > 2G :)
     @bigmemtest(minsize=_1G + 2, memuse=3)
     def test_repeat(self, size):
         s = '.' * size
-        self.assertEqual(len(s), size)
+        self.assertEquals(len(s), size)
         s = s * 2
-        self.assertEqual(len(s), size * 2)
-        self.assertEqual(s.count('.'), size * 2)
+        self.assertEquals(len(s), size * 2)
+        self.assertEquals(s.count('.'), size * 2)
 
-    @bigmemtest(minsize=_2G + 20, memuse=2)
+    @bigmemtest(minsize=_2G + 20, memuse=1)
     def test_slice_and_getitem(self, size):
         SUBSTR = '0123456789'
         sublen = len(SUBSTR)
@@ -549,30 +491,36 @@
         stepsize = len(s) // 100
         stepsize = stepsize - (stepsize % sublen)
         for i in range(0, len(s) - stepsize, stepsize):
-            self.assertEqual(s[i], SUBSTR[0])
-            self.assertEqual(s[i:i + sublen], SUBSTR)
-            self.assertEqual(s[i:i + sublen:2], SUBSTR[::2])
+            self.assertEquals(s[i], SUBSTR[0])
+            self.assertEquals(s[i:i + sublen], SUBSTR)
+            self.assertEquals(s[i:i + sublen:2], SUBSTR[::2])
             if i > 0:
-                self.assertEqual(s[i + sublen - 1:i - 1:-3],
-                                 SUBSTR[sublen::-3])
+                self.assertEquals(s[i + sublen - 1:i - 1:-3],
+                                  SUBSTR[sublen::-3])
         # Make sure we do some slicing and indexing near the end of the
         # string, too.
-        self.assertEqual(s[len(s) - 1], SUBSTR[-1])
-        self.assertEqual(s[-1], SUBSTR[-1])
-        self.assertEqual(s[len(s) - 10], SUBSTR[0])
-        self.assertEqual(s[-sublen], SUBSTR[0])
-        self.assertEqual(s[len(s):], '')
-        self.assertEqual(s[len(s) - 1:], SUBSTR[-1])
-        self.assertEqual(s[-1:], SUBSTR[-1])
-        self.assertEqual(s[len(s) - sublen:], SUBSTR)
-        self.assertEqual(s[-sublen:], SUBSTR)
-        self.assertEqual(len(s[:]), len(s))
-        self.assertEqual(len(s[:len(s) - 5]), len(s) - 5)
-        self.assertEqual(len(s[5:-5]), len(s) - 10)
+        self.assertEquals(s[len(s) - 1], SUBSTR[-1])
+        self.assertEquals(s[-1], SUBSTR[-1])
+        self.assertEquals(s[len(s) - 10], SUBSTR[0])
+        self.assertEquals(s[-sublen], SUBSTR[0])
+        self.assertEquals(s[len(s):], '')
+        self.assertEquals(s[len(s) - 1:], SUBSTR[-1])
+        self.assertEquals(s[-1:], SUBSTR[-1])
+        self.assertEquals(s[len(s) - sublen:], SUBSTR)
+        self.assertEquals(s[-sublen:], SUBSTR)
+        self.assertEquals(len(s[:]), len(s))
+        self.assertEquals(len(s[:len(s) - 5]), len(s) - 5)
+        self.assertEquals(len(s[5:-5]), len(s) - 10)
 
         self.assertRaises(IndexError, operator.getitem, s, len(s))
         self.assertRaises(IndexError, operator.getitem, s, len(s) + 1)
-        self.assertRaises(IndexError, operator.getitem, s, len(s) + 1<<31)
+
+        # jython - we do not support indexes larger than 2**31, sorry
+        # this might make sense for virtually managed collections,
+        # but PyObjectArray is backed by PyObject[], so that's a hard
+        # limitation of the JVM
+
+        # self.assertRaises(IndexError, operator.getitem, s, len(s) + 1<<31)
 
     @bigmemtest(minsize=_2G, memuse=2)
     def test_contains(self, size):
@@ -580,24 +528,27 @@
         edge = '-' * (size // 2)
         s = ''.join([edge, SUBSTR, edge])
         del edge
-        self.assertIn(SUBSTR, s)
-        self.assertNotIn(SUBSTR * 2, s)
-        self.assertIn('-', s)
-        self.assertNotIn('a', s)
+        self.failUnless(SUBSTR in s)
+        self.failIf(SUBSTR * 2 in s)
+        self.failUnless('-' in s)
+        self.failIf('a' in s)
         s += 'a'
-        self.assertIn('a', s)
+        self.failUnless('a' in s)
 
     @bigmemtest(minsize=_2G + 10, memuse=2)
     def test_compare(self, size):
         s1 = '-' * size
         s2 = '-' * size
-        self.assertTrue(s1 == s2)
+        self.failUnless(s1 == s2)
         del s2
         s2 = s1 + 'a'
-        self.assertFalse(s1 == s2)
+        self.failIf(s1 == s2)
         del s2
         s2 = '.' * size
-        self.assertFalse(s1 == s2)
+        self.failIf(s1 == s2)
+
+    # changed for Jython because the hash code of a java.lang.String
+    # of 0x00's is 0 regardless of size
 
     @bigmemtest(minsize=_2G + 10, memuse=1)
     def test_hash(self, size):
@@ -607,11 +558,11 @@
         # test is dodgy (there's no *guarantee* that the two things should
         # have a different hash, even if they, in the current
         # implementation, almost always do.)
-        s = '\x00' * size
+        s = '\xFE' * size
         h1 = hash(s)
         del s
-        s = '\x00' * (size + 1)
-        self.assertFalse(h1 == hash(s))
+        s = '\xFE' * (size + 1)
+        self.failIf(h1 == hash(s))
 
 class TupleTest(unittest.TestCase):
 
@@ -628,13 +579,13 @@
     def test_compare(self, size):
         t1 = (u'',) * size
         t2 = (u'',) * size
-        self.assertTrue(t1 == t2)
+        self.failUnless(t1 == t2)
         del t2
         t2 = (u'',) * (size + 1)
-        self.assertFalse(t1 == t2)
+        self.failIf(t1 == t2)
         del t2
         t2 = (1,) * size
-        self.assertFalse(t1 == t2)
+        self.failIf(t1 == t2)
 
     # Test concatenating into a single tuple of more than 2G in length,
     # and concatenating a tuple of more than 2G in length separately, so
@@ -643,9 +594,9 @@
     # skipped, in verbose mode.)
     def basic_concat_test(self, size):
         t = ((),) * size
-        self.assertEqual(len(t), size)
+        self.assertEquals(len(t), size)
         t = t + t
-        self.assertEqual(len(t), size * 2)
+        self.assertEquals(len(t), size * 2)
 
     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
     def test_concat_small(self, size):
@@ -658,10 +609,10 @@
     @bigmemtest(minsize=_2G // 5 + 10, memuse=8 * 5)
     def test_contains(self, size):
         t = (1, 2, 3, 4, 5) * size
-        self.assertEqual(len(t), size * 5)
-        self.assertIn(5, t)
-        self.assertNotIn((1, 2, 3, 4, 5), t)
-        self.assertNotIn(0, t)
+        self.assertEquals(len(t), size * 5)
+        self.failUnless(5 in t)
+        self.failIf((1, 2, 3, 4, 5) in t)
+        self.failIf(0 in t)
 
     @bigmemtest(minsize=_2G + 10, memuse=8)
     def test_hash(self, size):
@@ -669,32 +620,32 @@
         h1 = hash(t1)
         del t1
         t2 = (0,) * (size + 1)
-        self.assertFalse(h1 == hash(t2))
+        self.failIf(h1 == hash(t2))
 
     @bigmemtest(minsize=_2G + 10, memuse=8)
     def test_index_and_slice(self, size):
         t = (None,) * size
-        self.assertEqual(len(t), size)
-        self.assertEqual(t[-1], None)
-        self.assertEqual(t[5], None)
-        self.assertEqual(t[size - 1], None)
+        self.assertEquals(len(t), size)
+        self.assertEquals(t[-1], None)
+        self.assertEquals(t[5], None)
+        self.assertEquals(t[size - 1], None)
         self.assertRaises(IndexError, operator.getitem, t, size)
-        self.assertEqual(t[:5], (None,) * 5)
-        self.assertEqual(t[-5:], (None,) * 5)
-        self.assertEqual(t[20:25], (None,) * 5)
-        self.assertEqual(t[-25:-20], (None,) * 5)
-        self.assertEqual(t[size - 5:], (None,) * 5)
-        self.assertEqual(t[size - 5:size], (None,) * 5)
-        self.assertEqual(t[size - 6:size - 2], (None,) * 4)
-        self.assertEqual(t[size:size], ())
-        self.assertEqual(t[size:size+5], ())
+        self.assertEquals(t[:5], (None,) * 5)
+        self.assertEquals(t[-5:], (None,) * 5)
+        self.assertEquals(t[20:25], (None,) * 5)
+        self.assertEquals(t[-25:-20], (None,) * 5)
+        self.assertEquals(t[size - 5:], (None,) * 5)
+        self.assertEquals(t[size - 5:size], (None,) * 5)
+        self.assertEquals(t[size - 6:size - 2], (None,) * 4)
+        self.assertEquals(t[size:size], ())
+        self.assertEquals(t[size:size+5], ())
 
     # Like test_concat, split in two.
     def basic_test_repeat(self, size):
         t = ('',) * size
-        self.assertEqual(len(t), size)
+        self.assertEquals(len(t), size)
         t = t * 2
-        self.assertEqual(len(t), size * 2)
+        self.assertEquals(len(t), size * 2)
 
     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
     def test_repeat_small(self, size):
@@ -704,44 +655,15 @@
     def test_repeat_large(self, size):
         return self.basic_test_repeat(size)
 
-    @bigmemtest(minsize=_1G - 1, memuse=12)
-    def test_repeat_large_2(self, size):
-        return self.basic_test_repeat(size)
-
-    @precisionbigmemtest(size=_1G - 1, memuse=9)
-    def test_from_2G_generator(self, size):
-        try:
-            t = tuple(xrange(size))
-        except MemoryError:
-            pass # acceptable on 32-bit
-        else:
-            count = 0
-            for item in t:
-                self.assertEqual(item, count)
-                count += 1
-            self.assertEqual(count, size)
-
-    @precisionbigmemtest(size=_1G - 25, memuse=9)
-    def test_from_almost_2G_generator(self, size):
-        try:
-            t = tuple(xrange(size))
-            count = 0
-            for item in t:
-                self.assertEqual(item, count)
-                count += 1
-            self.assertEqual(count, size)
-        except MemoryError:
-            pass # acceptable, expected on 32-bit
-
     # Like test_concat, split in two.
     def basic_test_repr(self, size):
         t = (0,) * size
         s = repr(t)
         # The repr of a tuple of 0's is exactly three times the tuple length.
-        self.assertEqual(len(s), size * 3)
-        self.assertEqual(s[:5], '(0, 0')
-        self.assertEqual(s[-5:], '0, 0)')
-        self.assertEqual(s.count('0'), size)
+        self.assertEquals(len(s), size * 3)
+        self.assertEquals(s[:5], '(0, 0')
+        self.assertEquals(s[-5:], '0, 0)')
+        self.assertEquals(s.count('0'), size)
 
     @bigmemtest(minsize=_2G // 3 + 2, memuse=8 + 3)
     def test_repr_small(self, size):
@@ -762,13 +684,13 @@
     def test_compare(self, size):
         l1 = [u''] * size
         l2 = [u''] * size
-        self.assertTrue(l1 == l2)
+        self.failUnless(l1 == l2)
         del l2
         l2 = [u''] * (size + 1)
-        self.assertFalse(l1 == l2)
+        self.failIf(l1 == l2)
         del l2
         l2 = [2] * size
-        self.assertFalse(l1 == l2)
+        self.failIf(l1 == l2)
 
     # Test concatenating into a single list of more than 2G in length,
     # and concatenating a list of more than 2G in length separately, so
@@ -777,9 +699,9 @@
     # skipped, in verbose mode.)
     def basic_test_concat(self, size):
         l = [[]] * size
-        self.assertEqual(len(l), size)
+        self.assertEquals(len(l), size)
         l = l + l
-        self.assertEqual(len(l), size * 2)
+        self.assertEquals(len(l), size * 2)
 
     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
     def test_concat_small(self, size):
@@ -792,9 +714,9 @@
     def basic_test_inplace_concat(self, size):
         l = [sys.stdout] * size
         l += l
-        self.assertEqual(len(l), size * 2)
-        self.assertTrue(l[0] is l[-1])
-        self.assertTrue(l[size - 1] is l[size + 1])
+        self.assertEquals(len(l), size * 2)
+        self.failUnless(l[0] is l[-1])
+        self.failUnless(l[size - 1] is l[size + 1])
 
     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
     def test_inplace_concat_small(self, size):
@@ -807,79 +729,79 @@
     @bigmemtest(minsize=_2G // 5 + 10, memuse=8 * 5)
     def test_contains(self, size):
         l = [1, 2, 3, 4, 5] * size
-        self.assertEqual(len(l), size * 5)
-        self.assertIn(5, l)
-        self.assertNotIn([1, 2, 3, 4, 5], l)
-        self.assertNotIn(0, l)
+        self.assertEquals(len(l), size * 5)
+        self.failUnless(5 in l)
+        self.failIf([1, 2, 3, 4, 5] in l)
+        self.failIf(0 in l)
 
     @bigmemtest(minsize=_2G + 10, memuse=8)
     def test_hash(self, size):
         l = [0] * size
-        self.assertRaises(TypeError, hash, l)
+        self.failUnlessRaises(TypeError, hash, l)
 
     @bigmemtest(minsize=_2G + 10, memuse=8)
     def test_index_and_slice(self, size):
         l = [None] * size
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-1], None)
-        self.assertEqual(l[5], None)
-        self.assertEqual(l[size - 1], None)
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-1], None)
+        self.assertEquals(l[5], None)
+        self.assertEquals(l[size - 1], None)
         self.assertRaises(IndexError, operator.getitem, l, size)
-        self.assertEqual(l[:5], [None] * 5)
-        self.assertEqual(l[-5:], [None] * 5)
-        self.assertEqual(l[20:25], [None] * 5)
-        self.assertEqual(l[-25:-20], [None] * 5)
-        self.assertEqual(l[size - 5:], [None] * 5)
-        self.assertEqual(l[size - 5:size], [None] * 5)
-        self.assertEqual(l[size - 6:size - 2], [None] * 4)
-        self.assertEqual(l[size:size], [])
-        self.assertEqual(l[size:size+5], [])
+        self.assertEquals(l[:5], [None] * 5)
+        self.assertEquals(l[-5:], [None] * 5)
+        self.assertEquals(l[20:25], [None] * 5)
+        self.assertEquals(l[-25:-20], [None] * 5)
+        self.assertEquals(l[size - 5:], [None] * 5)
+        self.assertEquals(l[size - 5:size], [None] * 5)
+        self.assertEquals(l[size - 6:size - 2], [None] * 4)
+        self.assertEquals(l[size:size], [])
+        self.assertEquals(l[size:size+5], [])
 
         l[size - 2] = 5
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-3:], [None, 5, None])
-        self.assertEqual(l.count(5), 1)
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-3:], [None, 5, None])
+        self.assertEquals(l.count(5), 1)
         self.assertRaises(IndexError, operator.setitem, l, size, 6)
-        self.assertEqual(len(l), size)
+        self.assertEquals(len(l), size)
 
         l[size - 7:] = [1, 2, 3, 4, 5]
         size -= 2
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-7:], [None, None, 1, 2, 3, 4, 5])
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-7:], [None, None, 1, 2, 3, 4, 5])
 
         l[:7] = [1, 2, 3, 4, 5]
         size -= 2
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[:7], [1, 2, 3, 4, 5, None, None])
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[:7], [1, 2, 3, 4, 5, None, None])
 
         del l[size - 1]
         size -= 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-1], 4)
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-1], 4)
 
         del l[-2:]
         size -= 2
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-1], 2)
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-1], 2)
 
         del l[0]
         size -= 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[0], 2)
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[0], 2)
 
         del l[:2]
         size -= 2
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[0], 4)
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[0], 4)
 
     # Like test_concat, split in two.
     def basic_test_repeat(self, size):
         l = [] * size
-        self.assertFalse(l)
+        self.failIf(l)
         l = [''] * size
-        self.assertEqual(len(l), size)
+        self.assertEquals(len(l), size)
         l = l * 2
-        self.assertEqual(len(l), size * 2)
+        self.assertEquals(len(l), size * 2)
 
     @bigmemtest(minsize=_2G // 2 + 2, memuse=24)
     def test_repeat_small(self, size):
@@ -892,14 +814,14 @@
     def basic_test_inplace_repeat(self, size):
         l = ['']
         l *= size
-        self.assertEqual(len(l), size)
-        self.assertTrue(l[0] is l[-1])
+        self.assertEquals(len(l), size)
+        self.failUnless(l[0] is l[-1])
         del l
 
         l = [''] * size
         l *= 2
-        self.assertEqual(len(l), size * 2)
-        self.assertTrue(l[size - 1] is l[-1])
+        self.assertEquals(len(l), size * 2)
+        self.failUnless(l[size - 1] is l[-1])
 
     @bigmemtest(minsize=_2G // 2 + 2, memuse=16)
     def test_inplace_repeat_small(self, size):
@@ -913,10 +835,10 @@
         l = [0] * size
         s = repr(l)
         # The repr of a list of 0's is exactly three times the list length.
-        self.assertEqual(len(s), size * 3)
-        self.assertEqual(s[:5], '[0, 0')
-        self.assertEqual(s[-5:], '0, 0]')
-        self.assertEqual(s.count('0'), size)
+        self.assertEquals(len(s), size * 3)
+        self.assertEquals(s[:5], '[0, 0')
+        self.assertEquals(s[-5:], '0, 0]')
+        self.assertEquals(s.count('0'), size)
 
     @bigmemtest(minsize=_2G // 3 + 2, memuse=8 + 3)
     def test_repr_small(self, size):
@@ -932,22 +854,22 @@
     def test_append(self, size):
         l = [object()] * size
         l.append(object())
-        self.assertEqual(len(l), size+1)
-        self.assertTrue(l[-3] is l[-2])
-        self.assertFalse(l[-2] is l[-1])
+        self.assertEquals(len(l), size+1)
+        self.failUnless(l[-3] is l[-2])
+        self.failIf(l[-2] is l[-1])
 
     @bigmemtest(minsize=_2G // 5 + 2, memuse=8 * 5)
     def test_count(self, size):
         l = [1, 2, 3, 4, 5] * size
-        self.assertEqual(l.count(1), size)
-        self.assertEqual(l.count("1"), 0)
+        self.assertEquals(l.count(1), size)
+        self.assertEquals(l.count("1"), 0)
 
     def basic_test_extend(self, size):
         l = [file] * size
         l.extend(l)
-        self.assertEqual(len(l), size * 2)
-        self.assertTrue(l[0] is l[-1])
-        self.assertTrue(l[size - 1] is l[size + 1])
+        self.assertEquals(len(l), size * 2)
+        self.failUnless(l[0] is l[-1])
+        self.failUnless(l[size - 1] is l[size + 1])
 
     @bigmemtest(minsize=_2G // 2 + 2, memuse=16)
     def test_extend_small(self, size):
@@ -961,9 +883,9 @@
     def test_index(self, size):
         l = [1L, 2L, 3L, 4L, 5L] * size
         size *= 5
-        self.assertEqual(l.index(1), 0)
-        self.assertEqual(l.index(5, size - 5), size - 1)
-        self.assertEqual(l.index(5, size - 5, size), size - 1)
+        self.assertEquals(l.index(1), 0)
+        self.assertEquals(l.index(5, size - 5), size - 1)
+        self.assertEquals(l.index(5, size - 5, size), size - 1)
         self.assertRaises(ValueError, l.index, 1, size - 4, size)
         self.assertRaises(ValueError, l.index, 6L)
 
@@ -973,99 +895,83 @@
         l = [1.0] * size
         l.insert(size - 1, "A")
         size += 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-3:], [1.0, "A", 1.0])
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-3:], [1.0, "A", 1.0])
 
         l.insert(size + 1, "B")
         size += 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-3:], ["A", 1.0, "B"])
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-3:], ["A", 1.0, "B"])
 
         l.insert(1, "C")
         size += 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[:3], [1.0, "C", 1.0])
-        self.assertEqual(l[size - 3:], ["A", 1.0, "B"])
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[:3], [1.0, "C", 1.0])
+        self.assertEquals(l[size - 3:], ["A", 1.0, "B"])
 
     @bigmemtest(minsize=_2G // 5 + 4, memuse=8 * 5)
     def test_pop(self, size):
         l = [u"a", u"b", u"c", u"d", u"e"] * size
         size *= 5
-        self.assertEqual(len(l), size)
+        self.assertEquals(len(l), size)
 
         item = l.pop()
         size -= 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(item, u"e")
-        self.assertEqual(l[-2:], [u"c", u"d"])
+        self.assertEquals(len(l), size)
+        self.assertEquals(item, u"e")
+        self.assertEquals(l[-2:], [u"c", u"d"])
 
         item = l.pop(0)
         size -= 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(item, u"a")
-        self.assertEqual(l[:2], [u"b", u"c"])
+        self.assertEquals(len(l), size)
+        self.assertEquals(item, u"a")
+        self.assertEquals(l[:2], [u"b", u"c"])
 
         item = l.pop(size - 2)
         size -= 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(item, u"c")
-        self.assertEqual(l[-2:], [u"b", u"d"])
+        self.assertEquals(len(l), size)
+        self.assertEquals(item, u"c")
+        self.assertEquals(l[-2:], [u"b", u"d"])
 
     @bigmemtest(minsize=_2G + 10, memuse=8)
     def test_remove(self, size):
         l = [10] * size
-        self.assertEqual(len(l), size)
+        self.assertEquals(len(l), size)
 
         l.remove(10)
         size -= 1
-        self.assertEqual(len(l), size)
+        self.assertEquals(len(l), size)
 
         # Because of the earlier l.remove(), this append doesn't trigger
         # a resize.
         l.append(5)
         size += 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-2:], [10, 5])
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-2:], [10, 5])
         l.remove(5)
         size -= 1
-        self.assertEqual(len(l), size)
-        self.assertEqual(l[-2:], [10, 10])
+        self.assertEquals(len(l), size)
+        self.assertEquals(l[-2:], [10, 10])
 
     @bigmemtest(minsize=_2G // 5 + 2, memuse=8 * 5)
     def test_reverse(self, size):
         l = [1, 2, 3, 4, 5] * size
         l.reverse()
-        self.assertEqual(len(l), size * 5)
-        self.assertEqual(l[-5:], [5, 4, 3, 2, 1])
-        self.assertEqual(l[:5], [5, 4, 3, 2, 1])
+        self.assertEquals(len(l), size * 5)
+        self.assertEquals(l[-5:], [5, 4, 3, 2, 1])
+        self.assertEquals(l[:5], [5, 4, 3, 2, 1])
 
     @bigmemtest(minsize=_2G // 5 + 2, memuse=8 * 5)
     def test_sort(self, size):
         l = [1, 2, 3, 4, 5] * size
         l.sort()
-        self.assertEqual(len(l), size * 5)
-        self.assertEqual(l.count(1), size)
-        self.assertEqual(l[:10], [1] * 10)
-        self.assertEqual(l[-10:], [5] * 10)
-
-class BufferTest(unittest.TestCase):
-
-    @precisionbigmemtest(size=_1G, memuse=4)
-    def test_repeat(self, size):
-        try:
-            with test_support.check_py3k_warnings():
-                b = buffer("AAAA")*size
-        except MemoryError:
-            pass # acceptable on 32-bit
-        else:
-            count = 0
-            for c in b:
-                self.assertEqual(c, 'A')
-                count += 1
-            self.assertEqual(count, size*4)
+        self.assertEquals(len(l), size * 5)
+        self.assertEquals(l.count(1), size)
+        self.assertEquals(l[:10], [1] * 10)
+        self.assertEquals(l[-10:], [5] * 10)
 
 def test_main():
-    test_support.run_unittest(StrTest, TupleTest, ListTest, BufferTest)
+    test_support.run_unittest(StrTest, TupleTest, ListTest)
 
 if __name__ == '__main__':
     if len(sys.argv) > 1:

--- lib-python/2.7/test/test_traceback.py	2015-04-18 05:34:44.683111356 +0300
+++ Lib/test/test_traceback.py	2015-04-18 05:34:31.871089907 +0300
@@ -1,15 +1,11 @@
 """Test cases for traceback module"""
 
-from _testcapi import traceback_print
-from StringIO import StringIO
-import sys
+from __future__ import with_statement
 import unittest
-from imp import reload
-from test.test_support import run_unittest, is_jython, Error
+from test.test_support import run_unittest, is_jython
 
 import traceback
 
-
 class TracebackCases(unittest.TestCase):
     # For now, a very minimal set of tests.  I want to be sure that
     # formatting of SyntaxErrors works based on changes for 2.1.
@@ -25,9 +21,6 @@
     def syntax_error_with_caret(self):
         compile("def fact(x):\n\treturn x!\n", "?", "exec")
 
-    def syntax_error_with_caret_2(self):
-        compile("1 +\n", "?", "exec")
-
     def syntax_error_without_caret(self):
         # XXX why doesn't compile raise the same traceback?
         import test.badsyntax_nocaret
@@ -35,19 +28,14 @@
     def syntax_error_bad_indentation(self):
         compile("def spam():\n  print 1\n print 2", "?", "exec")
 
+    @unittest.skipIf(is_jython, "FIXME: Jython lexer not catching bad '!'")
     def test_caret(self):
         err = self.get_exception_format(self.syntax_error_with_caret,
                                         SyntaxError)
-        self.assertTrue(len(err) == 4)
-        self.assertTrue(err[1].strip() == "return x!")
-        self.assertIn("^", err[2]) # third line has caret
-        self.assertTrue(err[1].find("!") == err[2].find("^")) # in the right place
-
-        err = self.get_exception_format(self.syntax_error_with_caret_2,
-                                        SyntaxError)
-        self.assertIn("^", err[2]) # third line has caret
-        self.assertTrue(err[2].count('\n') == 1) # and no additional newline
-        self.assertTrue(err[1].find("+") == err[2].find("^")) # in the right place
+        self.assert_(len(err) == 4)
+        self.assert_(err[1].strip() == "return x!")
+        self.assert_("^" in err[2]) # third line has caret
+        self.assert_(err[1].find("!") == err[2].find("^")) # in the right place
 
     def test_nocaret(self):
         if is_jython:
@@ -55,26 +43,29 @@
             return
         err = self.get_exception_format(self.syntax_error_without_caret,
                                         SyntaxError)
-        self.assertTrue(len(err) == 3)
-        self.assertTrue(err[1].strip() == "[x for x in x] = x")
+        self.assert_(len(err) == 3)
+        self.assert_(err[1].strip() == "[x for x in x] = x")
 
     def test_bad_indentation(self):
         err = self.get_exception_format(self.syntax_error_bad_indentation,
                                         IndentationError)
-        self.assertTrue(len(err) == 4)
-        self.assertTrue(err[1].strip() == "print 2")
-        self.assertIn("^", err[2])
-        self.assertTrue(err[1].find("2") == err[2].find("^"))
+        self.assert_(len(err) == 4)
+        self.assert_(err[1].strip() == "print 2")
+        self.assert_("^" in err[2])
+        # Antlr thinks the error is at the indentation, while CPython points at
+        # the end of the line.  I am agreeing with Antlr over CPython here.
+        self.assert_(err[1].find("p") -1 == err[2].find("^"))
 
     def test_bug737473(self):
-        import os, tempfile, time
+        import sys, os, tempfile, time
 
         savedpath = sys.path[:]
         testdir = tempfile.mkdtemp()
         try:
             sys.path.insert(0, testdir)
             testfile = os.path.join(testdir, 'test_bug737473.py')
-            print >> open(testfile, 'w'), """
+            with open(testfile, 'w') as fp:
+                print >> fp, """
 def test():
     raise ValueError"""
 
@@ -96,7 +87,8 @@
             # three seconds are needed for this test to pass reliably :-(
             time.sleep(4)
 
-            print >> open(testfile, 'w'), """
+            with open(testfile, 'w') as fp:
+                print >> fp, """
 def test():
     raise NotImplementedError"""
             reload(test_bug737473)
@@ -104,13 +96,24 @@
                 test_bug737473.test()
             except NotImplementedError:
                 src = traceback.extract_tb(sys.exc_traceback)[-1][-1]
-                self.assertEqual(src, 'raise NotImplementedError')
+                self.failUnlessEqual(src, 'raise NotImplementedError')
         finally:
             sys.path[:] = savedpath
             for f in os.listdir(testdir):
                 os.unlink(os.path.join(testdir, f))
             os.rmdir(testdir)
 
+    # sys.exc_traceback has been depecrated since 1.5, and is not supported on jython,
+    # because these are global variables/not threadsafe
+
+    def na_jython_test_members(self):
+        # Covers Python/structmember.c::listmembers()
+        try:
+            1/0
+        except:
+            import sys
+            sys.exc_traceback.__members__
+
     def test_base_exception(self):
         # Test that exceptions derived from BaseException are formatted right
         e = KeyboardInterrupt()
@@ -149,7 +152,7 @@
     def test_format_exception_only_bad__str__(self):
         class X(Exception):
             def __str__(self):
-                1 // 0
+                1/0
         err = traceback.format_exception_only(X, X())
         self.assertEqual(len(err), 1)
         str_value = '<unprintable %s object>' % X.__name__
@@ -159,45 +162,8 @@
         err = traceback.format_exception_only(None, None)
         self.assertEqual(err, ['None\n'])
 
-    def test_unicode(self):
-        err = AssertionError('\xff')
-        lines = traceback.format_exception_only(type(err), err)
-        self.assertEqual(lines, ['AssertionError: \xff\n'])
-
-        err = AssertionError(u'\xe9')
-        lines = traceback.format_exception_only(type(err), err)
-        self.assertEqual(lines, ['AssertionError: \\xe9\n'])
-
-
-class TracebackFormatTests(unittest.TestCase):
-
-    def test_traceback_format(self):
-        try:
-            raise KeyError('blah')
-        except KeyError:
-            type_, value, tb = sys.exc_info()
-            traceback_fmt = 'Traceback (most recent call last):\n' + \
-                            ''.join(traceback.format_tb(tb))
-            file_ = StringIO()
-            traceback_print(tb, file_)
-            python_fmt  = file_.getvalue()
-        else:
-            raise Error("unable to create test traceback string")
-
-        # Make sure that Python and the traceback module format the same thing
-        self.assertEqual(traceback_fmt, python_fmt)
-
-        # Make sure that the traceback is properly indented.
-        tb_lines = python_fmt.splitlines()
-        self.assertEqual(len(tb_lines), 3)
-        banner, location, source_line = tb_lines
-        self.assertTrue(banner.startswith('Traceback'))
-        self.assertTrue(location.startswith('  File'))
-        self.assertTrue(source_line.startswith('    raise'))
-
-
 def test_main():
-    run_unittest(TracebackCases, TracebackFormatTests)
+    run_unittest(TracebackCases)
 
 
 if __name__ == "__main__":

--- lib-python/2.7/test/test_signal.py	2015-04-18 05:34:44.651111303 +0300
+++ Lib/test/test_signal.py	2015-04-18 05:34:31.859089886 +0300
@@ -1,6 +1,17 @@
+# based on test_signal.py from
+# http://svn.python.org/projects/python/trunk/Lib/test/test_signal.py@62194
+# due to the fact that this version is modular enough to readily run
+# on Jython.
+#
+# most tests are disabled due to lack of 2.6 support in our signal
+# module (WakeupSignalTests, SiginterruptTest, ItimerTest) and no
+# os.pipe/os.fork (InterProcessSignalTests). It would seem possible to
+# remedy the latter by just using subprocess.
+
+from __future__ import with_statement
 import unittest
 from test import test_support
-from contextlib import closing
+from contextlib import closing, nested
 import gc
 import pickle
 import select
@@ -9,8 +20,10 @@
 import traceback
 import sys, os, time, errno
 
-if sys.platform in ('os2', 'riscos'):
-    raise unittest.SkipTest("Can't test signal on %s" % sys.platform)
+if (sys.platform[:3] in ('win', 'os2') or sys.platform == 'riscos' or
+    (test_support.is_jython and os._name == 'nt')):
+    raise test_support.TestSkipped("Can't test signal on %s" % \
+                                   sys.platform)
 
 
 class HandlerBCalled(Exception):
@@ -30,19 +43,18 @@
 def ignoring_eintr(__func, *args, **kwargs):
     try:
         return __func(*args, **kwargs)
-    except EnvironmentError as e:
+    except EnvironmentError, e:
         if e.errno != errno.EINTR:
             raise
         return None
 
 
-@unittest.skipIf(sys.platform == "win32", "Not valid on Windows")
 class InterProcessSignalTests(unittest.TestCase):
     MAX_DURATION = 20   # Entire test should last at most 20 sec.
 
     def setUp(self):
         self.using_gc = gc.isenabled()
-        gc.disable()
+        #gc.disable()
 
     def tearDown(self):
         if self.using_gc:
@@ -70,7 +82,7 @@
             try:
                 child.wait()
                 return
-            except OSError as e:
+            except OSError, e:
                 if e.errno != errno.EINTR:
                     raise
 
@@ -109,7 +121,7 @@
             # This wait should be interrupted by the signal's exception.
             self.wait(child)
             time.sleep(1)  # Give the signal time to be delivered.
-            self.fail('HandlerBCalled exception not raised')
+            self.fail('HandlerBCalled exception not thrown')
         except HandlerBCalled:
             self.assertTrue(self.b_called)
             self.assertFalse(self.a_called)
@@ -139,19 +151,15 @@
             self.fail("pause returned of its own accord, and the signal"
                       " didn't arrive after another second.")
 
-    # Issue 3864. Unknown if this affects earlier versions of freebsd also.
-    @unittest.skipIf(sys.platform=='freebsd6',
-        'inter process signals not reliable (do not mix well with threading) '
-        'on freebsd6')
     def test_main(self):
         # This function spawns a child process to insulate the main
         # test-running process from all the signals. It then
         # communicates with that child process over a pipe and
         # re-raises information about any exceptions the child
-        # raises. The real work happens in self.run_test().
+        # throws. The real work happens in self.run_test().
         os_done_r, os_done_w = os.pipe()
-        with closing(os.fdopen(os_done_r)) as done_r, \
-             closing(os.fdopen(os_done_w, 'w')) as done_w:
+        with nested(closing(os.fdopen(os_done_r)),
+                    closing(os.fdopen(os_done_w, 'w'))) as (done_r, done_w):
             child = os.fork()
             if child == 0:
                 # In the child process; run the test and report results
@@ -186,7 +194,6 @@
                           self.MAX_DURATION)
 
 
-@unittest.skipIf(sys.platform == "win32", "Not valid on Windows")
 class BasicSignalTests(unittest.TestCase):
     def trivial_signal_handler(self, *args):
         pass
@@ -203,38 +210,12 @@
 
     def test_getsignal(self):
         hup = signal.signal(signal.SIGHUP, self.trivial_signal_handler)
-        self.assertEqual(signal.getsignal(signal.SIGHUP),
-                         self.trivial_signal_handler)
+        self.assertEquals(signal.getsignal(signal.SIGHUP),
+                          self.trivial_signal_handler)
         signal.signal(signal.SIGHUP, hup)
-        self.assertEqual(signal.getsignal(signal.SIGHUP), hup)
-
-
-@unittest.skipUnless(sys.platform == "win32", "Windows specific")
-class WindowsSignalTests(unittest.TestCase):
-    def test_issue9324(self):
-        # Updated for issue #10003, adding SIGBREAK
-        handler = lambda x, y: None
-        for sig in (signal.SIGABRT, signal.SIGBREAK, signal.SIGFPE,
-                    signal.SIGILL, signal.SIGINT, signal.SIGSEGV,
-                    signal.SIGTERM):
-            # Set and then reset a handler for signals that work on windows
-            signal.signal(sig, signal.signal(sig, handler))
-
-        with self.assertRaises(ValueError):
-            signal.signal(-1, handler)
+        self.assertEquals(signal.getsignal(signal.SIGHUP), hup)
 
-        with self.assertRaises(ValueError):
-            signal.signal(7, handler)
 
-
-class WakeupFDTests(unittest.TestCase):
-
-    def test_invalid_fd(self):
-        fd = test_support.make_bad_fd()
-        self.assertRaises(ValueError, signal.set_wakeup_fd, fd)
-
-
-@unittest.skipIf(sys.platform == "win32", "Not valid on Windows")
 class WakeupSignalTests(unittest.TestCase):
     TIMEOUT_FULL = 10
     TIMEOUT_HALF = 5
@@ -248,10 +229,10 @@
         # before select is called
         time.sleep(self.TIMEOUT_FULL)
         mid_time = time.time()
-        self.assertTrue(mid_time - before_time < self.TIMEOUT_HALF)
+        self.assert_(mid_time - before_time < self.TIMEOUT_HALF)
         select.select([self.read], [], [], self.TIMEOUT_FULL)
         after_time = time.time()
-        self.assertTrue(after_time - mid_time < self.TIMEOUT_HALF)
+        self.assert_(after_time - mid_time < self.TIMEOUT_HALF)
 
     def test_wakeup_fd_during(self):
         import select
@@ -262,7 +243,7 @@
         self.assertRaises(select.error, select.select,
             [self.read], [], [], self.TIMEOUT_FULL)
         after_time = time.time()
-        self.assertTrue(after_time - before_time < self.TIMEOUT_HALF)
+        self.assert_(after_time - before_time < self.TIMEOUT_HALF)
 
     def setUp(self):
         import fcntl
@@ -280,109 +261,51 @@
         os.close(self.write)
         signal.signal(signal.SIGALRM, self.alrm)
 
-@unittest.skipIf(sys.platform == "win32", "Not valid on Windows")
 class SiginterruptTest(unittest.TestCase):
-
-    def setUp(self):
-        """Install a no-op signal handler that can be set to allow
-        interrupts or not, and arrange for the original signal handler to be
-        re-installed when the test is finished.
-        """
-        self.signum = signal.SIGUSR1
-        oldhandler = signal.signal(self.signum, lambda x,y: None)
-        self.addCleanup(signal.signal, self.signum, oldhandler)
-
-    def readpipe_interrupted(self):
-        """Perform a read during which a signal will arrive.  Return True if the
-        read is interrupted by the signal and raises an exception.  Return False
-        if it returns normally.
-        """
-        # Create a pipe that can be used for the read.  Also clean it up
-        # when the test is over, since nothing else will (but see below for
-        # the write end).
+    signum = signal.SIGUSR1
+    def readpipe_interrupted(self, cb):
         r, w = os.pipe()
-        self.addCleanup(os.close, r)
-
-        # Create another process which can send a signal to this one to try
-        # to interrupt the read.
         ppid = os.getpid()
         pid = os.fork()
 
-        if pid == 0:
-            # Child code: sleep to give the parent enough time to enter the
-            # read() call (there's a race here, but it's really tricky to
-            # eliminate it); then signal the parent process.  Also, sleep
-            # again to make it likely that the signal is delivered to the
-            # parent process before the child exits.  If the child exits
-            # first, the write end of the pipe will be closed and the test
-            # is invalid.
+        oldhandler = signal.signal(self.signum, lambda x,y: None)
+        cb()
+        if pid==0:
+            # child code: sleep, kill, sleep. and then exit,
+            # which closes the pipe from which the parent process reads
             try:
                 time.sleep(0.2)
                 os.kill(ppid, self.signum)
                 time.sleep(0.2)
             finally:
-                # No matter what, just exit as fast as possible now.
                 exit_subprocess()
-        else:
-            # Parent code.
-            # Make sure the child is eventually reaped, else it'll be a
-            # zombie for the rest of the test suite run.
-            self.addCleanup(os.waitpid, pid, 0)
-
-            # Close the write end of the pipe.  The child has a copy, so
-            # it's not really closed until the child exits.  We need it to
-            # close when the child exits so that in the non-interrupt case
-            # the read eventually completes, otherwise we could just close
-            # it *after* the test.
+
+        try:
             os.close(w)
 
-            # Try the read and report whether it is interrupted or not to
-            # the caller.
             try:
-                d = os.read(r, 1)
+                d=os.read(r, 1)
                 return False
             except OSError, err:
                 if err.errno != errno.EINTR:
                     raise
                 return True
+        finally:
+            signal.signal(self.signum, oldhandler)
+            os.waitpid(pid, 0)
 
     def test_without_siginterrupt(self):
-        """If a signal handler is installed and siginterrupt is not called
-        at all, when that signal arrives, it interrupts a syscall that's in
-        progress.
-        """
-        i = self.readpipe_interrupted()
-        self.assertTrue(i)
-        # Arrival of the signal shouldn't have changed anything.
-        i = self.readpipe_interrupted()
-        self.assertTrue(i)
+        i=self.readpipe_interrupted(lambda: None)
+        self.assertEquals(i, True)
 
     def test_siginterrupt_on(self):
-        """If a signal handler is installed and siginterrupt is called with
-        a true value for the second argument, when that signal arrives, it
-        interrupts a syscall that's in progress.
-        """
-        signal.siginterrupt(self.signum, 1)
-        i = self.readpipe_interrupted()
-        self.assertTrue(i)
-        # Arrival of the signal shouldn't have changed anything.
-        i = self.readpipe_interrupted()
-        self.assertTrue(i)
+        i=self.readpipe_interrupted(lambda: signal.siginterrupt(self.signum, 1))
+        self.assertEquals(i, True)
 
     def test_siginterrupt_off(self):
-        """If a signal handler is installed and siginterrupt is called with
-        a false value for the second argument, when that signal arrives, it
-        does not interrupt a syscall that's in progress.
-        """
-        signal.siginterrupt(self.signum, 0)
-        i = self.readpipe_interrupted()
-        self.assertFalse(i)
-        # Arrival of the signal shouldn't have changed anything.
-        i = self.readpipe_interrupted()
-        self.assertFalse(i)
+        i=self.readpipe_interrupted(lambda: signal.siginterrupt(self.signum, 0))
+        self.assertEquals(i, False)
 
-
-@unittest.skipIf(sys.platform == "win32", "Not valid on Windows")
 class ItimerTest(unittest.TestCase):
     def setUp(self):
         self.hndl_called = False
@@ -444,57 +367,37 @@
 
         self.assertEqual(self.hndl_called, True)
 
-    # Issue 3864. Unknown if this affects earlier versions of freebsd also.
-    @unittest.skipIf(sys.platform in ('freebsd6', 'netbsd5'),
-        'itimer not reliable (does not mix well with threading) on some BSDs.')
     def test_itimer_virtual(self):
         self.itimer = signal.ITIMER_VIRTUAL
         signal.signal(signal.SIGVTALRM, self.sig_vtalrm)
         signal.setitimer(self.itimer, 0.3, 0.2)
 
-        start_time = time.time()
-        while time.time() - start_time < 60.0:
-            # use up some virtual time by doing real work
-            _ = pow(12345, 67890, 10000019)
+        for i in xrange(100000000):
             if signal.getitimer(self.itimer) == (0.0, 0.0):
                 break # sig_vtalrm handler stopped this itimer
-        else: # Issue 8424
-            self.skipTest("timeout: likely cause: machine too slow or load too "
-                          "high")
 
         # virtual itimer should be (0.0, 0.0) now
-        self.assertEqual(signal.getitimer(self.itimer), (0.0, 0.0))
+        self.assertEquals(signal.getitimer(self.itimer), (0.0, 0.0))
         # and the handler should have been called
-        self.assertEqual(self.hndl_called, True)
+        self.assertEquals(self.hndl_called, True)
 
-    # Issue 3864. Unknown if this affects earlier versions of freebsd also.
-    @unittest.skipIf(sys.platform=='freebsd6',
-        'itimer not reliable (does not mix well with threading) on freebsd6')
     def test_itimer_prof(self):
         self.itimer = signal.ITIMER_PROF
         signal.signal(signal.SIGPROF, self.sig_prof)
         signal.setitimer(self.itimer, 0.2, 0.2)
 
-        start_time = time.time()
-        while time.time() - start_time < 60.0:
-            # do some work
-            _ = pow(12345, 67890, 10000019)
+        for i in xrange(100000000):
             if signal.getitimer(self.itimer) == (0.0, 0.0):
                 break # sig_prof handler stopped this itimer
-        else: # Issue 8424
-            self.skipTest("timeout: likely cause: machine too slow or load too "
-                          "high")
 
         # profiling itimer should be (0.0, 0.0) now
-        self.assertEqual(signal.getitimer(self.itimer), (0.0, 0.0))
+        self.assertEquals(signal.getitimer(self.itimer), (0.0, 0.0))
         # and the handler should have been called
         self.assertEqual(self.hndl_called, True)
 
 def test_main():
-    test_support.run_unittest(BasicSignalTests, InterProcessSignalTests,
-                              WakeupFDTests, WakeupSignalTests,
-                              SiginterruptTest, ItimerTest,
-                              WindowsSignalTests)
+    test_support.run_unittest(BasicSignalTests) #, InterProcessSignalTests)
+    # ignore these 2.6 tests: WakeupSignalTests, SiginterruptTest, ItimerTest
 
 
 if __name__ == "__main__":

--- lib-python/2.7/test/test_old_mailbox.py	2015-04-18 05:34:44.611111236 +0300
+++ Lib/test/test_old_mailbox.py	2015-04-18 05:34:31.851089873 +0300
@@ -1,6 +1,7 @@
 # This set of tests exercises the backward-compatibility class
 # in mailbox.py (the ones without write support).
 
+from __future__ import with_statement
 import mailbox
 import os
 import time
@@ -48,69 +49,67 @@
         filename = os.extsep.join((str(t), str(pid), "myhostname", "mydomain"))
         tmpname = os.path.join(self._dir, "tmp", filename)
         newname = os.path.join(self._dir, dir, filename)
-        with open(tmpname, "w") as fp:
-            self._msgfiles.append(tmpname)
-            if mbox:
-                fp.write(FROM_)
-            fp.write(DUMMY_MESSAGE)
+        fp = open(tmpname, "w")
+        self._msgfiles.append(tmpname)
+        if mbox:
+            fp.write(FROM_)
+        fp.write(DUMMY_MESSAGE)
+        fp.close()
         if hasattr(os, "link"):
             os.link(tmpname, newname)
         else:
-            with open(newname, "w") as fp:
-                fp.write(DUMMY_MESSAGE)
+            fp = open(newname, "w")
+            fp.write(DUMMY_MESSAGE)
+            fp.close()
         self._msgfiles.append(newname)
         return tmpname
 
+    def assert_and_close(self, message):
+        self.assert_(message is not None)
+        message.fp.close()
+
     def test_empty_maildir(self):
         """Test an empty maildir mailbox"""
         # Test for regression on bug #117490:
         self.mbox = mailbox.Maildir(test_support.TESTFN)
-        self.assertTrue(len(self.mbox) == 0)
-        self.assertTrue(self.mbox.next() is None)
-        self.assertTrue(self.mbox.next() is None)
+        self.assert_(len(self.mbox) == 0)
+        self.assert_(self.mbox.next() is None)
+        self.assert_(self.mbox.next() is None)
 
     def test_nonempty_maildir_cur(self):
         self.createMessage("cur")
         self.mbox = mailbox.Maildir(test_support.TESTFN)
-        self.assertTrue(len(self.mbox) == 1)
-        msg = self.mbox.next()
-        self.assertTrue(msg is not None)
-        msg.fp.close()
-        self.assertTrue(self.mbox.next() is None)
-        self.assertTrue(self.mbox.next() is None)
+        self.assert_(len(self.mbox) == 1)
+        self.assert_and_close(self.mbox.next())
+        self.assert_(self.mbox.next() is None)
+        self.assert_(self.mbox.next() is None)
 
     def test_nonempty_maildir_new(self):
         self.createMessage("new")
         self.mbox = mailbox.Maildir(test_support.TESTFN)
-        self.assertTrue(len(self.mbox) == 1)
-        msg = self.mbox.next()
-        self.assertTrue(msg is not None)
-        msg.fp.close()
-        self.assertTrue(self.mbox.next() is None)
-        self.assertTrue(self.mbox.next() is None)
+        self.assert_(len(self.mbox) == 1)
+        self.assert_and_close(self.mbox.next())
+        self.assert_(self.mbox.next() is None)
+        self.assert_(self.mbox.next() is None)
 
     def test_nonempty_maildir_both(self):
         self.createMessage("cur")
         self.createMessage("new")
         self.mbox = mailbox.Maildir(test_support.TESTFN)
-        self.assertTrue(len(self.mbox) == 2)
-        msg = self.mbox.next()
-        self.assertTrue(msg is not None)
-        msg.fp.close()
-        msg = self.mbox.next()
-        self.assertTrue(msg is not None)
-        msg.fp.close()
-        self.assertTrue(self.mbox.next() is None)
-        self.assertTrue(self.mbox.next() is None)
+        self.assert_(len(self.mbox) == 2)
+        self.assert_and_close(self.mbox.next())
+        self.assert_and_close(self.mbox.next())
+        self.assert_(self.mbox.next() is None)
+        self.assert_(self.mbox.next() is None)
 
     def test_unix_mbox(self):
         ### should be better!
-        import email.parser
+        import email.Parser
         fname = self.createMessage("cur", True)
         n = 0
-        with open(fname) as f:
-            for msg in mailbox.PortableUnixMailbox(f,
-                                               email.parser.Parser().parse):
+        with open(fname) as fp:
+            for msg in mailbox.PortableUnixMailbox(fp,
+                                                   email.Parser.Parser().parse):
                 n += 1
                 self.assertEqual(msg["subject"], "Simple Test")
                 self.assertEqual(len(str(msg)), len(FROM_)+len(DUMMY_MESSAGE))
@@ -126,8 +125,8 @@
 
     def test_from_regex (self):
         # Testing new regex from bug #1633678
-        with open(self._path, 'w') as f:
-            f.write("""From fred@example.com Mon May 31 13:24:50 2004 +0200
+        f = open(self._path, 'w')
+        f.write("""From fred@example.com Mon May 31 13:24:50 2004 +0200
 Subject: message 1
 
 body1
@@ -144,10 +143,13 @@
 
 body4
 """)
-        with open(self._path, 'r') as f:
-            box = mailbox.UnixMailbox(f)
-            self.assertTrue(len(list(iter(box))) == 4)
-
+        f.close()
+        box = mailbox.UnixMailbox(open(self._path, 'rb'))
+        messages = list(iter(box))
+        self.assert_(len(messages) == 4)
+        for message in messages:
+            message.fp.close()
+        box.fp.close() # Jython addition: explicit close needed
 
     # XXX We still need more tests!
 

--- lib-python/2.7/test/test_weakref.py	2015-04-18 05:34:44.735111444 +0300
+++ Lib/test/test_weakref.py	2015-04-18 05:34:31.875089913 +0300
@@ -7,6 +7,21 @@
 
 from test import test_support
 
+if test_support.is_jython:
+    import time
+
+    def extra_collect():
+        """Kick Java's GC into gear; also callbacks need to be called by our reaper thread"""
+        gc.collect()
+        time.sleep(0.2)
+        gc.collect()
+        time.sleep(0.2)
+        gc.collect()
+else:
+    def extra_collect():
+        gc.collect()
+
+
 # Used in ReferencesTestCase.test_ref_created_during_del() .
 ref_from_del = None
 
@@ -78,6 +93,7 @@
         repr(wr)
         # Dead reference:
         del o
+        gc.collect()
         repr(wr)
 
     def test_basic_callback(self):
@@ -91,6 +107,7 @@
         ref1 = weakref.ref(o, self.callback)
         ref2 = weakref.ref(o, self.callback)
         del o
+        extra_collect()
         self.assertTrue(ref1() is None,
                      "expected reference to be invalidated")
         self.assertTrue(ref2() is None,
@@ -115,6 +132,7 @@
         self.ref = weakref.ref(c, callback)
         ref1 = weakref.ref(c, callback)
         del c
+        gc.collect()
 
     def test_proxy_ref(self):
         o = C()
@@ -122,13 +140,22 @@
         ref1 = weakref.proxy(o, self.callback)
         ref2 = weakref.proxy(o, self.callback)
         del o
+        gc.collect()
 
         def check(proxy):
             proxy.bar
 
         self.assertRaises(weakref.ReferenceError, check, ref1)
         self.assertRaises(weakref.ReferenceError, check, ref2)
-        self.assertRaises(weakref.ReferenceError, bool, weakref.proxy(C()))
+
+        # Need to add extra step for Jython - in the orginal test, ref counting had already removed C()
+        # self.assertRaises(weakref.ReferenceError, bool, weakref.proxy(C()))
+        o2 = C()
+        ref3 = weakref.proxy(o2)
+        del o2
+        extra_collect()
+        self.assertRaises(weakref.ReferenceError, bool, ref3)
+
         self.assertTrue(self.cbcalled == 2)
 
     def check_basic_ref(self, factory):
@@ -145,6 +172,7 @@
         o = factory()
         ref = weakref.ref(o, self.callback)
         del o
+        extra_collect()  # Jython - allow for the reaper to take care of the callback
         self.assertTrue(self.cbcalled == 1,
                      "callback did not properly set 'cbcalled'")
         self.assertTrue(ref() is None,
@@ -169,6 +197,7 @@
         self.assertTrue(weakref.getweakrefcount(o) == 2,
                      "wrong weak ref count for object")
         del proxy
+        gc.collect()
         self.assertTrue(weakref.getweakrefcount(o) == 1,
                      "wrong weak ref count for object after deleting proxy")
 
@@ -346,6 +375,7 @@
                      "got wrong number of weak reference objects")
 
         del ref1, ref2, proxy1, proxy2
+        gc.collect()
         self.assertTrue(weakref.getweakrefcount(o) == 0,
                      "weak reference objects not unlinked from"
                      " referent when discarded.")
@@ -359,6 +389,7 @@
         ref1 = weakref.ref(o, self.callback)
         ref2 = weakref.ref(o, self.callback)
         del ref1
+        gc.collect()
         self.assertTrue(weakref.getweakrefs(o) == [ref2],
                      "list of refs does not match")
 
@@ -366,10 +397,12 @@
         ref1 = weakref.ref(o, self.callback)
         ref2 = weakref.ref(o, self.callback)
         del ref2
+        gc.collect()
         self.assertTrue(weakref.getweakrefs(o) == [ref1],
                      "list of refs does not match")
 
         del ref1
+        gc.collect()
         self.assertTrue(weakref.getweakrefs(o) == [],
                      "list of refs not cleared")
 
@@ -571,6 +604,7 @@
         del c1, c2, C, D
         gc.collect()
 
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython without significant rewriting")
     def test_callback_in_cycle_resurrection(self):
         import gc
 
@@ -604,7 +638,7 @@
         del c1, c2, C   # make them all trash
         self.assertEqual(alist, [])  # del isn't enough to reclaim anything
 
-        gc.collect()
+        extra_collect()
         # c1.wr and c2.wr were part of the cyclic trash, so should have
         # been cleared without their callbacks executing.  OTOH, the weakref
         # to C is bound to a function local (wr), and wasn't trash, so that
@@ -617,6 +651,7 @@
         gc.collect()
         self.assertEqual(alist, [])
 
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython")
     def test_callbacks_on_callback(self):
         import gc
 
@@ -647,7 +682,7 @@
 
         del callback, c, d, C
         self.assertEqual(alist, [])  # del isn't enough to clean up cycles
-        gc.collect()
+        extra_collect()
         self.assertEqual(alist, ["safe_callback called"])
         self.assertEqual(external_wr(), None)
 
@@ -655,12 +690,15 @@
         gc.collect()
         self.assertEqual(alist, [])
 
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython")
     def test_gc_during_ref_creation(self):
         self.check_gc_during_creation(weakref.ref)
 
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython")
     def test_gc_during_proxy_creation(self):
         self.check_gc_during_creation(weakref.proxy)
 
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython")
     def check_gc_during_creation(self, makeref):
         thresholds = gc.get_threshold()
         gc.set_threshold(1, 1, 1)
@@ -717,12 +755,12 @@
         weakref.ref(int)
         a = weakref.ref(A, l.append)
         A = None
-        gc.collect()
+        extra_collect()
         self.assertEqual(a(), None)
         self.assertEqual(l, [a])
         b = weakref.ref(B, l.append)
         B = None
-        gc.collect()
+        extra_collect()
         self.assertEqual(b(), None)
         self.assertEqual(l, [a, b])
 
@@ -812,6 +850,7 @@
         self.assertTrue(mr.called)
         self.assertEqual(mr.value, 24)
         del o
+        extra_collect()
         self.assertTrue(mr() is None)
         self.assertTrue(mr.called)
 
@@ -828,9 +867,9 @@
         self.assertEqual(weakref.getweakrefcount(o), 3)
         refs = weakref.getweakrefs(o)
         self.assertEqual(len(refs), 3)
-        self.assertTrue(r2 is refs[0])
-        self.assertIn(r1, refs[1:])
-        self.assertIn(r3, refs[1:])
+        self.assertIn(r1, refs)
+        self.assertIn(r2, refs)
+        self.assertIn(r3, refs)
 
     def test_subclass_refs_dont_conflate_callbacks(self):
         class MyRef(weakref.ref):
@@ -839,7 +878,7 @@
         r1 = MyRef(o, id)
         r2 = MyRef(o, str)
         self.assertTrue(r1 is not r2)
-        refs = weakref.getweakrefs(o)
+        refs = list(weakref.getweakrefs(o))
         self.assertIn(r1, refs)
         self.assertIn(r2, refs)
 
@@ -915,12 +954,12 @@
             pass
         del items
         gc.collect()
-        n1 = len(dct)
+        n1 = len(list(dct))
         del it
         gc.collect()
-        n2 = len(dct)
-        # one item may be kept alive inside the iterator
-        self.assertIn(n1, (0, 1))
+        n2 = len(list(dct))
+        # one or two items may be kept alive inside the iterator
+        self.assertIn(n1, (0, 1, 2))
         self.assertEqual(n2, 0)
 
     def test_weak_keyed_len_cycles(self):
@@ -953,9 +992,11 @@
             self.assertGreaterEqual(n2, 0)
             self.assertLessEqual(n2, n1)
 
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython")
     def test_weak_keyed_len_race(self):
         self.check_len_race(weakref.WeakKeyDictionary, lambda k: (k, 1))
 
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython")
     def test_weak_valued_len_race(self):
         self.check_len_race(weakref.WeakValueDictionary, lambda k: (1, k))
 
@@ -965,8 +1006,9 @@
         #
         dict, objects = self.make_weak_valued_dict()
         for o in objects:
-            self.assertTrue(weakref.getweakrefcount(o) == 1,
-                         "wrong number of weak references to %r!" % o)
+            if not test_support.is_jython:  # Such dictionaries now use MapMaker
+                self.assertTrue(weakref.getweakrefcount(o) == 1,
+                                "wrong number of weak references to %r!" % o)
             self.assertTrue(o is dict[o.arg],
                          "wrong object returned by weak dict!")
         items1 = dict.items()
@@ -978,15 +1020,19 @@
         del items1, items2
         self.assertTrue(len(dict) == self.COUNT)
         del objects[0]
-        self.assertTrue(len(dict) == (self.COUNT - 1),
+        gc.collect()
+        # underlying Map.size is guaranteed only to be eventually consistent for MapMaker
+        self.assertEqual(len(list(dict.iterkeys())), self.COUNT - 1,
                      "deleting object did not cause dictionary update")
         del objects, o
-        self.assertTrue(len(dict) == 0,
+        gc.collect()
+        self.assertEqual(len(list(dict.iterkeys())), 0,
                      "deleting the values did not clear the dictionary")
         # regression on SF bug #447152:
         dict = weakref.WeakValueDictionary()
         self.assertRaises(KeyError, dict.__getitem__, 1)
         dict[2] = C()
+        gc.collect()
         self.assertRaises(KeyError, dict.__getitem__, 2)
 
     def test_weak_keys(self):
@@ -996,8 +1042,9 @@
         #
         dict, objects = self.make_weak_keyed_dict()
         for o in objects:
-            self.assertTrue(weakref.getweakrefcount(o) == 1,
-                         "wrong number of weak references to %r!" % o)
+            if not test_support.is_jython:  # Such dictionaries now use MapMaker
+                self.assertTrue(weakref.getweakrefcount(o) == 1,
+                                "wrong number of weak references to %r!" % o)
             self.assertTrue(o.arg is dict[o],
                          "wrong object returned by weak dict!")
         items1 = dict.items()
@@ -1005,12 +1052,14 @@
         self.assertTrue(set(items1) == set(items2),
                      "cloning of weak-keyed dictionary did not work!")
         del items1, items2
-        self.assertTrue(len(dict) == self.COUNT)
+        self.assertEqual(len(list(dict.iterkeys())), self.COUNT)
         del objects[0]
-        self.assertTrue(len(dict) == (self.COUNT - 1),
+        gc.collect()
+        self.assertEqual(len(list(dict.iterkeys())), self.COUNT - 1,
                      "deleting object did not cause dictionary update")
         del objects, o
-        self.assertTrue(len(dict) == 0,
+        gc.collect()
+        self.assertEqual(len(list(dict.iterkeys())), 0,
                      "deleting the keys did not clear the dictionary")
         o = Object(42)
         dict[o] = "What is the meaning of the universe?"
@@ -1228,14 +1277,15 @@
         self.assertRaises(KeyError, d.__delitem__, o)
         self.assertRaises(KeyError, d.__getitem__, o)
 
-        # If a key isn't of a weakly referencable type, __getitem__ and
-        # __setitem__ raise TypeError.  __delitem__ should too.
-        self.assertRaises(TypeError, d.__delitem__,  13)
-        self.assertRaises(TypeError, d.__getitem__,  13)
-        self.assertRaises(TypeError, d.__setitem__,  13, 13)
-
+        # In Jython, all objects can be weakly referenced.
+        self.assertRaises(KeyError, d.__delitem__,  13)
+        self.assertRaises(KeyError, d.__getitem__,  13)
+
+    # Using MapMaker means that __eq__ is not called given that such
+    # Google Collections based weak maps use identity, not equality.
+    @unittest.skipIf(test_support.is_jython, "Not a valid test for Jython")
     def test_weak_keyed_cascading_deletes(self):
-        # SF bug 742860.  For some reason, before 2.3 __delitem__ iterated
+        # SF bug 742860.  For some reason, bef1ore 2.3 __delitem__ iterated
         # over the keys via self.data.iterkeys().  If things vanished from
         # the dict during this (or got added), that caused a RuntimeError.
 
@@ -1316,6 +1366,8 @@
 >>> o is o2
 True
 >>> del o, o2
+>>> import gc  # Addition for Jython
+>>> gc_count = gc.collect()
 >>> print r()
 None
 
@@ -1368,6 +1420,8 @@
 >>> id2obj(a_id) is a
 True
 >>> del a
+>>> import gc  # addition for Jython
+>>> gc_count = gc.collect()
 >>> try:
 ...     id2obj(a_id)
 ... except KeyError:

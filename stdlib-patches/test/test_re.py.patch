--- lib-python/2.7/test/test_re.py	2015-04-18 05:34:44.639111282 +0300
+++ Lib/test/test_re.py	2015-04-18 05:34:31.855089880 +0300
@@ -1,17 +1,16 @@
-from test.test_support import verbose, run_unittest, import_module
-from test.test_support import precisionbigmemtest, _2G, cpython_only
+import sys
+sys.path = ['.'] + sys.path
+
+from test.test_support import verbose, run_unittest
 import re
 from re import Scanner
-import sys
-import string
-import traceback
+import sys, os, traceback
 from weakref import proxy
 
-
 # Misc tests from Tim Peters' re.doc
 
 # WARNING: Don't change details in these tests if you don't know
-# what you're doing. Some of these tests were carefully modeled to
+# what you're doing. Some of these tests were carefuly modeled to
 # cover most of the code.
 
 import unittest
@@ -109,18 +108,6 @@
                 self.assertEqual(z, y)
                 self.assertEqual(type(z), type(y))
 
-    def test_bug_1661(self):
-        # Verify that flags do not get silently ignored with compiled patterns
-        pattern = re.compile('.')
-        self.assertRaises(ValueError, re.match, pattern, 'A', re.I)
-        self.assertRaises(ValueError, re.search, pattern, 'A', re.I)
-        self.assertRaises(ValueError, re.findall, pattern, 'A', re.I)
-        self.assertRaises(ValueError, re.compile, pattern, re.I)
-
-    def test_bug_3629(self):
-        # A regex that triggered a bug in the sre-code validator
-        re.compile("(?P<quote>)(?(quote))")
-
     def test_sub_template_numeric_escape(self):
         # bug 776311 and friends
         self.assertEqual(re.sub('x', r'\0', 'x'), '\0')
@@ -176,31 +163,11 @@
         self.assertEqual(re.sub('x*', '-', 'abxd'), '-a-b-d-')
         self.assertEqual(re.sub('x+', '-', 'abxd'), 'ab-d')
 
-    def test_symbolic_groups(self):
-        re.compile('(?P<a>x)(?P=a)(?(a)y)')
-        re.compile('(?P<a1>x)(?P=a1)(?(a1)y)')
-        self.assertRaises(re.error, re.compile, '(?P<a>)(?P<a>)')
-        self.assertRaises(re.error, re.compile, '(?Px)')
-        self.assertRaises(re.error, re.compile, '(?P=)')
-        self.assertRaises(re.error, re.compile, '(?P=1)')
-        self.assertRaises(re.error, re.compile, '(?P=a)')
-        self.assertRaises(re.error, re.compile, '(?P=a1)')
-        self.assertRaises(re.error, re.compile, '(?P=a.)')
-        self.assertRaises(re.error, re.compile, '(?P<)')
-        self.assertRaises(re.error, re.compile, '(?P<>)')
-        self.assertRaises(re.error, re.compile, '(?P<1>)')
-        self.assertRaises(re.error, re.compile, '(?P<a.>)')
-        self.assertRaises(re.error, re.compile, '(?())')
-        self.assertRaises(re.error, re.compile, '(?(a))')
-        self.assertRaises(re.error, re.compile, '(?(1a))')
-        self.assertRaises(re.error, re.compile, '(?(a.))')
-
     def test_symbolic_refs(self):
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<a', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<a a>', 'xx')
-        self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<>', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)', '\g<1a1>', 'xx')
         self.assertRaises(IndexError, re.sub, '(?P<a>x)', '\g<ab>', 'xx')
         self.assertRaises(re.error, re.sub, '(?P<a>x)|(?P<b>y)', '\g<b>', 'xx')
@@ -395,31 +362,9 @@
         self.assertEqual(re.search(r"\d\D\w\W\s\S",
                                    "1aa! a", re.UNICODE).group(0), "1aa! a")
 
-    def test_string_boundaries(self):
-        # See http://bugs.python.org/issue10713
-        self.assertEqual(re.search(r"\b(abc)\b", "abc").group(1),
-                         "abc")
-        # There's a word boundary at the start of a string.
-        self.assertTrue(re.match(r"\b", "abc"))
-        # A non-empty string includes a non-boundary zero-length match.
-        self.assertTrue(re.search(r"\B", "abc"))
-        # There is no non-boundary match at the start of a string.
-        self.assertFalse(re.match(r"\B", "abc"))
-        # However, an empty string contains no word boundaries, and also no
-        # non-boundaries.
-        self.assertEqual(re.search(r"\B", ""), None)
-        # This one is questionable and different from the perlre behaviour,
-        # but describes current behavior.
-        self.assertEqual(re.search(r"\b", ""), None)
-        # A single word-character string has two boundaries, but no
-        # non-boundary gaps.
-        self.assertEqual(len(re.findall(r"\b", "a")), 2)
-        self.assertEqual(len(re.findall(r"\B", "a")), 0)
-        # If there are no words, there are no boundaries
-        self.assertEqual(len(re.findall(r"\b", " ")), 0)
-        self.assertEqual(len(re.findall(r"\b", "   ")), 0)
-        # Can match around the whitespace.
-        self.assertEqual(len(re.findall(r"\B", " ")), 2)
+    def test_ignore_case(self):
+        self.assertEqual(re.match("abc", "ABC", re.I).group(0), "ABC")
+        self.assertEqual(re.match("abc", u"ABC", re.I).group(0), "ABC")
 
     def test_bigcharset(self):
         self.assertEqual(re.match(u"([\u2222\u2223])",
@@ -427,12 +372,6 @@
         self.assertEqual(re.match(u"([\u2222\u2223])",
                                   u"\u2222", re.UNICODE).group(1), u"\u2222")
 
-    def test_big_codesize(self):
-        # Issue #1160
-        r = re.compile('|'.join(('%d'%x for x in range(10000))))
-        self.assertIsNotNone(r.match('1000'))
-        self.assertIsNotNone(r.match('9999'))
-
     def test_anyall(self):
         self.assertEqual(re.match("a.b", "a\nb", re.DOTALL).group(0),
                          "a\nb")
@@ -454,8 +393,6 @@
         self.assertEqual(re.match(r"(a)(?!\s(abc|a))", "a b").group(1), "a")
 
     def test_ignore_case(self):
-        self.assertEqual(re.match("abc", "ABC", re.I).group(0), "ABC")
-        self.assertEqual(re.match("abc", u"ABC", re.I).group(0), "ABC")
         self.assertEqual(re.match(r"(a\s[^a])", "a b", re.I).group(1), "a b")
         self.assertEqual(re.match(r"(a\s[^a]*)", "a bb", re.I).group(1), "a bb")
         self.assertEqual(re.match(r"(a\s[abc])", "a b", re.I).group(1), "a b")
@@ -485,61 +422,17 @@
         self.assertEqual(re.search("\s(b)", " b").group(1), "b")
         self.assertEqual(re.search("a\s", "a ").group(0), "a ")
 
-    def assertMatch(self, pattern, text, match=None, span=None,
-                    matcher=re.match):
-        if match is None and span is None:
-            # the pattern matches the whole text
-            match = text
-            span = (0, len(text))
-        elif match is None or span is None:
-            raise ValueError('If match is not None, span should be specified '
-                             '(and vice versa).')
-        m = matcher(pattern, text)
-        self.assertTrue(m)
-        self.assertEqual(m.group(), match)
-        self.assertEqual(m.span(), span)
-
     def test_re_escape(self):
-        alnum_chars = string.ascii_letters + string.digits
-        p = u''.join(unichr(i) for i in range(256))
-        for c in p:
-            if c in alnum_chars:
-                self.assertEqual(re.escape(c), c)
-            elif c == u'\x00':
-                self.assertEqual(re.escape(c), u'\\000')
-            else:
-                self.assertEqual(re.escape(c), u'\\' + c)
-            self.assertMatch(re.escape(c), c)
-        self.assertMatch(re.escape(p), p)
-
-    def test_re_escape_byte(self):
-        alnum_chars = (string.ascii_letters + string.digits).encode('ascii')
-        p = ''.join(chr(i) for i in range(256))
-        for b in p:
-            if b in alnum_chars:
-                self.assertEqual(re.escape(b), b)
-            elif b == b'\x00':
-                self.assertEqual(re.escape(b), b'\\000')
-            else:
-                self.assertEqual(re.escape(b), b'\\' + b)
-            self.assertMatch(re.escape(b), b)
-        self.assertMatch(re.escape(p), p)
-
-    def test_re_escape_non_ascii(self):
-        s = u'xxx\u2620\u2620\u2620xxx'
-        s_escaped = re.escape(s)
-        self.assertEqual(s_escaped, u'xxx\\\u2620\\\u2620\\\u2620xxx')
-        self.assertMatch(s_escaped, s)
-        self.assertMatch(u'.%s+.' % re.escape(u'\u2620'), s,
-                         u'x\u2620\u2620\u2620x', (2, 7), re.search)
-
-    def test_re_escape_non_ascii_bytes(self):
-        b = u'y\u2620y\u2620y'.encode('utf-8')
-        b_escaped = re.escape(b)
-        self.assertEqual(b_escaped, b'y\\\xe2\\\x98\\\xa0y\\\xe2\\\x98\\\xa0y')
-        self.assertMatch(b_escaped, b)
-        res = re.findall(re.escape(u'\u2620'.encode('utf-8')), b)
-        self.assertEqual(len(res), 2)
+        p=""
+        for i in range(0, 256):
+            p = p + chr(i)
+            self.assertEqual(re.match(re.escape(chr(i)), chr(i)) is not None,
+                             True)
+            self.assertEqual(re.match(re.escape(chr(i)), chr(i)).span(), (0,1))
+
+        pat=re.compile(re.escape(p))
+        self.assertEqual(pat.match(p) is not None, True)
+        self.assertEqual(pat.match(p).span(), (0,256))
 
     def test_pickling(self):
         import pickle
@@ -547,8 +440,14 @@
         import cPickle
         self.pickle_test(cPickle)
         # old pickles expect the _compile() reconstructor in sre module
-        import_module("sre", deprecated=True)
-        from sre import _compile
+        import warnings
+        original_filters = warnings.filters[:]
+        try:
+            warnings.filterwarnings("ignore", "The sre module is deprecated",
+                                    DeprecationWarning)
+            from sre import _compile
+        finally:
+            warnings.filters = original_filters
 
     def pickle_test(self, pickle):
         oldpat = re.compile('a(?:b|(c|e){1,2}?|d)+?(.)')
@@ -615,28 +514,22 @@
         self.assertEqual(re.match('.*?cd', 20000*'abc'+'de').end(0), 60001)
         # non-simple '*?' still used to hit the recursion limit, before the
         # non-recursive scheme was implemented.
-        self.assertEqual(re.search('(a|b)*?c', 10000*'ab'+'cd').end(0), 20001)
+
+        # does not apply for Jython, since we do not implement the
+        # non-recursive scheme
+        # self.assertEqual(re.search('(a|b)*?c', 10000*'ab'+'cd').end(0), 20001)
 
     def test_bug_612074(self):
         pat=u"["+re.escape(u"\u2039")+u"]"
         self.assertEqual(re.compile(pat) and 1, 1)
 
-    def test_stack_overflow(self):
+    def not_valid_for_jython_implementation_test_stack_overflow(self):
         # nasty cases that used to overflow the straightforward recursive
         # implementation of repeated groups.
         self.assertEqual(re.match('(x)*', 50000*'x').group(1), 'x')
         self.assertEqual(re.match('(x)*y', 50000*'x'+'y').group(1), 'x')
         self.assertEqual(re.match('(x)*?y', 50000*'x'+'y').group(1), 'x')
 
-    def test_unlimited_zero_width_repeat(self):
-        # Issue #9669
-        self.assertIsNone(re.match(r'(?:a?)*y', 'z'))
-        self.assertIsNone(re.match(r'(?:a?)+y', 'z'))
-        self.assertIsNone(re.match(r'(?:a?){2,}y', 'z'))
-        self.assertIsNone(re.match(r'(?:a?)*?y', 'z'))
-        self.assertIsNone(re.match(r'(?:a?)+?y', 'z'))
-        self.assertIsNone(re.match(r'(?:a?){2,}?y', 'z'))
-
     def test_scanner(self):
         def s_ident(scanner, token): return token
         def s_operator(scanner, token): return "op%s" % token
@@ -712,7 +605,7 @@
             unicode
         except NameError:
             return # no problem if we have no unicode
-        self.assertTrue(re.compile('bug_926075') is not
+        self.assert_(re.compile('bug_926075') is not
                      re.compile(eval("u'bug_926075'")))
 
     def test_bug_931848(self):
@@ -739,27 +632,6 @@
         self.assertEqual(iter.next().span(), (4, 4))
         self.assertRaises(StopIteration, iter.next)
 
-    def test_bug_6561(self):
-        # '\d' should match characters in Unicode category 'Nd'
-        # (Number, Decimal Digit), but not those in 'Nl' (Number,
-        # Letter) or 'No' (Number, Other).
-        decimal_digits = [
-            u'\u0037', # '\N{DIGIT SEVEN}', category 'Nd'
-            u'\u0e58', # '\N{THAI DIGIT SIX}', category 'Nd'
-            u'\uff10', # '\N{FULLWIDTH DIGIT ZERO}', category 'Nd'
-            ]
-        for x in decimal_digits:
-            self.assertEqual(re.match('^\d$', x, re.UNICODE).group(0), x)
-
-        not_decimal_digits = [
-            u'\u2165', # '\N{ROMAN NUMERAL SIX}', category 'Nl'
-            u'\u3039', # '\N{HANGZHOU NUMERAL TWENTY}', category 'Nl'
-            u'\u2082', # '\N{SUBSCRIPT TWO}', category 'No'
-            u'\u32b4', # '\N{CIRCLED NUMBER THIRTY NINE}', category 'No'
-            ]
-        for x in not_decimal_digits:
-            self.assertIsNone(re.match('^\d$', x, re.UNICODE))
-
     def test_empty_array(self):
         # SF buf 1647541
         import array
@@ -797,98 +669,9 @@
         q = p.match(upper_char)
         self.assertNotEqual(q, None)
 
-    def test_dollar_matches_twice(self):
-        "$ matches the end of string, and just before the terminating \n"
-        pattern = re.compile('$')
-        self.assertEqual(pattern.sub('#', 'a\nb\n'), 'a\nb#\n#')
-        self.assertEqual(pattern.sub('#', 'a\nb\nc'), 'a\nb\nc#')
-        self.assertEqual(pattern.sub('#', '\n'), '#\n#')
-
-        pattern = re.compile('$', re.MULTILINE)
-        self.assertEqual(pattern.sub('#', 'a\nb\n' ), 'a#\nb#\n#' )
-        self.assertEqual(pattern.sub('#', 'a\nb\nc'), 'a#\nb#\nc#')
-        self.assertEqual(pattern.sub('#', '\n'), '#\n#')
-
-    def test_dealloc(self):
-        # issue 3299: check for segfault in debug build
-        import _sre
-        # the overflow limit is different on wide and narrow builds and it
-        # depends on the definition of SRE_CODE (see sre.h).
-        # 2**128 should be big enough to overflow on both. For smaller values
-        # a RuntimeError is raised instead of OverflowError.
-        long_overflow = 2**128
-        self.assertRaises(TypeError, re.finditer, "a", {})
-        self.assertRaises(OverflowError, _sre.compile, "abc", 0, [long_overflow])
-
-    def test_compile(self):
-        # Test return value when given string and pattern as parameter
-        pattern = re.compile('random pattern')
-        self.assertIsInstance(pattern, re._pattern_type)
-        same_pattern = re.compile(pattern)
-        self.assertIsInstance(same_pattern, re._pattern_type)
-        self.assertIs(same_pattern, pattern)
-        # Test behaviour when not given a string or pattern as parameter
-        self.assertRaises(TypeError, re.compile, 0)
-
-    def test_bug_13899(self):
-        # Issue #13899: re pattern r"[\A]" should work like "A" but matches
-        # nothing. Ditto B and Z.
-        self.assertEqual(re.findall(r'[\A\B\b\C\Z]', 'AB\bCZ'),
-                         ['A', 'B', '\b', 'C', 'Z'])
-
-    @precisionbigmemtest(size=_2G, memuse=1)
-    def test_large_search(self, size):
-        # Issue #10182: indices were 32-bit-truncated.
-        s = 'a' * size
-        m = re.search('$', s)
-        self.assertIsNotNone(m)
-        self.assertEqual(m.start(), size)
-        self.assertEqual(m.end(), size)
-
-    # The huge memuse is because of re.sub() using a list and a join()
-    # to create the replacement result.
-    @precisionbigmemtest(size=_2G, memuse=16 + 2)
-    def test_large_subn(self, size):
-        # Issue #10182: indices were 32-bit-truncated.
-        s = 'a' * size
-        r, n = re.subn('', '', s)
-        self.assertEqual(r, s)
-        self.assertEqual(n, size + 1)
-
-
-    def test_repeat_minmax_overflow(self):
-        # Issue #13169
-        string = "x" * 100000
-        self.assertEqual(re.match(r".{65535}", string).span(), (0, 65535))
-        self.assertEqual(re.match(r".{,65535}", string).span(), (0, 65535))
-        self.assertEqual(re.match(r".{65535,}?", string).span(), (0, 65535))
-        self.assertEqual(re.match(r".{65536}", string).span(), (0, 65536))
-        self.assertEqual(re.match(r".{,65536}", string).span(), (0, 65536))
-        self.assertEqual(re.match(r".{65536,}?", string).span(), (0, 65536))
-        # 2**128 should be big enough to overflow both SRE_CODE and Py_ssize_t.
-        self.assertRaises(OverflowError, re.compile, r".{%d}" % 2**128)
-        self.assertRaises(OverflowError, re.compile, r".{,%d}" % 2**128)
-        self.assertRaises(OverflowError, re.compile, r".{%d,}?" % 2**128)
-        self.assertRaises(OverflowError, re.compile, r".{%d,%d}" % (2**129, 2**128))
-
-    @cpython_only
-    def test_repeat_minmax_overflow_maxrepeat(self):
-        try:
-            from _sre import MAXREPEAT
-        except ImportError:
-            self.skipTest('requires _sre.MAXREPEAT constant')
-        string = "x" * 100000
-        self.assertIsNone(re.match(r".{%d}" % (MAXREPEAT - 1), string))
-        self.assertEqual(re.match(r".{,%d}" % (MAXREPEAT - 1), string).span(),
-                         (0, 100000))
-        self.assertIsNone(re.match(r".{%d,}?" % (MAXREPEAT - 1), string))
-        self.assertRaises(OverflowError, re.compile, r".{%d}" % MAXREPEAT)
-        self.assertRaises(OverflowError, re.compile, r".{,%d}" % MAXREPEAT)
-        self.assertRaises(OverflowError, re.compile, r".{%d,}?" % MAXREPEAT)
-
 
 def run_re_tests():
-    from test.re_tests import tests, SUCCEED, FAIL, SYNTAX_ERROR
+    from test.re_tests import benchmarks, tests, SUCCEED, FAIL, SYNTAX_ERROR
     if verbose:
         print 'Running re_tests test suite'
     else:

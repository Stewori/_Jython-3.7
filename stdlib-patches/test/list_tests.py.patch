--- lib-python/2.7/test/list_tests.py	2015-04-18 05:34:44.859111651 +0300
+++ Lib/test/list_tests.py	2015-04-18 05:34:31.811089806 +0300
@@ -4,9 +4,14 @@
 
 import sys
 import os
+import unittest
 
 from test import test_support, seq_tests
 
+if test_support.is_jython:
+    from java.util import List as JList
+
+
 class CommonTest(seq_tests.CommonTest):
 
     def test_init(self):
@@ -40,17 +45,23 @@
         self.assertEqual(str(a2), "[0, 1, 2]")
         self.assertEqual(repr(a2), "[0, 1, 2]")
 
-        a2.append(a2)
-        a2.append(3)
-        self.assertEqual(str(a2), "[0, 1, 2, [...], 3]")
-        self.assertEqual(repr(a2), "[0, 1, 2, [...], 3]")
-
-        l0 = []
-        for i in xrange(sys.getrecursionlimit() + 100):
-            l0 = [l0]
-        self.assertRaises(RuntimeError, repr, l0)
+        if not (test_support.is_jython and issubclass(self.type2test, JList)):
+            # Jython does not support shallow copies of object graphs
+            # when moving back and forth from Java object space
+            a2.append(a2)
+            a2.append(3)
+            self.assertEqual(str(a2), "[0, 1, 2, [...], 3]")
+            self.assertEqual(repr(a2), "[0, 1, 2, [...], 3]")
+
+        if not test_support.is_jython:
+            l0 = []
+            for i in xrange(sys.getrecursionlimit() + 100):
+                l0 = [l0]
+            self.assertRaises(RuntimeError, repr, l0)
 
     def test_print(self):
+        if test_support.is_jython and issubclass(self.type2test, JList):
+            raise unittest.SkipTest("Jython does not support shallow copies of object graphs")
         d = self.type2test(xrange(200))
         d.append(d)
         d.extend(xrange(200,400))
@@ -182,10 +193,14 @@
         a[:] = tuple(range(10))
         self.assertEqual(a, self.type2test(range(10)))
 
-        self.assertRaises(TypeError, a.__setslice__, 0, 1, 5)
+        if not (test_support.is_jython and issubclass(self.type2test, JList)):
+            # no support for __setslice__ on Jython for
+            # java.util.List, given that method deprecated since 2.0!
+            self.assertRaises(TypeError, a.__setslice__, 0, 1, 5)
         self.assertRaises(TypeError, a.__setitem__, slice(0, 1, 5))
 
-        self.assertRaises(TypeError, a.__setslice__)
+        if not (test_support.is_jython and issubclass(self.type2test, JList)):
+            self.assertRaises(TypeError, a.__setslice__)
         self.assertRaises(TypeError, a.__setitem__)
 
     def test_delslice(self):
@@ -328,9 +343,12 @@
         d = self.type2test(['a', 'b', BadCmp2(), 'c'])
         e = self.type2test(d)
         self.assertRaises(BadExc, d.remove, 'c')
-        for x, y in zip(d, e):
-            # verify that original order and values are retained.
-            self.assertIs(x, y)
+        if not (test_support.is_jython and issubclass(self.type2test, JList)):
+            # When converting back and forth to Java space, Jython does not
+            # maintain object identity
+            for x, y in zip(d, e):
+                # verify that original order and values are retained.
+                self.assertIs(x, y)
 
     def test_count(self):
         a = self.type2test([0, 1, 2])*3
@@ -450,8 +468,13 @@
         def selfmodifyingComparison(x,y):
             z.append(1)
             return cmp(x, y)
+
+        # Need to ensure the comparisons are actually executed by
+        # setting up a list
+        z = self.type2test(range(12))
         self.assertRaises(ValueError, z.sort, selfmodifyingComparison)
 
+        z = self.type2test(range(12))
         self.assertRaises(TypeError, z.sort, lambda x, y: 's')
 
         self.assertRaises(TypeError, z.sort, 42, 42, 42, 42)
@@ -472,7 +495,11 @@
         u += "eggs"
         self.assertEqual(u, self.type2test("spameggs"))
 
-        self.assertRaises(TypeError, u.__iadd__, None)
+        if not test_support.is_jython:
+            self.assertRaises(TypeError, u.__iadd__, None)
+        else:
+            import operator
+            self.assertRaises(TypeError, operator.__iadd__, u, None)
 
     def test_imul(self):
         u = self.type2test([0, 1])
@@ -522,11 +549,13 @@
         a = self.type2test(range(10))
         a[::2] = tuple(range(5))
         self.assertEqual(a, self.type2test([0, 1, 1, 3, 2, 5, 3, 7, 4, 9]))
+
         # test issue7788
         a = self.type2test(range(10))
         del a[9::1<<333]
 
-    def test_constructor_exception_handling(self):
+    # XXX: CPython specific, PyList doesn't len() during init
+    def _test_constructor_exception_handling(self):
         # Bug #1242657
         class F(object):
             def __iter__(self):

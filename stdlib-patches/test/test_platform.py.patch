--- lib-python/2.7/test/test_platform.py	2015-04-18 05:34:44.623111256 +0300
+++ Lib/test/test_platform.py	2015-04-18 05:34:31.851089873 +0300
@@ -5,12 +5,14 @@
 import subprocess
 
 from test import test_support
+from test.test_support import is_jython
 
 class PlatformTest(unittest.TestCase):
     def test_architecture(self):
         res = platform.architecture()
 
     if hasattr(os, "symlink"):
+        @unittest.skipIf(is_jython, "Cannot just symlink Jython startup script")
         def test_architecture_via_symlink(self): # issue3762
             def get(python):
                 cmd = [python, '-c',
@@ -49,15 +51,21 @@
         res = platform.processor()
 
     def setUp(self):
-        self.save_version = sys.version
-        self.save_subversion = sys.subversion
-        self.save_platform = sys.platform
+        # These are readonly in Jython
+        if not test_support.is_jython:
+            self.save_version = sys.version
+            self.save_subversion = sys.subversion
+            self.save_platform = sys.platform
 
     def tearDown(self):
-        sys.version = self.save_version
-        sys.subversion = self.save_subversion
-        sys.platform = self.save_platform
+        # These are readonly in Jython
+        if not test_support.is_jython:
+            sys.version = self.save_version
+            sys.subversion = self.save_subversion
+            sys.platform = self.save_platform
 
+    @unittest.skipIf(test_support.is_jython,
+                     "sys.version and sys.subversion are readonly in Jython.")
     def test_sys_version(self):
         # Old test.
         for input, output in (
@@ -156,6 +164,7 @@
     def test_win32_ver(self):
         res = platform.win32_ver()
 
+    @unittest.skipIf(is_jython, "No uname support in Jython")
     def test_mac_ver(self):
         res = platform.mac_ver()
 
@@ -218,6 +227,8 @@
         res = platform.dist()
 
     def test_libc_ver(self):
+        if sys.executable is None:
+            return
         import os
         if os.path.isdir(sys.executable) and \
            os.path.exists(sys.executable+'.exe'):

--- lib-python/2.7/test/test_array.py	2015-04-18 05:34:44.875111678 +0300
+++ Lib/test/test_array.py	2015-04-18 05:34:31.815089812 +0300
@@ -4,12 +4,15 @@
 """
 
 import unittest
-import warnings
 from test import test_support
 from weakref import proxy
 import array, cStringIO
 from cPickle import loads, dumps, HIGHEST_PROTOCOL
 
+if test_support.is_jython:
+    import operator
+    from test_weakref import extra_collect
+
 class ArraySubclass(array.array):
     pass
 
@@ -71,6 +74,10 @@
         self.assertEqual(bi[1], len(a))
 
     def test_byteswap(self):
+        if test_support.is_jython and self.typecode == 'u':
+            # Jython unicodes are already decoded from utf16,
+            # so this doesn't make sense
+            return
         a = array.array(self.typecode, self.example)
         self.assertRaises(TypeError, a.byteswap, 42)
         if a.itemsize in (1, 2, 4, 8):
@@ -237,8 +244,60 @@
         self.assertRaises(TypeError, b.fromstring, 42)
         b.fromstring(a.tostring())
         self.assertEqual(a, b)
-        if a.itemsize>1:
+        if a.itemsize>1 and self.typecode not in ('b', 'B'):
             self.assertRaises(ValueError, b.fromstring, "x")
+        # Test from byte string available via buffer API (Jython addition)
+        if test_support.is_jython:
+            for buftype in (buffer, memoryview, bytearray):
+                b = array.array(self.typecode)
+                b.fromstring(buftype(a.tostring()))
+                self.assertEqual(a, b)
+
+    @unittest.skipUnless(test_support.is_jython, "Jython supports memoryview slices")
+    def test_tofromstring_sliced(self):
+        a = array.array(self.typecode, self.example)
+        r = bytearray(a.tostring())
+        R = len(r)
+        D = 3*R
+
+        def checkSlice(x, y, z=None):
+            # Scatter the bytes of a.tostring() into d
+            d = bytearray(D)
+            d[x:y:z] = r
+            # Now gather through a memoryview slice
+            with memoryview(d) as m:
+                # Requires proper use of strides when z not None and not 1
+                b = array.array(self.typecode)
+                b.fromstring(m[x:y:z])
+                self.assertEqual(a, b)
+
+        # The slices all have R elements and the whole range D = 3*R
+        checkSlice(None, R)
+        checkSlice(2, 2+R)
+        checkSlice(D-R, None)
+        checkSlice(None, None, 3)
+        checkSlice(None, None, -3)
+        checkSlice(None, D-R-1, -1)
+        checkSlice(R-1, None, -1)
+
+    def test_filewrite(self):
+        a = array.array(self.typecode, 2*self.example)
+        f = open(test_support.TESTFN, 'wb')
+        try:
+            f.write(a)
+            f.close()
+            b = array.array(self.typecode)
+            f = open(test_support.TESTFN, 'rb')
+            b.fromfile(f, len(self.example))
+            self.assertEqual(b, array.array(self.typecode, self.example))
+            self.assertNotEqual(a, b)
+            b.fromfile(f, len(self.example))
+            self.assertEqual(a, b)
+            f.close()
+        finally:
+            if not f.closed:
+                f.close()
+            test_support.unlink(test_support.TESTFN)
 
     def test_repr(self):
         a = array.array(self.typecode, 2*self.example)
@@ -296,9 +355,12 @@
         )
 
         b = array.array(self.badtypecode())
-        self.assertRaises(TypeError, a.__add__, b)
-
-        self.assertRaises(TypeError, a.__add__, "bad")
+        if test_support.is_jython:
+            self.assertRaises(TypeError, operator.add, a, b)
+            self.assertRaises(TypeError, operator.add, a, "bad")
+        else:
+            self.assertRaises(TypeError, a.__add__, b)
+            self.assertRaises(TypeError, a.__add__, "bad")
 
     def test_iadd(self):
         a = array.array(self.typecode, self.example[::-1])
@@ -317,9 +379,12 @@
         )
 
         b = array.array(self.badtypecode())
-        self.assertRaises(TypeError, a.__add__, b)
-
-        self.assertRaises(TypeError, a.__iadd__, "bad")
+        if test_support.is_jython:
+            self.assertRaises(TypeError, operator.add, a, b)
+            self.assertRaises(TypeError, operator.iadd, a, "bad")
+        else:
+            self.assertRaises(TypeError, a.__add__, b)
+            self.assertRaises(TypeError, a.__iadd__, "bad")
 
     def test_mul(self):
         a = 5*array.array(self.typecode, self.example)
@@ -346,7 +411,10 @@
             array.array(self.typecode)
         )
 
-        self.assertRaises(TypeError, a.__mul__, "bad")
+        if test_support.is_jython:
+            self.assertRaises(TypeError, operator.mul, a, "bad")
+        else:
+            self.assertRaises(TypeError, a.__mul__, "bad")
 
     def test_imul(self):
         a = array.array(self.typecode, self.example)
@@ -375,7 +443,10 @@
         a *= -1
         self.assertEqual(a, array.array(self.typecode))
 
-        self.assertRaises(TypeError, a.__imul__, "bad")
+        if test_support.is_jython:
+            self.assertRaises(TypeError, operator.imul, a, "bad")
+        else:
+            self.assertRaises(TypeError, a.__imul__, "bad")
 
     def test_getitem(self):
         a = array.array(self.typecode, self.example)
@@ -770,6 +841,8 @@
         p = proxy(s)
         self.assertEqual(p.tostring(), s.tostring())
         s = None
+        if test_support.is_jython:
+            extra_collect()
         self.assertRaises(ReferenceError, len, p)
 
     def test_bug_782369(self):
@@ -784,9 +857,67 @@
 
     def test_subclass_with_kwargs(self):
         # SF bug #1486663 -- this used to erroneously raise a TypeError
-        with warnings.catch_warnings():
-            warnings.filterwarnings("ignore", '', DeprecationWarning)
-            ArraySubclassWithKwargs('b', newarg=1)
+        ArraySubclassWithKwargs('b', newarg=1)
+
+    @unittest.skipUnless(test_support.is_jython, "array supports buffer interface in Jython")
+    def test_resize_forbidden(self):
+        # Test that array resizing is forbidden with buffer exports (Jython addition).
+        # Test adapted from corresponding one in test_bytes.
+        # We can't resize an array when there are buffer exports, even
+        # if it wouldn't reallocate the underlying array.
+        # Furthermore, no destructive changes to the buffer may be applied
+        # before raising the error.
+        a = array.array(self.typecode, self.example)
+        def resize(n):
+            "n = -1 -> Smaller, 0 -> the same, or 1 -> larger."
+            a[1:-1] = array.array(self.typecode, self.example[1-n:-1])
+
+        v = memoryview(a)
+        orig = a[:]
+
+        self.assertRaises(BufferError, resize, -1)
+        self.assertEqual(a, orig)
+        #self.assertRaises(BufferError, resize, 0)
+        #self.assertEqual(a, orig)
+        self.assertRaises(BufferError, resize, 1)
+        self.assertEqual(a, orig)
+
+        # Other operations implying resize
+        self.assertRaises(BufferError, a.pop, 0)
+        self.assertEqual(a, orig)
+        self.assertRaises(BufferError, a.remove, a[1])
+        self.assertEqual(a, orig)
+        self.assertRaises(BufferError, a.append, self.outside)
+        self.assertEqual(a, orig)
+        self.assertRaises(BufferError, a.insert, 1, self.outside)
+        self.assertEqual(a, orig)
+        self.assertRaises(BufferError, a.extend, self.example)
+        self.assertEqual(a, orig)
+
+        def iadd(x):
+            x += array.array(self.typecode, self.biggerexample)
+        self.assertRaises(BufferError, iadd, a)
+        self.assertEqual(a, orig)
+
+        def imul(x):
+            x *= 3
+        self.assertRaises(BufferError, imul, a)
+        self.assertEqual(a, orig)
+
+        def delitem():
+            del a[1]
+        self.assertRaises(BufferError, delitem)
+        self.assertEqual(a, orig)
+
+        # deleting a non-contiguous slice
+        def delslice():
+            del a[1:-1:2]
+        self.assertRaises(BufferError, delslice)
+        self.assertEqual(a, orig)
+
+        # Show that releasing v releases the array for size change
+        v.release()
+        a.pop()
 
 
 class StringTest(BaseTest):
@@ -900,6 +1031,7 @@
         # test issue7788
         a = array.array(self.typecode, range(10))
         del a[9::1<<333]
+        self.assertEqual(a, array.array(self.typecode, range(9)))
 
     def test_assignment(self):
         a = array.array(self.typecode, range(10))
@@ -982,22 +1114,16 @@
     def test_overflow(self):
         a = array.array(self.typecode)
         lower = 0
-        upper = long(pow(2, a.itemsize * 8)) - 1L
+        itemsize = a.itemsize
+        if test_support.is_jython:
+            #  unsigned itemsizes are larger than would be expected
+            # in CPython because Jython promotes to the next size
+            # (Java has no unsiged integers except for char)
+            upper = long(pow(2, a.itemsize * 8 - 1)) - 1L
+        else:
+            upper = long(pow(2, a.itemsize * 8)) - 1L
         self.check_overflow(lower, upper)
 
-    @test_support.cpython_only
-    def test_sizeof_with_buffer(self):
-        a = array.array(self.typecode, self.example)
-        basesize = test_support.calcvobjsize('4P')
-        buffer_size = a.buffer_info()[1] * a.itemsize
-        test_support.check_sizeof(self, a, basesize + buffer_size)
-
-    @test_support.cpython_only
-    def test_sizeof_without_buffer(self):
-        a = array.array(self.typecode)
-        basesize = test_support.calcvobjsize('4P')
-        test_support.check_sizeof(self, a, basesize)
-
 
 class ByteTest(SignedNumberTest):
     typecode = 'b'
@@ -1095,6 +1221,10 @@
 def test_main(verbose=None):
     import sys
 
+    if test_support.is_jython:
+        # CPython specific; returns a memory address
+        del BaseTest.test_buffer_info
+
     test_support.run_unittest(*tests)
 
     # verify reference counting

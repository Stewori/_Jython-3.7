--- lib-python/2.7/test/test_threading.py	2015-04-18 05:34:44.675111343 +0300
+++ Lib/test/test_threading.py	2015-04-18 05:34:31.871089907 +0300
@@ -1,9 +1,7 @@
 # Very rudimentary test of threading module
 
 import test.test_support
-from test.test_support import verbose
-from test.script_helper import assert_python_ok
-
+from test.test_support import verbose, is_jython
 import random
 import re
 import sys
@@ -88,8 +86,8 @@
         for i in range(NUMTASKS):
             t = TestThread("<thread %d>"%i, self, sema, mutex, numrunning)
             threads.append(t)
-            self.assertEqual(t.ident, None)
-            self.assertTrue(re.match('<TestThread\(.*, initial\)>', repr(t)))
+            self.assertIsNotNone(t.ident)  # NOTE Java immediately assigns idents, unlike CPython
+            self.assertTrue(re.match('<TestThread\(.*, initial \d+\)>', repr(t)))
             t.start()
 
         if verbose:
@@ -144,6 +142,7 @@
         self.test_various_ops()
         threading.stack_size(0)
 
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def test_foreign_thread(self):
         # Check that a "foreign" thread can use the threading module.
         def f(mutex):
@@ -163,6 +162,7 @@
 
     # PyThreadState_SetAsyncExc() is a CPython-only gimmick, not (currently)
     # exposed at the Python level.  This test relies on ctypes to get at it.
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def test_PyThreadState_SetAsyncExc(self):
         try:
             import ctypes
@@ -253,6 +253,7 @@
             t.join()
         # else the thread is still running, and we have no way to kill it
 
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def test_limbo_cleanup(self):
         # Issue 7481: Failure to start thread should cleanup the limbo map.
         def fail_new_thread(*args):
@@ -268,6 +269,7 @@
         finally:
             threading._start_new_thread = _start_new_thread
 
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def test_finalize_runnning_thread(self):
         # Issue 1402: the PyGILState_Ensure / _Release functions may be called
         # very late on python exit: on deallocation of a running thread for
@@ -361,11 +363,12 @@
         self.addCleanup(p.stdout.close)
         self.addCleanup(p.stderr.close)
         stdout, stderr = p.communicate()
-        self.assertEqual(stdout.strip(),
-            "Woke up, sleep function is: <built-in function sleep>")
+        self.assertTrue(stdout.strip().startswith(
+            "Woke up, sleep function is: <java function sleep"))
         stderr = re.sub(r"^\[\d+ refs\]", "", stderr, re.MULTILINE).strip()
         self.assertEqual(stderr, "")
 
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def test_enumerate_after_join(self):
         # Try hard to trigger #1703448: a thread is still returned in
         # threading.enumerate() after it has been join()ed.
@@ -385,6 +388,7 @@
         finally:
             sys.setcheckinterval(old_interval)
 
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def test_no_refcycle_through_target(self):
         class RunSelfFunction(object):
             def __init__(self, should_raise):
@@ -416,33 +420,6 @@
                          msg=('%d references still around' %
                               sys.getrefcount(weak_raising_cyclic_object())))
 
-    @unittest.skipUnless(hasattr(os, 'fork'), 'test needs fork()')
-    def test_dummy_thread_after_fork(self):
-        # Issue #14308: a dummy thread in the active list doesn't mess up
-        # the after-fork mechanism.
-        code = """if 1:
-            import thread, threading, os, time
-
-            def background_thread(evt):
-                # Creates and registers the _DummyThread instance
-                threading.current_thread()
-                evt.set()
-                time.sleep(10)
-
-            evt = threading.Event()
-            thread.start_new_thread(background_thread, (evt,))
-            evt.wait()
-            assert threading.active_count() == 2, threading.active_count()
-            if os.fork() == 0:
-                assert threading.active_count() == 1, threading.active_count()
-                os._exit(0)
-            else:
-                os.wait()
-        """
-        _, out, err = assert_python_ok("-c", code)
-        self.assertEqual(out, '')
-        self.assertEqual(err, '')
-
 
 class ThreadJoinOnShutdown(BaseTestCase):
 
@@ -453,6 +430,7 @@
     platforms_to_skip = ('freebsd4', 'freebsd5', 'freebsd6', 'netbsd5',
                          'os2emx')
 
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def _run_and_join(self, script):
         script = """if 1:
             import sys, os, time, threading
@@ -471,6 +449,7 @@
         self.assertFalse(rc == 2, "interpreter was blocked")
         self.assertTrue(rc == 0, "Unexpected error")
 
+    @unittest.skipIf(is_jython, "Does not apply to Jython")
     def test_1_join_on_shutdown(self):
         # The usual case: on exit, wait for a non-daemon thread
         script = """if 1:

--- lib-python/2.7/test/test_weakset.py	2015-04-18 05:34:44.735111444 +0300
+++ Lib/test/test_weakset.py	2015-04-18 05:34:31.879089920 +0300
@@ -1,5 +1,18 @@
+# Jython specific notes:
+#
+# 1. Deletion (del) or reliance on going out of scope must be followed
+#    by a gc.collect(); use extra_collect() if a callback will be
+#    tested as well.
+#
+# 2. Avoid eventual consistency issues in the length computation by
+#    computing the len of the list of the WeakSet
+#
+# 3. Jython can weakly refer to any object, unlike CPython, so don't
+#    test for nonexistent TypeErrors
+
 import unittest
 from test import test_support
+from test.test_weakref import extra_collect
 from weakref import proxy, ref, WeakSet
 import operator
 import copy
@@ -30,6 +43,9 @@
     def __hash__(self):
         return hash((SomeClass, self.value))
 
+    def __repr__(self):
+        return "SC(%s,%s)" % (self.value, id(self.value))
+
 class RefCycle(object):
     def __init__(self):
         self.cycle = self
@@ -67,7 +83,12 @@
         self.assertEqual(len(self.s), len(self.d))
         self.assertEqual(len(self.fs), 1)
         del self.obj
-        self.assertEqual(len(self.fs), 0)
+        gc.collect()
+        # len of weak collections is eventually consistent on
+        # Jython. In practice this does not matter because of the
+        # nature of weaksets - we cannot rely on what happens in the
+        # reaper thread and how it interacts with gc
+        self.assertIn(len(self.fs), (0, 1))
 
     def test_contains(self):
         for c in self.letters:
@@ -76,6 +97,7 @@
         self.assertNotIn(1, self.s)
         self.assertIn(self.obj, self.fs)
         del self.obj
+        gc.collect()
         self.assertNotIn(SomeClass('F'), self.fs)
 
     def test_union(self):
@@ -90,10 +112,11 @@
             c = C(self.items2)
             self.assertEqual(self.s.union(c), x)
             del c
-        self.assertEqual(len(u), len(self.items) + len(self.items2))
+            gc.collect()
+        self.assertEqual(len(list(u)), len(list(self.items)) + len(list(self.items2)))
         self.items2.pop()
         gc.collect()
-        self.assertEqual(len(u), len(self.items) + len(self.items2))
+        self.assertEqual(len(list(u)), len(list(self.items)) + len(list(self.items2)))
 
     def test_or(self):
         i = self.s.union(self.items2)
@@ -113,7 +136,7 @@
         self.assertEqual(len(i), len(self.items2))
         self.items2.pop()
         gc.collect()
-        self.assertEqual(len(i), len(self.items2))
+        self.assertEqual(len(list(i)), len(list(self.items2)))
 
     def test_isdisjoint(self):
         self.assertTrue(self.s.isdisjoint(WeakSet(self.items2)))
@@ -147,7 +170,7 @@
         self.assertEqual(len(i), len(self.items) + len(self.items2))
         self.items2.pop()
         gc.collect()
-        self.assertEqual(len(i), len(self.items) + len(self.items2))
+        self.assertEqual(len(list(i)), len(list(self.items)) + len(list(self.items2)))
 
     def test_xor(self):
         i = self.s.symmetric_difference(self.items2)
@@ -232,25 +255,29 @@
         dup = self.s.copy()
         self.s.add(x)
         self.assertEqual(self.s, dup)
-        self.assertRaises(TypeError, self.s.add, [])
+        if not test_support.is_jython:  # Jython/JVM can weakly reference list and other objects
+            self.assertRaises(TypeError, self.s.add, [])
         self.fs.add(Foo())
-        self.assertTrue(len(self.fs) == 1)
+        gc.collect()  # CPython assumes Foo() went out of scope and was collected, so ensure the same
+        self.assertEqual(len(list(self.fs)), 1)
         self.fs.add(self.obj)
-        self.assertTrue(len(self.fs) == 1)
+        self.assertEqual(len(list(self.fs)), 1)
 
     def test_remove(self):
         x = SomeClass('a')
         self.s.remove(x)
         self.assertNotIn(x, self.s)
         self.assertRaises(KeyError, self.s.remove, x)
-        self.assertRaises(TypeError, self.s.remove, [])
+        if not test_support.is_jython:  # Jython/JVM can weakly reference list and other objects
+            self.assertRaises(TypeError, self.s.remove, [])
 
     def test_discard(self):
         a, q = SomeClass('a'), SomeClass('Q')
         self.s.discard(a)
         self.assertNotIn(a, self.s)
         self.s.discard(q)
-        self.assertRaises(TypeError, self.s.discard, [])
+        if not test_support.is_jython:  # Jython/JVM can weakly reference list and other objects
+            self.assertRaises(TypeError, self.s.discard, [])
 
     def test_pop(self):
         for i in range(len(self.s)):
@@ -301,8 +328,9 @@
                 self.assertIn(c, self.s)
             else:
                 self.assertNotIn(c, self.s)
-        self.assertRaises(TypeError, self.s.difference_update, [[]])
-        self.assertRaises(TypeError, self.s.symmetric_difference_update, [[]])
+        if not test_support.is_jython:  # Jython/JVM can weakly reference list and other objects
+            self.assertRaises(TypeError, self.s.difference_update, [[]])
+            self.assertRaises(TypeError, self.s.symmetric_difference_update, [[]])
 
     def test_isub(self):
         self.s -= set(self.items2)
@@ -343,13 +371,16 @@
         self.assertEqual(t, WeakSet())
 
     def test_eq(self):
-        # issue 5964
-        self.assertTrue(self.s == self.s)
-        self.assertTrue(self.s == WeakSet(self.items))
-        self.assertFalse(self.s == set(self.items))
-        self.assertFalse(self.s == list(self.items))
-        self.assertFalse(self.s == tuple(self.items))
-        self.assertFalse(self.s == 1)
+        # issue 5964 (http://bugs.python.org/issue5964)
+        self.assertEqual(self.s, self.s)
+        self.assertEqual(self.s, WeakSet(self.items))
+        # Jython diverges here in the next test because it constructs
+        # WeakSet as a subclass of set; this seems to be the proper
+        # thing to do given what is the typical comparison
+        self.assertEqual(self.s, set(self.items))
+        self.assertNotEqual(self.s, list(self.items))
+        self.assertNotEqual(self.s, tuple(self.items))
+        self.assertNotEqual(self.s, 1)
 
     def test_weak_destroy_while_iterating(self):
         # Issue #7105: iterators shouldn't crash when a key is implicitly removed
@@ -364,6 +395,7 @@
         # We have removed either the first consumed items, or another one
         self.assertIn(len(list(it)), [len(items), len(items) - 1])
         del it
+        extra_collect()
         # The removal has been committed
         self.assertEqual(len(s), len(items))
 
@@ -404,6 +436,7 @@
         items = [RefCycle() for i in range(N)]
         s = WeakSet(items)
         del items
+        gc.collect()
         it = iter(s)
         try:
             next(it)
@@ -418,6 +451,7 @@
         self.assertIn(n1, (0, 1))
         self.assertEqual(n2, 0)
 
+    @unittest.skipIf(test_support.is_jython, "GarbageCollection not deterministic in Jython")
     def test_len_race(self):
         # Extended sanity checks for len() in the face of cyclic collection
         self.addCleanup(gc.set_threshold, *gc.get_threshold())

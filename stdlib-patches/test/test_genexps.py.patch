--- lib-python/2.7/test/test_genexps.py	2015-04-18 05:34:44.563111156 +0300
+++ Lib/test/test_genexps.py	2015-04-18 05:34:31.835089846 +0300
@@ -1,3 +1,9 @@
+# From http://svn.python.org/projects/python/branches/release25-maint/Lib/test_genexps.py@51333
+
+# Ignoring details of SyntaxError for now -- justified I think for "invalid
+# syntax" since that #message has very little info, where Antlr provides more
+# detail.
+
 doctests = """
 
 Test simple loop with conditional
@@ -76,7 +82,7 @@
 
 Verify that parenthesis are required in a statement
 
-    >>> def f(n):
+    >>> def f(n): #doctest: +IGNORE_EXCEPTION_DETAIL
     ...     return i*i for i in xrange(n)
     Traceback (most recent call last):
        ...
@@ -84,7 +90,7 @@
 
 Verify that parenthesis are required when used as a keyword argument value
 
-    >>> dict(a = i for i in xrange(10))
+    >>> dict(a = i for i in xrange(10)) #doctest: +IGNORE_EXCEPTION_DETAIL
     Traceback (most recent call last):
        ...
     SyntaxError: invalid syntax
@@ -92,7 +98,7 @@
 Verify that parenthesis are required when used as a keyword argument value
 
     >>> dict(a = (i for i in xrange(10))) #doctest: +ELLIPSIS
-    {'a': <generator object <genexpr> at ...>}
+    {'a': <generator object at ...>}
 
 Verify early binding for the outermost for-expression
 
@@ -126,25 +132,24 @@
     >>> list(g)
     [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]
 
+This doesn't make sense for Jython or other non refcounted implementations, so +SKIP
 Verify re-use of tuples (a side benefit of using genexps over listcomps)
 
     >>> tupleids = map(id, ((i,i) for i in xrange(10)))
-    >>> int(max(tupleids) - min(tupleids))
+    >>> int(max(tupleids) - min(tupleids)) #doctest: +SKIP
     0
 
 Verify that syntax error's are raised for genexps used as lvalues
 
-    >>> (y for y in (1,2)) = 10
+    >>> (y for y in (1,2)) = 10 #doctest: +IGNORE_EXCEPTION_DETAIL
     Traceback (most recent call last):
        ...
-      File "<doctest test.test_genexps.__test__.doctests[40]>", line 1
-    SyntaxError: can't assign to generator expression
+    SyntaxError: can't assign to generator expression (<doctest test.test_genexps.__test__.doctests[40]>, line 1)
 
-    >>> (y for y in (1,2)) += 10
+    >>> (y for y in (1,2)) += 10 #doctest: +IGNORE_EXCEPTION_DETAIL
     Traceback (most recent call last):
        ...
-      File "<doctest test.test_genexps.__test__.doctests[41]>", line 1
-    SyntaxError: can't assign to generator expression
+    SyntaxError: augmented assignment to generator expression not possible (<doctest test.test_genexps.__test__.doctests[41]>, line 1)
 
 
 ########### Tests borrowed from or inspired by test_generators.py ############
@@ -223,8 +228,7 @@
     >>> set(attr for attr in dir(g) if not attr.startswith('__')) >= expected
     True
 
-    >>> from test.test_support import HAVE_DOCSTRINGS
-    >>> print(g.next.__doc__ if HAVE_DOCSTRINGS else 'x.next() -> the next value, or raise StopIteration')
+    >>> print g.next.__doc__
     x.next() -> the next value, or raise StopIteration
     >>> import types
     >>> isinstance(g, types.GeneratorType)

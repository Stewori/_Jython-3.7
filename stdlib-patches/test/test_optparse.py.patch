--- lib-python/2.7/test/test_optparse.py	2015-04-18 05:34:44.615111242 +0300
+++ Lib/test/test_optparse.py	2015-04-18 05:34:31.851089873 +0300
@@ -1,9 +1,11 @@
+#!/usr/bin/python
+
 #
 # Test suite for Optik.  Supplied by Johannes Gijsbers
 # (taradino@softhome.net) -- translated from the original Optik
 # test suite to this PyUnit-based version.
 #
-# $Id$
+# $Id: test_optparse.py 83540 2010-08-02 18:40:55Z ezio.melotti $
 #
 
 import sys
@@ -17,9 +19,9 @@
 from test import test_support
 
 
-from optparse import make_option, Option, \
-     TitledHelpFormatter, OptionParser, OptionGroup, \
-     SUPPRESS_USAGE, OptionError, OptionConflictError, \
+from optparse import make_option, Option, IndentedHelpFormatter, \
+     TitledHelpFormatter, OptionParser, OptionContainer, OptionGroup, \
+     SUPPRESS_HELP, SUPPRESS_USAGE, OptionError, OptionConflictError, \
      BadOptionError, OptionValueError, Values
 from optparse import _match_abbrev
 from optparse import _parse_num
@@ -108,7 +110,7 @@
         except expected_exception, err:
             actual_message = str(err)
             if isinstance(expected_message, retype):
-                self.assertTrue(expected_message.search(actual_message),
+                self.assert_(expected_message.search(actual_message),
                              """\
 expected exception message pattern:
 /%s/
@@ -167,7 +169,7 @@
                 sys.stdout = save_stdout
 
         except InterceptedError, err:
-            self.assertTrue(
+            self.assert_(
                 type(output) is types.StringType,
                 "expected output to be an ordinary string, not %r"
                 % type(output))
@@ -340,7 +342,7 @@
 
     def test_get_option(self):
         opt1 = self.parser.get_option("-v")
-        self.assertIsInstance(opt1, Option)
+        self.assert_(isinstance(opt1, Option))
         self.assertEqual(opt1._short_opts, ["-v", "-n"])
         self.assertEqual(opt1._long_opts, ["--verbose", "--noisy"])
         self.assertEqual(opt1.action, "store_true")
@@ -351,33 +353,33 @@
         opt2 = self.parser.get_option("--verbose")
         opt3 = self.parser.get_option("-n")
         opt4 = self.parser.get_option("--noisy")
-        self.assertTrue(opt1 is opt2 is opt3 is opt4)
+        self.assert_(opt1 is opt2 is opt3 is opt4)
 
     def test_has_option(self):
-        self.assertTrue(self.parser.has_option("-v"))
-        self.assertTrue(self.parser.has_option("--verbose"))
+        self.assert_(self.parser.has_option("-v"))
+        self.assert_(self.parser.has_option("--verbose"))
 
-    def assertTrueremoved(self):
-        self.assertTrue(self.parser.get_option("-v") is None)
-        self.assertTrue(self.parser.get_option("--verbose") is None)
-        self.assertTrue(self.parser.get_option("-n") is None)
-        self.assertTrue(self.parser.get_option("--noisy") is None)
-
-        self.assertFalse(self.parser.has_option("-v"))
-        self.assertFalse(self.parser.has_option("--verbose"))
-        self.assertFalse(self.parser.has_option("-n"))
-        self.assertFalse(self.parser.has_option("--noisy"))
+    def assert_removed(self):
+        self.assert_(self.parser.get_option("-v") is None)
+        self.assert_(self.parser.get_option("--verbose") is None)
+        self.assert_(self.parser.get_option("-n") is None)
+        self.assert_(self.parser.get_option("--noisy") is None)
+
+        self.failIf(self.parser.has_option("-v"))
+        self.failIf(self.parser.has_option("--verbose"))
+        self.failIf(self.parser.has_option("-n"))
+        self.failIf(self.parser.has_option("--noisy"))
 
-        self.assertTrue(self.parser.has_option("-q"))
-        self.assertTrue(self.parser.has_option("--silent"))
+        self.assert_(self.parser.has_option("-q"))
+        self.assert_(self.parser.has_option("--silent"))
 
     def test_remove_short_opt(self):
         self.parser.remove_option("-n")
-        self.assertTrueremoved()
+        self.assert_removed()
 
     def test_remove_long_opt(self):
         self.parser.remove_option("--verbose")
-        self.assertTrueremoved()
+        self.assert_removed()
 
     def test_remove_nonexistent(self):
         self.assertRaises(self.parser.remove_option, ('foo',), None,
@@ -427,19 +429,19 @@
 
     def test_str_aliases_string(self):
         self.parser.add_option("-s", type="str")
-        self.assertEqual(self.parser.get_option("-s").type, "string")
+        self.assertEquals(self.parser.get_option("-s").type, "string")
 
     def test_new_type_object(self):
         self.parser.add_option("-s", type=str)
-        self.assertEqual(self.parser.get_option("-s").type, "string")
+        self.assertEquals(self.parser.get_option("-s").type, "string")
         self.parser.add_option("-x", type=int)
-        self.assertEqual(self.parser.get_option("-x").type, "int")
+        self.assertEquals(self.parser.get_option("-x").type, "int")
 
     def test_old_type_object(self):
         self.parser.add_option("-s", type=types.StringType)
-        self.assertEqual(self.parser.get_option("-s").type, "string")
+        self.assertEquals(self.parser.get_option("-s").type, "string")
         self.parser.add_option("-x", type=types.IntType)
-        self.assertEqual(self.parser.get_option("-x").type, "int")
+        self.assertEquals(self.parser.get_option("-x").type, "int")
 
 
 # Custom type for testing processing of default values.
@@ -769,13 +771,6 @@
         self.assertParseFail(["-test"],
                              "no such option: -e")
 
-    def test_add_option_accepts_unicode(self):
-        self.parser.add_option(u"-u", u"--unicode", action="store_true")
-        self.assertParseOK(["-u"],
-                           {'a': None, 'boo': None, 'foo': None, 'unicode': True},
-                           [])
-
-
 class TestBool(BaseTest):
     def setUp(self):
         options = [make_option("-v",
@@ -1010,7 +1005,7 @@
                                              description="Some more options")
         group.set_title("Bacon")
         group.add_option("--bacon", type="int")
-        self.assertTrue(self.parser.get_option_group("--bacon"), group)
+        self.assert_(self.parser.get_option_group("--bacon"), group)
 
 # -- Test extending and parser.parse_args() ----------------------------
 
@@ -1106,15 +1101,15 @@
         if opt == "-x":
             self.assertEqual(option._short_opts, ["-x"])
             self.assertEqual(option._long_opts, [])
-            self.assertTrue(parser_ is self.parser)
-            self.assertTrue(value is None)
+            self.assert_(parser_ is self.parser)
+            self.assert_(value is None)
             self.assertEqual(vars(parser_.values), {'filename': None})
 
             parser_.values.x = 42
         elif opt == "--file":
             self.assertEqual(option._short_opts, ["-f"])
             self.assertEqual(option._long_opts, ["--file"])
-            self.assertTrue(parser_ is self.parser)
+            self.assert_(parser_ is self.parser)
             self.assertEqual(value, "foo")
             self.assertEqual(vars(parser_.values), {'filename': None, 'x': 42})
 
@@ -1152,7 +1147,7 @@
 
     def process_tuple(self, option, opt, value, parser_, len, type):
         self.assertEqual(len, 3)
-        self.assertTrue(type is int)
+        self.assert_(type is int)
 
         if opt == "-p":
             self.assertEqual(value, "1,2,3")
@@ -1243,7 +1238,8 @@
                                                option_list=options)
 
     def variable_args(self, option, opt, value, parser):
-        self.assertTrue(value is None)
+        self.assert_(value is None)
+        done = 0
         value = []
         rargs = parser.rargs
         while rargs:
@@ -1298,7 +1294,7 @@
 
 class TestConflict(ConflictBase):
     """Use the default conflict resolution for Optik 1.2: error."""
-    def assertTrueconflict_error(self, func):
+    def assert_conflict_error(self, func):
         err = self.assertRaises(
             func, ("-v", "--version"), {'action' : "callback",
                                         'callback' : self.show_version,
@@ -1310,11 +1306,11 @@
         self.assertEqual(err.option_id, "-v/--version")
 
     def test_conflict_error(self):
-        self.assertTrueconflict_error(self.parser.add_option)
+        self.assert_conflict_error(self.parser.add_option)
 
     def test_conflict_error_group(self):
         group = OptionGroup(self.parser, "Group 1")
-        self.assertTrueconflict_error(group.add_option)
+        self.assert_conflict_error(group.add_option)
 
     def test_no_such_conflict_handler(self):
         self.assertRaises(
@@ -1334,8 +1330,8 @@
         verbose_opt = self.parser.get_option("--verbose")
         version_opt = self.parser.get_option("--version")
 
-        self.assertTrue(v_opt is version_opt)
-        self.assertTrue(v_opt is not verbose_opt)
+        self.assert_(v_opt is version_opt)
+        self.assert_(v_opt is not verbose_opt)
         self.assertEqual(v_opt._long_opts, ["--version"])
         self.assertEqual(version_opt._short_opts, ["-v"])
         self.assertEqual(version_opt._long_opts, ["--version"])
@@ -1466,7 +1462,7 @@
         # screws things up for other tests when it's part of the Python
         # test suite.
         with test_support.EnvironmentVarGuard() as env:
-            env['COLUMNS'] = str(columns)
+            env.set('COLUMNS', str(columns))
             return InterceptingOptionParser(option_list=options)
 
     def assertHelpEquals(self, expected_output):
@@ -1495,7 +1491,7 @@
 
     def test_help_title_formatter(self):
         with test_support.EnvironmentVarGuard() as env:
-            env["COLUMNS"] = "80"
+            env.set("COLUMNS", "80")
             self.parser.formatter = TitledHelpFormatter()
             self.assertHelpEquals(_expected_help_title_formatter)
 
@@ -1620,6 +1616,9 @@
 
 
 def test_main():
+    is_jython = sys.platform.startswith("java")
+    if is_jython:
+        del TestOptionParser.test_refleak
     test_support.run_unittest(__name__)
 
 if __name__ == '__main__':

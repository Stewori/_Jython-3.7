--- lib-python/2.7/test/test_asyncore.py	2015-04-18 05:34:44.879111685 +0300
+++ Lib/test/test_asyncore.py	2015-04-18 05:34:31.819089820 +0300
@@ -10,7 +10,7 @@
 import struct
 
 from test import test_support
-from test.test_support import TESTFN, run_unittest, unlink
+from test.test_support import TESTFN, run_unittest, unlink, is_jython
 from StringIO import StringIO
 
 try:
@@ -72,6 +72,7 @@
     else:
         n = 200
         while n > 0:
+            conn.setblocking(False)
             r, w, e = select.select([conn], [], [])
             if r:
                 data = conn.recv(10)
@@ -350,6 +351,7 @@
     def tearDown(self):
         asyncore.close_all()
 
+    @unittest.skipIf(is_jython, 'FIXME: Currently not working on jython')
     @unittest.skipUnless(threading, 'Threading required for this test.')
     @test_support.reap_threads
     def test_send(self):
@@ -484,9 +486,8 @@
         return self.socket.getsockname()[:2]
 
     def handle_accept(self):
-        pair = self.accept()
-        if pair is not None:
-            self.handler(pair[0])
+        sock, addr = self.accept()
+        self.handler(sock)
 
     def handle_error(self):
         raise
@@ -549,6 +550,7 @@
         client = BaseClient(server.address)
         self.loop_waiting_for_flag(server)
 
+    @unittest.skipIf(is_jython, "FIXME: Currently not working on jython")
     def test_handle_read(self):
         # make sure handle_read is called on data received
 
@@ -576,6 +578,7 @@
         client = TestClient(server.address)
         self.loop_waiting_for_flag(client)
 
+    @unittest.skipIf(is_jython, "FIXME: Currently not working on jython")
     def test_handle_close(self):
         # make sure handle_close is called when the other end closes
         # the connection
@@ -600,6 +603,8 @@
         client = TestClient(server.address)
         self.loop_waiting_for_flag(client)
 
+    @unittest.skipIf(sys.platform.startswith("java"),
+                     "OOB not supported on java/jython")
     @unittest.skipIf(sys.platform.startswith("sunos"),
                      "OOB support is broken on Solaris")
     def test_handle_expt(self):
@@ -683,8 +688,13 @@
 
         s2 = asyncore.dispatcher()
         s2.create_socket(socket.AF_INET, socket.SOCK_STREAM)
+        # On jython, binding is not enough to create a server socket.
+        # Must first bind
+        s2.bind((HOST, port))
+        # And then listen, which will cause the actual server socket to be created
+        # and then to listen, and thus cause the error
         # EADDRINUSE indicates the socket was correctly bound
-        self.assertRaises(socket.error, s2.bind, (HOST, port))
+        self.assertRaises(socket.error, s2.listen, (5))
 
     def test_set_reuse_addr(self):
         sock = socket.socket()
@@ -712,7 +722,6 @@
         server = TCPServer()
         t = threading.Thread(target=lambda: asyncore.loop(timeout=0.1, count=500))
         t.start()
-        self.addCleanup(t.join)
 
         for x in xrange(20):
             s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

--- lib-python/2.7/test/test_dict.py	2015-04-18 05:34:44.515111075 +0300
+++ Lib/test/test_dict.py	2015-04-18 05:34:31.831089839 +0300
@@ -1,15 +1,23 @@
 import unittest
 from test import test_support
+from java.util import Map
+from java.util.concurrent import ConcurrentMap
 
 import UserDict, random, string
 import gc, weakref
 
 
 class DictTest(unittest.TestCase):
+
+    _class = None
+
+    def _make_dict(self, pydict):
+        return pydict if not self._class else self._class(pydict)
+
     def test_constructor(self):
         # calling built-in types without argument must return empty
-        self.assertEqual(dict(), {})
-        self.assertIsNot(dict(), {})
+        self.assertEqual(self._make_dict(dict()), {})
+        self.assertIsNot(self._make_dict(dict()), {})
 
     def test_literal_constructor(self):
         # check literal constructor for different sized dicts
@@ -20,16 +28,16 @@
             random.shuffle(items)
             formatted_items = ('{!r}: {:d}'.format(k, v) for k, v in items)
             dictliteral = '{' + ', '.join(formatted_items) + '}'
-            self.assertEqual(eval(dictliteral), dict(items))
+            self.assertEqual(self._make_dict(eval(dictliteral)), dict(items))
 
     def test_bool(self):
-        self.assertIs(not {}, True)
-        self.assertTrue({1: 2})
-        self.assertIs(bool({}), False)
-        self.assertIs(bool({1: 2}), True)
+        self.assertIs(not self._make_dict({}), True)
+        self.assertTrue(self._make_dict({1: 2}))
+        self.assertIs(bool(self._make_dict({})), False)
+        self.assertIs(bool(self._make_dict({1: 2})), True)
 
     def test_keys(self):
-        d = {}
+        d = self._make_dict({})
         self.assertEqual(d.keys(), [])
         d = {'a': 1, 'b': 2}
         k = d.keys()
@@ -39,26 +47,28 @@
         self.assertRaises(TypeError, d.keys, None)
 
     def test_values(self):
-        d = {}
+        d = self._make_dict({})
         self.assertEqual(d.values(), [])
-        d = {1:2}
+
+        d = self._make_dict({1:2})
         self.assertEqual(d.values(), [2])
 
         self.assertRaises(TypeError, d.values, None)
 
     def test_items(self):
-        d = {}
+        d = self._make_dict({})
         self.assertEqual(d.items(), [])
 
-        d = {1:2}
+        d = self._make_dict({1:2})
         self.assertEqual(d.items(), [(1, 2)])
 
         self.assertRaises(TypeError, d.items, None)
 
     def test_has_key(self):
-        d = {}
+        d = self._make_dict({})
         self.assertFalse(d.has_key('a'))
-        d = {'a': 1, 'b': 2}
+
+        d = self._make_dict({'a': 1, 'b': 2})
         k = d.keys()
         k.sort()
         self.assertEqual(k, ['a', 'b'])
@@ -66,11 +76,12 @@
         self.assertRaises(TypeError, d.has_key)
 
     def test_contains(self):
-        d = {}
+        d = self._make_dict({})
         self.assertNotIn('a', d)
         self.assertFalse('a' in d)
         self.assertTrue('a' not in d)
-        d = {'a': 1, 'b': 2}
+
+        d = self._make_dict({'a': 1, 'b': 2})
         self.assertIn('a', d)
         self.assertIn('b', d)
         self.assertNotIn('c', d)
@@ -78,13 +89,14 @@
         self.assertRaises(TypeError, d.__contains__)
 
     def test_len(self):
-        d = {}
+        d = self._make_dict({})
         self.assertEqual(len(d), 0)
-        d = {'a': 1, 'b': 2}
+
+        d = self._make_dict({'a': 1, 'b': 2})
         self.assertEqual(len(d), 2)
 
     def test_getitem(self):
-        d = {'a': 1, 'b': 2}
+        d = self._make_dict({'a': 1, 'b': 2})
         self.assertEqual(d['a'], 1)
         self.assertEqual(d['b'], 2)
         d['c'] = 3
@@ -102,7 +114,7 @@
             def __hash__(self):
                 return 24
 
-        d = {}
+        d = self._make_dict({})
         d[BadEq()] = 42
         self.assertRaises(KeyError, d.__getitem__, 23)
 
@@ -122,14 +134,14 @@
         self.assertRaises(Exc, d.__getitem__, x)
 
     def test_clear(self):
-        d = {1:1, 2:2, 3:3}
+        d = self._make_dict({1:1, 2:2, 3:3})
         d.clear()
         self.assertEqual(d, {})
 
         self.assertRaises(TypeError, d.clear, None)
 
     def test_update(self):
-        d = {}
+        d = self._make_dict({})
         d.update({1:100})
         d.update({2:20})
         d.update({1:1, 2:2, 3:3})
@@ -200,13 +212,13 @@
             def next(self):
                 raise Exc()
 
-        self.assertRaises(Exc, {}.update, badseq())
-
-        self.assertRaises(ValueError, {}.update, [(1, 2, 3)])
+        d = self._make_dict({})
+        self.assertRaises(Exc, d.update, badseq())
+        self.assertRaises(ValueError, d.update, [(1, 2, 3)])
 
     def test_fromkeys(self):
         self.assertEqual(dict.fromkeys('abc'), {'a':None, 'b':None, 'c':None})
-        d = {}
+        d = self._make_dict({})
         self.assertIsNot(d.fromkeys('abc'), d)
         self.assertEqual(d.fromkeys('abc'), {'a':None, 'b':None, 'c':None})
         self.assertEqual(d.fromkeys((4,5),0), {4:0, 5:0})
@@ -254,25 +266,18 @@
         d = dict(zip(range(6), range(6)))
         self.assertEqual(dict.fromkeys(d, 0), dict(zip(range(6), [0]*6)))
 
-        class baddict3(dict):
-            def __new__(cls):
-                return d
-        d = {i : i for i in range(10)}
-        res = d.copy()
-        res.update(a=None, b=None, c=None)
-        self.assertEqual(baddict3.fromkeys({"a", "b", "c"}), res)
-
     def test_copy(self):
-        d = {1:1, 2:2, 3:3}
+        d = self._make_dict({1:1, 2:2, 3:3})
         self.assertEqual(d.copy(), {1:1, 2:2, 3:3})
-        self.assertEqual({}.copy(), {})
+        self.assertEqual(self._make_dict({}).copy(), {})
         self.assertRaises(TypeError, d.copy, None)
 
     def test_get(self):
-        d = {}
+        d = self._make_dict({})
         self.assertIs(d.get('c'), None)
         self.assertEqual(d.get('c', 3), 3)
-        d = {'a': 1, 'b': 2}
+
+        d = self._make_dict({'a': 1, 'b': 2})
         self.assertIs(d.get('c'), None)
         self.assertEqual(d.get('c', 3), 3)
         self.assertEqual(d.get('a'), 1)
@@ -282,7 +287,7 @@
 
     def test_setdefault(self):
         # dict.setdefault()
-        d = {}
+        d = self._make_dict({})
         self.assertIs(d.setdefault('key0'), None)
         d.setdefault('key0', [])
         self.assertIs(d.setdefault('key0'), None)
@@ -320,10 +325,16 @@
                 self.eq_count += 1
                 return id(self) == id(other)
         hashed1 = Hashed()
-        y = {hashed1: 5}
+        y = self._make_dict({hashed1: 5})
+        if isinstance(y, Map) and not isinstance(y, ConcurrentMap):
+            raise unittest.SkipTest("java.util.Map objects that do not implement ConcurrentMap have no concurrency guarantees")
+        # given that there are potentially multiple copies of the
+        # above dict in self._make_dict, record the hash_count so it
+        # can be subtracted out
+        setup_hash_count = hashed1.hash_count
         hashed2 = Hashed()
         y.setdefault(hashed2, [])
-        self.assertEqual(hashed1.hash_count, 1)
+        self.assertEqual(hashed1.hash_count, setup_hash_count)
         self.assertEqual(hashed2.hash_count, 1)
         self.assertEqual(hashed1.eq_count + hashed2.eq_count, 1)
 
@@ -351,12 +362,12 @@
                 self.assertFalse(a)
                 self.assertFalse(b)
 
-        d = {}
+        d = self._make_dict({})
         self.assertRaises(KeyError, d.popitem)
 
     def test_pop(self):
         # Tests for pop with specified key
-        d = {}
+        d = self._make_dict({})
         k, v = 'abc', 'def'
         d[k] = v
         self.assertRaises(KeyError, d.pop, 'ghi')
@@ -370,7 +381,7 @@
         # (for 64-bit archs).  See SF bug #689659.
         x = 4503599627370496L
         y = 4503599627370496
-        h = {x: 'anything', y: 'something else'}
+        h = self._make_dict({x: 'anything', y: 'something else'})
         self.assertEqual(h[x], h[y])
 
         self.assertEqual(d.pop(k, v), v)
@@ -394,20 +405,22 @@
         x.fail = True
         self.assertRaises(Exc, d.pop, x)
 
+    @unittest.skipIf(test_support.is_jython, "Weakly consistent iteration is compatible with mutation") 
     def test_mutatingiteration(self):
         # changing dict size during iteration
-        d = {}
+        d = self._make_dict({})
         d[1] = 1
         with self.assertRaises(RuntimeError):
             for i in d:
                 d[i+1] = 1
 
     def test_repr(self):
-        d = {}
+        d = self._make_dict({})
         self.assertEqual(repr(d), '{}')
         d[1] = 2
         self.assertEqual(repr(d), '{1: 2}')
-        d = {}
+
+        d = self._make_dict({})
         d[1] = d
         self.assertEqual(repr(d), '{1: {...}}')
 
@@ -417,12 +430,12 @@
             def __repr__(self):
                 raise Exc()
 
-        d = {1: BadRepr()}
+        d = self._make_dict({1: BadRepr()})
         self.assertRaises(Exc, repr, d)
 
     def test_le(self):
-        self.assertFalse({} < {})
-        self.assertFalse({1: 2} < {1L: 2L})
+        self.assertFalse(self._make_dict({}) < {})
+        self.assertFalse(self._make_dict({1: 2}) < {1L: 2L})
 
         class Exc(Exception): pass
 
@@ -432,8 +445,8 @@
             def __hash__(self):
                 return 42
 
-        d1 = {BadCmp(): 1}
-        d2 = {1: 1}
+        d1 = self._make_dict({BadCmp(): 1})
+        d2 = self._make_dict({1: 1})
 
         with self.assertRaises(Exc):
             d1 < d2
@@ -441,7 +454,7 @@
     def test_missing(self):
         # Make sure dict doesn't have a __missing__ method
         self.assertFalse(hasattr(dict, "__missing__"))
-        self.assertFalse(hasattr({}, "__missing__"))
+        self.assertFalse(hasattr(self._make_dict({}), "__missing__"))
         # Test several cases:
         # (D) subclass defines __missing__ method returning a value
         # (E) subclass defines __missing__ method raising RuntimeError
@@ -483,7 +496,7 @@
 
     def test_tuple_keyerror(self):
         # SF #1576657
-        d = {}
+        d = self._make_dict({})
         with self.assertRaises(KeyError) as c:
             d[(1,)]
         self.assertEqual(c.exception.args, ((1,),))
@@ -502,7 +515,7 @@
                     raise CustomException
                 return other
 
-        d = {}
+        d = self._make_dict({})
         x1 = BadDictKey()
         x2 = BadDictKey()
         d[x1] = 1
@@ -525,7 +538,7 @@
         # exactly the right order, and I can't think of a randomized approach
         # that would be *likely* to hit a failing case in reasonable time.
 
-        d = {}
+        d = self._make_dict({})
         for i in range(5):
             d[i] = i
         for i in range(5):
@@ -544,7 +557,7 @@
                 if resizing:
                     d.clear()
                 return False
-        d = {}
+        d = self._make_dict({})
         resizing = False
         d[X()] = 1
         d[X()] = 2
@@ -559,8 +572,9 @@
         # Bug #3537: if an empty but presized dict with a size larger
         # than 7 was in the freelist, it triggered an assertion failure
         with self.assertRaises(ZeroDivisionError):
-            d = {'a': 1 // 0, 'b': None, 'c': None, 'd': None, 'e': None,
-                 'f': None, 'g': None, 'h': None}
+            d = self._make_dict(
+                    {'a': 1 // 0, 'b': None, 'c': None, 'd': None, 'e': None,
+                        'f': None, 'g': None, 'h': None})
         d = {}
 
     def test_container_iterator(self):
@@ -678,6 +692,11 @@
             pass
         self._tracked(MyDict())
 
+    def test_list_equality(self):
+        class A(dict): pass
+        for dtype in (A, dict):
+            self.assertEquals([dtype()], [dict()])
+
 
 from test import mapping_tests
 

--- lib-python/2.7/test/test_class.py	2015-04-18 05:34:44.479111016 +0300
+++ Lib/test/test_class.py	2015-04-18 05:34:31.819089820 +0300
@@ -331,18 +331,35 @@
 
         # XXX when using new-style classes the slice testme[:42] produces
         #  slice(None, 42, None) instead of slice(0, 42, None). py3k will have
-        #  to change this test.
+        #  to change this test. Jython already shows the py3k behavior by
+        #  default.
         callLst[:] = []
         testme[:42]
-        self.assertCallStack([('__getitem__', (testme, slice(0, 42, None)))])
+        if test_support.is_jython:
+            self.assertCallStack([('__getitem__', (testme,
+                                                   slice(None, 42, None)))])
+        else:
+            self.assertCallStack([('__getitem__', (testme,
+                                                   slice(0, 42, None)))])
 
         callLst[:] = []
         testme[:42] = "The Answer"
-        self.assertCallStack([('__setitem__', (testme, slice(0, 42, None),
-                                                                "The Answer"))])
+        if test_support.is_jython:
+            self.assertCallStack([('__setitem__',(testme,
+                                                  slice(None, 42, None),
+                                                  "The Answer"))])
+        else:
+            self.assertCallStack([('__setitem__', (testme,
+                                                   slice(0, 42, None),
+                                                   "The Answer"))])
         callLst[:] = []
         del testme[:42]
-        self.assertCallStack([('__delitem__', (testme, slice(0, 42, None)))])
+        if test_support.is_jython:
+            self.assertCallStack([('__delitem__', (testme,
+                                                   slice(None, 42, None)))])
+        else:
+            self.assertCallStack([('__delitem__', (testme,
+                                                   slice(0, 42, None)))])
 
         # Restore the slice methods, or the tests will fail with regrtest -R.
         AllTests.__getslice__ = getslice
@@ -479,16 +496,19 @@
         self.assertCallStack([('__delattr__', (testme, "cardinal"))])
 
     def testDel(self):
-        x = []
-
-        class DelTest:
-            def __del__(self):
-                x.append("crab people, crab people")
-        testme = DelTest()
-        del testme
-        import gc
-        gc.collect()
-        self.assertEqual(["crab people, crab people"], x)
+        #XXX: gc.collect is not deterministic on Jython, but it would be nice
+        #     to find a way to test this.
+        if not test_support.is_jython:
+            x = []
+
+            class DelTest:
+                def __del__(self):
+                    x.append("crab people, crab people")
+            testme = DelTest()
+            del testme
+            import gc
+            gc.collect()
+            self.assertEqual(["crab people, crab people"], x)
 
     def testBadTypeReturned(self):
         # return values of some method are type-checked
@@ -526,7 +546,10 @@
 
         callLst[:] = []
         as_long = long(mixIntAndLong)
-        self.assertEqual(type(as_long), long)
+        if test_support.is_jython:
+            self.assertEqual(type(as_long), int)
+        else:
+            self.assertEqual(type(as_long), long)
         self.assertEqual(as_long, 64)
         self.assertCallStack([('__long__', (mixIntAndLong,))])
 

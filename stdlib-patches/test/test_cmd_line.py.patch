--- lib-python/2.7/test/test_cmd_line.py	2015-04-18 05:34:44.479111016 +0300
+++ Lib/test/test_cmd_line.py	2015-04-18 05:34:31.823089826 +0300
@@ -1,23 +1,37 @@
-# Tests invocation of the interpreter with various command line arguments
-# All tests are executed with environment variables ignored
-# See test_cmd_line_script.py for testing of script execution
-
-import test.test_support
+import os
+import test.test_support, unittest
 import sys
-import unittest
-from test.script_helper import (
-    assert_python_ok, assert_python_failure, spawn_python, kill_python,
-    python_exit_code
-)
-
+import popen2
+import subprocess
 
 class CmdLineTest(unittest.TestCase):
-    def start_python(self, *args):
-        p = spawn_python(*args)
-        return kill_python(p)
+
+    @classmethod
+    def tearDownClass(cls):
+        if test.test_support.is_jython:
+            # GC is not immediate, so if Popen.__del__ may be delayed.
+            # Try to force any Popen.__del__ errors within scope of test.
+            from test_weakref import extra_collect
+            extra_collect()
+
+    def start_python(self, cmd_line):
+        outfp, infp = popen2.popen4('"%s" %s' % (sys.executable, cmd_line))
+        infp.close()
+        data = outfp.read()
+        outfp.close()
+        # try to cleanup the child so we don't appear to leak when running
+        # with regrtest -R.  This should be a no-op on Windows.
+        popen2._cleanup()
+        return data
 
     def exit_code(self, *args):
-        return python_exit_code(*args)
+        cmd_line = [sys.executable]
+        cmd_line.extend(args)
+        devnull = open(os.devnull, 'w')
+        result = subprocess.call(cmd_line, stdout=devnull,
+                                 stderr=subprocess.STDOUT)
+        devnull.close()
+        return result
 
     def test_directories(self):
         self.assertNotEqual(self.exit_code('.'), 0)
@@ -26,7 +40,10 @@
     def verify_valid_flag(self, cmd_line):
         data = self.start_python(cmd_line)
         self.assertTrue(data == '' or data.endswith('\n'))
-        self.assertNotIn('Traceback', data)
+        self.assertTrue('Traceback' not in data)
+
+    def test_environment(self):
+        self.verify_valid_flag('-E')
 
     def test_optimize(self):
         self.verify_valid_flag('-O')
@@ -42,11 +59,14 @@
         self.verify_valid_flag('-S')
 
     def test_usage(self):
-        self.assertIn('usage', self.start_python('-h'))
+        self.assertTrue('usage' in self.start_python('-h'))
 
     def test_version(self):
-        version = 'Python %d.%d' % sys.version_info[:2]
-        self.assertTrue(self.start_python('-V').startswith(version))
+        prefix = 'J' if test.test_support.is_jython else 'P'
+        version = prefix + 'ython %d.%d' % sys.version_info[:2]
+        start = self.start_python('-V')
+        self.assertTrue(start.startswith(version),
+            "%s does not start with %s" % (start, version))
 
     def test_run_module(self):
         # Test expected operation of the '-m' switch
@@ -66,17 +86,6 @@
             self.exit_code('-m', 'timeit', '-n', '1'),
             0)
 
-    def test_run_module_bug1764407(self):
-        # -m and -i need to play well together
-        # Runs the timeit module and checks the __main__
-        # namespace has been populated appropriately
-        p = spawn_python('-i', '-m', 'timeit', '-n', '1')
-        p.stdin.write('Timer\n')
-        p.stdin.write('exit()\n')
-        data = kill_python(p)
-        self.assertTrue(data.startswith('1 loop'))
-        self.assertIn('__main__.Timer', data)
-
     def test_run_code(self):
         # Test expected operation of the '-c' switch
         # Switch needs an argument
@@ -90,50 +99,6 @@
             self.exit_code('-c', 'pass'),
             0)
 
-    def test_hash_randomization(self):
-        # Verify that -R enables hash randomization:
-        self.verify_valid_flag('-R')
-        hashes = []
-        for i in range(2):
-            code = 'print(hash("spam"))'
-            data = self.start_python('-R', '-c', code)
-            hashes.append(data)
-        self.assertNotEqual(hashes[0], hashes[1])
-
-        # Verify that sys.flags contains hash_randomization
-        code = 'import sys; print sys.flags'
-        data = self.start_python('-R', '-c', code)
-        self.assertTrue('hash_randomization=1' in data)
-
-    def test_del___main__(self):
-        # Issue #15001: PyRun_SimpleFileExFlags() did crash because it kept a
-        # borrowed reference to the dict of __main__ module and later modify
-        # the dict whereas the module was destroyed
-        filename = test.test_support.TESTFN
-        self.addCleanup(test.test_support.unlink, filename)
-        with open(filename, "w") as script:
-            print >>script, "import sys"
-            print >>script, "del sys.modules['__main__']"
-        assert_python_ok(filename)
-
-    def test_unknown_options(self):
-        rc, out, err = assert_python_failure('-E', '-z')
-        self.assertIn(b'Unknown option: -z', err)
-        self.assertEqual(err.splitlines().count(b'Unknown option: -z'), 1)
-        self.assertEqual(b'', out)
-        # Add "without='-E'" to prevent _assert_python to append -E
-        # to env_vars and change the output of stderr
-        rc, out, err = assert_python_failure('-z', without='-E')
-        self.assertIn(b'Unknown option: -z', err)
-        self.assertEqual(err.splitlines().count(b'Unknown option: -z'), 1)
-        self.assertEqual(b'', out)
-        rc, out, err = assert_python_failure('-a', '-z', without='-E')
-        self.assertIn(b'Unknown option: -a', err)
-        # only the first unknown option is reported
-        self.assertNotIn(b'Unknown option: -z', err)
-        self.assertEqual(err.splitlines().count(b'Unknown option: -a'), 1)
-        self.assertEqual(b'', out)
-
 
 def test_main():
     test.test_support.run_unittest(CmdLineTest)

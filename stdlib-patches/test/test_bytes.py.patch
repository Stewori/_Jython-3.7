--- lib-python/2.7/test/test_bytes.py	2015-04-18 05:34:44.475111008 +0300
+++ Lib/test/test_bytes.py	2015-04-18 05:34:31.819089820 +0300
@@ -177,14 +177,18 @@
                 for step in indices[1:]:
                     self.assertEqual(b[start:stop:step], self.type2test(L[start:stop:step]))
 
-    def test_encoding(self):
-        sample = u"Hello world\n\u1234\u5678\u9abc\udef0"
-        for enc in ("utf8", "utf16"):
-            b = self.type2test(sample, enc)
-            self.assertEqual(b, self.type2test(sample.encode(enc)))
-        self.assertRaises(UnicodeEncodeError, self.type2test, sample, "latin1")
-        b = self.type2test(sample, "latin1", "ignore")
-        self.assertEqual(b, self.type2test(sample[:-4], "utf-8"))
+#XXX: Jython doesn't support codepoints outside of the UTF-16 range even at
+#     parse time. Maybe someday we might push the error off to later, but for
+#     now I'm just commenting this whole test out.
+#     See http://bugs.jython.org/issue1836 for more.
+#    def test_encoding(self):
+#        sample = u"Hello world\n\u1234\u5678\u9abc\udef0"
+#        for enc in ("utf8", "utf16"):
+#            b = self.type2test(sample, enc)
+#            self.assertEqual(b, self.type2test(sample.encode(enc)))
+#        self.assertRaises(UnicodeEncodeError, self.type2test, sample, "latin1")
+#        b = self.type2test(sample, "latin1", "ignore")
+#        self.assertEqual(b, self.type2test(sample[:-4], "utf-8"))
 
     def test_decode(self):
         sample = u"Hello world\n\u1234\u5678\u9abc\def0\def0"
@@ -256,9 +260,9 @@
         self.assertRaises(TypeError, self.type2test.fromhex)
         self.assertRaises(TypeError, self.type2test.fromhex, 1)
         self.assertEqual(self.type2test.fromhex(u''), self.type2test())
-        b = bytearray([0x1a, 0x2b, 0x30])
-        self.assertEqual(self.type2test.fromhex(u'1a2B30'), b)
-        self.assertEqual(self.type2test.fromhex(u'  1A 2B  30   '), b)
+        b = bytearray([0x1a, 0x2b, 0x30, 0xca, 0xfe, 0xba, 0xbe]) # challenging signs
+        self.assertEqual(self.type2test.fromhex(u'1a2B30CafEBabe'), b)
+        self.assertEqual(self.type2test.fromhex(u'  1A 2B  30 CafeBabe   '), b)
         self.assertEqual(self.type2test.fromhex(u'0000'), b'\0\0')
         self.assertRaises(ValueError, self.type2test.fromhex, u'a')
         self.assertRaises(ValueError, self.type2test.fromhex, u'rt')
@@ -353,7 +357,11 @@
             self.assertEqual(b.split(None, 2), [b'arf', b'barf'])
         for b in (b'a\x1Cb', b'a\x1Db', b'a\x1Eb', b'a\x1Fb'):
             b = self.type2test(b)
-            self.assertEqual(b.split(), [b])
+            if not test.test_support.is_jython:
+                self.assertEqual(b.split(), [b])
+            else:
+                # \x1c .. \x1f are whitespace Jython (which follows Java)
+                self.assertEqual(b.split(), [b'a', b'b'])
         self.assertEqual(self.type2test(b'  a  bb  c  ').split(None, 0), [b'a  bb  c  '])
         self.assertEqual(self.type2test(b'  a  bb  c  ').split(None, 1), [b'a', b'bb  c  '])
         self.assertEqual(self.type2test(b'  a  bb  c  ').split(None, 2), [b'a', b'bb', b'c  '])
@@ -364,7 +372,11 @@
 
     def test_split_unicodewhitespace(self):
         b = self.type2test(b"\x09\x0A\x0B\x0C\x0D\x1C\x1D\x1E\x1F")
-        self.assertEqual(b.split(), [b'\x1c\x1d\x1e\x1f'])
+        if not test.test_support.is_jython:
+            self.assertEqual(b.split(), [b'\x1c\x1d\x1e\x1f'])
+        else:
+            # \x1c .. \x1f are whitespace Jython
+            self.assertEqual(b.split(), [])
 
     def test_rsplit(self):
         b = self.type2test(b'mississippi')
@@ -389,7 +401,11 @@
 
     def test_rsplit_unicodewhitespace(self):
         b = self.type2test(b"\x09\x0A\x0B\x0C\x0D\x1C\x1D\x1E\x1F")
-        self.assertEqual(b.rsplit(), [b'\x1c\x1d\x1e\x1f'])
+        if not test.test_support.is_jython:
+            self.assertEqual(b.rsplit(), [b'\x1c\x1d\x1e\x1f'])
+        else:
+            # \x1c .. \x1f are whitespace Jython
+            self.assertEqual(b.rsplit(), [])
 
     def test_partition(self):
         b = self.type2test(b'mississippi')
@@ -518,6 +534,23 @@
         self.assertRaisesRegexp(TypeError, r'\bendswith\b', b.endswith,
                                 x, None, None, None)
 
+    def test_translate(self):
+        # adapted from AssortedBytesTest.test_translate
+        b = self.type2test(b'hello')
+        rosetta = self.type2test().join(map(chr,range(256)))
+        rosetta[ord('o')] = ord('e')
+        c = b.translate(rosetta, b'l')
+        self.assertEqual(b, b'hello')
+        self.assertEqual(c, b'hee')
+        c = b.translate(None, b'e')
+        self.assertEqual(c, b'hllo')
+        c = b.translate(None, b'the larch')
+        self.assertEqual(c, b'o')
+        stone = self.type2test(''.join(map(chr,range(1,256))))
+        self.assertRaises(ValueError, b.translate, stone, b'short')
+        self.assertRaises(TypeError, b.translate, rosetta, None)
+        self.assertRaises(TypeError, b.translate, None, None)
+
 
 class ByteArrayTest(BaseBytesTest):
     type2test = bytearray
@@ -635,26 +668,6 @@
         b[3:0] = [42, 42, 42]
         self.assertEqual(b, bytearray([0, 1, 2, 42, 42, 42, 3, 4, 5, 6, 7, 8, 9]))
 
-        b[3:] = b'foo'
-        self.assertEqual(b, bytearray([0, 1, 2, 102, 111, 111]))
-
-        b[:3] = memoryview(b'foo')
-        self.assertEqual(b, bytearray([102, 111, 111, 102, 111, 111]))
-
-        b[3:4] = []
-        self.assertEqual(b, bytearray([102, 111, 111, 111, 111]))
-
-        b[1:] = list(b'uuuu')  # this works only on Python2
-        self.assertEqual(b, bytearray([102, 117, 117, 117, 117]))
-
-        for elem in [5, -5, 0, long(10e20), u'str', 2.3, [u'a', u'b'], [[]]]:
-            with self.assertRaises(TypeError):
-                b[3:4] = elem
-
-        for elem in [[254, 255, 256], [-256, 9000]]:
-            with self.assertRaises(ValueError):
-                b[3:4] = elem
-
     def test_extended_set_del_slice(self):
         indices = (0, None, 1, 3, 19, 300, 1<<333, -1, -2, -31, -300)
         for start in indices:
@@ -873,6 +886,11 @@
         self.assertRaises(BufferError, delslice)
         self.assertEqual(b, orig)
 
+        if test.test_support.is_jython:
+            # Show that releasing v releases the bytearray for size change
+            v.release()
+            b.pop()
+
     def test_empty_bytearray(self):
         # Issue #7561: operations on empty bytearrays could crash in many
         # situations, due to a fragile implementation of the
@@ -925,7 +943,6 @@
         self.assertEqual(bytes(b"abc") < b"ab", False)
         self.assertEqual(bytes(b"abc") <= b"ab", False)
 
-    @test.test_support.requires_docstrings
     def test_doc(self):
         self.assertIsNotNone(bytearray.__doc__)
         self.assertTrue(bytearray.__doc__.startswith("bytearray("), bytearray.__doc__)

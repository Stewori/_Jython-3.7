--- lib-python/2.7/test/test_threading_local.py	2015-04-18 05:34:44.679111350 +0300
+++ Lib/test/test_threading_local.py	2015-04-18 05:34:31.871089907 +0300
@@ -1,15 +1,10 @@
 import unittest
 from doctest import DocTestSuite
 from test import test_support
+import threading
 import weakref
 import gc
 
-# Modules under test
-_thread = test_support.import_module('thread')
-threading = test_support.import_module('threading')
-import _threading_local
-
-
 class Weak(object):
     pass
 
@@ -18,7 +13,7 @@
     local.weak = weak
     weaklist.append(weakref.ref(weak))
 
-class BaseLocalTest:
+class ThreadingLocalTest(unittest.TestCase):
 
     def test_local_refs(self):
         self._local_refs(20)
@@ -26,7 +21,7 @@
         self._local_refs(100)
 
     def _local_refs(self, n):
-        local = self._local()
+        local = threading.local()
         weaklist = []
         for i in range(n):
             t = threading.Thread(target=target, args=(local, weaklist))
@@ -37,15 +32,15 @@
         gc.collect()
         self.assertEqual(len(weaklist), n)
 
-        # XXX _threading_local keeps the local of the last stopped thread alive.
+        # XXX threading.local keeps the local of the last stopped thread alive.
         deadlist = [weak for weak in weaklist if weak() is None]
-        self.assertIn(len(deadlist), (n-1, n))
+        self.assertEqual(len(deadlist), n-1)
 
         # Assignment to the same thread local frees it sometimes (!)
         local.someothervar = None
         gc.collect()
         deadlist = [weak for weak in weaklist if weak() is None]
-        self.assertIn(len(deadlist), (n-1, n), (n, len(deadlist)))
+        self.assert_(len(deadlist) in (n-1, n), (n, len(deadlist)))
 
     def test_derived(self):
         # Issue 3088: if there is a threads switch inside the __init__
@@ -53,7 +48,7 @@
         # is created but not correctly set on the object.
         # The first member set may be bogus.
         import time
-        class Local(self._local):
+        class Local(threading.local):
             def __init__(self):
                 time.sleep(0.01)
         local = Local()
@@ -74,7 +69,7 @@
 
     def test_derived_cycle_dealloc(self):
         # http://bugs.python.org/issue6990
-        class Local(self._local):
+        class Local(threading.local):
             pass
         locals = None
         passed = [False]
@@ -110,108 +105,13 @@
 
         self.assertTrue(passed[0])
 
-    def test_arguments(self):
-        # Issue 1522237
-        from thread import _local as local
-        from _threading_local import local as py_local
-
-        for cls in (local, py_local):
-            class MyLocal(cls):
-                def __init__(self, *args, **kwargs):
-                    pass
-
-            MyLocal(a=1)
-            MyLocal(1)
-            self.assertRaises(TypeError, cls, a=1)
-            self.assertRaises(TypeError, cls, 1)
-
-    def _test_one_class(self, c):
-        self._failed = "No error message set or cleared."
-        obj = c()
-        e1 = threading.Event()
-        e2 = threading.Event()
-
-        def f1():
-            obj.x = 'foo'
-            obj.y = 'bar'
-            del obj.y
-            e1.set()
-            e2.wait()
-
-        def f2():
-            try:
-                foo = obj.x
-            except AttributeError:
-                # This is expected -- we haven't set obj.x in this thread yet!
-                self._failed = ""  # passed
-            else:
-                self._failed = ('Incorrectly got value %r from class %r\n' %
-                                (foo, c))
-                sys.stderr.write(self._failed)
-
-        t1 = threading.Thread(target=f1)
-        t1.start()
-        e1.wait()
-        t2 = threading.Thread(target=f2)
-        t2.start()
-        t2.join()
-        # The test is done; just let t1 know it can exit, and wait for it.
-        e2.set()
-        t1.join()
-
-        self.assertFalse(self._failed, self._failed)
-
-    def test_threading_local(self):
-        self._test_one_class(self._local)
-
-    def test_threading_local_subclass(self):
-        class LocalSubclass(self._local):
-            """To test that subclasses behave properly."""
-        self._test_one_class(LocalSubclass)
-
-    def _test_dict_attribute(self, cls):
-        obj = cls()
-        obj.x = 5
-        self.assertEqual(obj.__dict__, {'x': 5})
-        with self.assertRaises(AttributeError):
-            obj.__dict__ = {}
-        with self.assertRaises(AttributeError):
-            del obj.__dict__
-
-    def test_dict_attribute(self):
-        self._test_dict_attribute(self._local)
-
-    def test_dict_attribute_subclass(self):
-        class LocalSubclass(self._local):
-            """To test that subclasses behave properly."""
-        self._test_dict_attribute(LocalSubclass)
-
-
-class ThreadLocalTest(unittest.TestCase, BaseLocalTest):
-    _local = _thread._local
-
-    # Fails for the pure Python implementation
-    def test_cycle_collection(self):
-        class X:
-            pass
-
-        x = X()
-        x.local = self._local()
-        x.local.x = x
-        wr = weakref.ref(x)
-        del x
-        gc.collect()
-        self.assertIs(wr(), None)
-
-class PyThreadingLocalTest(unittest.TestCase, BaseLocalTest):
-    _local = _threading_local.local
-
 
 def test_main():
     suite = unittest.TestSuite()
     suite.addTest(DocTestSuite('_threading_local'))
-    suite.addTest(unittest.makeSuite(ThreadLocalTest))
-    suite.addTest(unittest.makeSuite(PyThreadingLocalTest))
+    if test_support.is_jython:
+        del ThreadingLocalTest.test_local_refs
+    suite.addTest(unittest.makeSuite(ThreadingLocalTest))
 
     try:
         from thread import _local

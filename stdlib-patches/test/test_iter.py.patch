--- lib-python/2.7/test/test_iter.py	2015-04-18 05:34:44.587111196 +0300
+++ Lib/test/test_iter.py	2015-04-18 05:34:31.843089859 +0300
@@ -2,7 +2,7 @@
 
 import unittest
 from test.test_support import run_unittest, TESTFN, unlink, have_unicode, \
-                              check_py3k_warnings, cpython_only
+                              check_py3k_warnings
 
 # Test result of triple loop (too big to inline)
 TRIPLETS = [(0, 0, 0), (0, 0, 1), (0, 0, 2),
@@ -76,7 +76,7 @@
         seq = range(10)
         it = iter(seq)
         it2 = iter(it)
-        self.assertTrue(it is it2)
+        self.assert_(it is it2)
 
     # Test that for loops over iterators work
     def test_iter_for_loop(self):
@@ -121,13 +121,6 @@
     def test_seq_class_iter(self):
         self.check_iterator(iter(SequenceClass(10)), range(10))
 
-    # Test a new_style class with __iter__ but no next() method
-    def test_new_style_iter_class(self):
-        class IterClass(object):
-            def __iter__(self):
-                return self
-        self.assertRaises(TypeError, iter, IterClass())
-
     # Test two-argument iter() with callable instance
     def test_iter_callable(self):
         class C:
@@ -574,23 +567,23 @@
     def test_in_and_not_in(self):
         for sc5 in IteratingSequenceClass(5), SequenceClass(5):
             for i in range(5):
-                self.assertIn(i, sc5)
+                self.assert_(i in sc5)
             for i in "abc", -1, 5, 42.42, (3, 4), [], {1: 1}, 3-12j, sc5:
-                self.assertNotIn(i, sc5)
+                self.assert_(i not in sc5)
 
         self.assertRaises(TypeError, lambda: 3 in 12)
         self.assertRaises(TypeError, lambda: 3 not in map)
 
         d = {"one": 1, "two": 2, "three": 3, 1j: 2j}
         for k in d:
-            self.assertIn(k, d)
-            self.assertNotIn(k, d.itervalues())
+            self.assert_(k in d)
+            self.assert_(k not in d.itervalues())
         for v in d.values():
-            self.assertIn(v, d.itervalues())
-            self.assertNotIn(v, d)
+            self.assert_(v in d.itervalues())
+            self.assert_(v not in d)
         for k, v in d.iteritems():
-            self.assertIn((k, v), d.iteritems())
-            self.assertNotIn((v, k), d.iteritems())
+            self.assert_((k, v) in d.iteritems())
+            self.assert_((v, k) not in d.iteritems())
 
         f = open(TESTFN, "w")
         try:
@@ -601,9 +594,9 @@
         try:
             for chunk in "abc":
                 f.seek(0, 0)
-                self.assertNotIn(chunk, f)
+                self.assert_(chunk not in f)
                 f.seek(0, 0)
-                self.assertIn((chunk + "\n"), f)
+                self.assert_((chunk + "\n") in f)
         finally:
             f.close()
             try:
@@ -793,14 +786,18 @@
         (a, b), (c,) = IteratingSequenceClass(2), {42: 24}
         self.assertEqual((a, b, c), (0, 1, 42))
 
+        # Test reference count behavior
 
-    @cpython_only
-    def test_ref_counting_behavior(self):
-        class C(object):
+        # XXX: Jython new style objects don't support __del__ yet
+        from test_weakref import extra_collect
+        #class C(object):
+        class C:
             count = 0
-            def __new__(cls):
+            #def __new__(cls):
+            def __init__(self):
+                cls = C
                 cls.count += 1
-                return object.__new__(cls)
+                #return object.__new__(cls)
             def __del__(self):
                 cls = self.__class__
                 assert cls.count > 0
@@ -808,6 +805,7 @@
         x = C()
         self.assertEqual(C.count, 1)
         del x
+        extra_collect()
         self.assertEqual(C.count, 0)
         l = [C(), C(), C()]
         self.assertEqual(C.count, 3)
@@ -816,6 +814,7 @@
         except ValueError:
             pass
         del l
+        extra_collect()
         self.assertEqual(C.count, 0)
 
 
@@ -893,36 +892,6 @@
         self.assertEqual(list(b), zip(range(5), range(5)))
         self.assertEqual(list(b), [])
 
-    def test_3720(self):
-        # Avoid a crash, when an iterator deletes its next() method.
-        class BadIterator(object):
-            def __iter__(self):
-                return self
-            def next(self):
-                del BadIterator.next
-                return 1
-
-        try:
-            for i in BadIterator() :
-                pass
-        except TypeError:
-            pass
-
-    def test_extending_list_with_iterator_does_not_segfault(self):
-        # The code to extend a list with an iterator has a fair
-        # amount of nontrivial logic in terms of guessing how
-        # much memory to allocate in advance, "stealing" refs,
-        # and then shrinking at the end.  This is a basic smoke
-        # test for that scenario.
-        def gen():
-            for i in range(500):
-                yield i
-        lst = [0] * 500
-        for i in range(240):
-            lst.pop(0)
-        lst.extend(gen())
-        self.assertEqual(len(lst), 760)
-
 
 def test_main():
     run_unittest(TestCase)

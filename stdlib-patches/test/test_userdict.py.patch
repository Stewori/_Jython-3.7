--- lib-python/2.7/test/test_userdict.py	2015-04-18 05:34:44.699111383 +0300
+++ Lib/test/test_userdict.py	2015-04-18 05:34:31.875089913 +0300
@@ -1,8 +1,124 @@
 # Check every path through every method of UserDict
 
-from test import test_support, mapping_tests
+import test.test_support, unittest
+from sets import Set
+
 import UserDict
 
+class TestMappingProtocol(unittest.TestCase):
+    # This base class can be used to check that an object conforms to the
+    # mapping protocol
+
+    # Functions that can be useful to override to adapt to dictionary
+    # semantics
+    _tested_class = dict   # which class is being tested
+
+    def _reference(self):
+        """Return a dictionary of values which are invariant by storage
+        in the object under test."""
+        return {1:2, "key1":"value1", "key2":(1,2,3)}
+    def _empty_mapping(self):
+        """Return an empty mapping object"""
+        return self._tested_class()
+    def _full_mapping(self, data):
+        """Return a mapping object with the value contained in data
+        dictionary"""
+        x = self._empty_mapping()
+        for key, value in data.items():
+            x[key] = value
+        return x
+
+    def __init__(self, *args, **kw):
+        unittest.TestCase.__init__(self, *args, **kw)
+        self.reference = self._reference().copy()
+        key, value = self.reference.popitem()
+        self.other = {key:value}
+
+    def test_read(self):
+        # Test for read only operations on mapping
+        p = self._empty_mapping()
+        p1 = dict(p) #workaround for singleton objects
+        d = self._full_mapping(self.reference)
+        if d is p:
+            p = p1
+        #Indexing
+        for key, value in self.reference.items():
+            self.assertEqual(d[key], value)
+        knownkey = self.other.keys()[0]
+        self.failUnlessRaises(KeyError, lambda:d[knownkey])
+        #len
+        self.assertEqual(len(p), 0)
+        self.assertEqual(len(d), len(self.reference))
+        #has_key
+        for k in self.reference:
+            self.assert_(d.has_key(k))
+            self.assert_(k in d)
+        for k in self.other:
+            self.failIf(d.has_key(k))
+            self.failIf(k in d)
+        #cmp
+        self.assertEqual(cmp(p,p), 0)
+        self.assertEqual(cmp(d,d), 0)
+        self.assertEqual(cmp(p,d), -1)
+        self.assertEqual(cmp(d,p), 1)
+        #__non__zero__
+        if p: self.fail("Empty mapping must compare to False")
+        if not d: self.fail("Full mapping must compare to True")
+        # keys(), items(), iterkeys() ...
+        def check_iterandlist(iter, lst, ref):
+            self.assert_(hasattr(iter, 'next'))
+            self.assert_(hasattr(iter, '__iter__'))
+            x = list(iter)
+            self.assert_(Set(x)==Set(lst)==Set(ref))
+        check_iterandlist(d.iterkeys(), d.keys(), self.reference.keys())
+        check_iterandlist(iter(d), d.keys(), self.reference.keys())
+        check_iterandlist(d.itervalues(), d.values(), self.reference.values())
+        check_iterandlist(d.iteritems(), d.items(), self.reference.items())
+        #get
+        key, value = d.iteritems().next()
+        knownkey, knownvalue = self.other.iteritems().next()
+        self.assertEqual(d.get(key, knownvalue), value)
+        self.assertEqual(d.get(knownkey, knownvalue), knownvalue)
+        self.failIf(knownkey in d)
+
+    def test_write(self):
+        # Test for write operations on mapping
+        p = self._empty_mapping()
+        #Indexing
+        for key, value in self.reference.items():
+            p[key] = value
+            self.assertEqual(p[key], value)
+        for key in self.reference.keys():
+            del p[key]
+            self.failUnlessRaises(KeyError, lambda:p[key])
+        p = self._empty_mapping()
+        #update
+        p.update(self.reference)
+        self.assertEqual(dict(p), self.reference)
+        d = self._full_mapping(self.reference)
+        #setdefaullt
+        key, value = d.iteritems().next()
+        knownkey, knownvalue = self.other.iteritems().next()
+        self.assertEqual(d.setdefault(key, knownvalue), value)
+        self.assertEqual(d[key], value)
+        self.assertEqual(d.setdefault(knownkey, knownvalue), knownvalue)
+        self.assertEqual(d[knownkey], knownvalue)
+        #pop
+        self.assertEqual(d.pop(knownkey), knownvalue)
+        self.failIf(knownkey in d)
+        self.assertRaises(KeyError, d.pop, knownkey)
+        default = 909
+        d[knownkey] = knownvalue
+        self.assertEqual(d.pop(knownkey, default), knownvalue)
+        self.failIf(knownkey in d)
+        self.assertEqual(d.pop(knownkey, default), default)
+        #popitem
+        key, value = d.popitem()
+        self.failIf(key in d)
+        self.assertEqual(value, self.reference[key])
+        p=self._empty_mapping()
+        self.assertRaises(KeyError, p.popitem)
+
 d0 = {}
 d1 = {"one": 1}
 d2 = {"one": 1, "two": 2}
@@ -10,8 +126,8 @@
 d4 = {"one": None, "two": None}
 d5 = {"one": 1, "two": 1}
 
-class UserDictTest(mapping_tests.TestHashMappingProtocol):
-    type2test = UserDict.IterableUserDict
+class UserDictTest(TestMappingProtocol):
+    _tested_class = UserDict.IterableUserDict
 
     def test_all(self):
         # Test constructors
@@ -38,14 +154,27 @@
         self.assertEqual(UserDict.UserDict().fromkeys('one two'.split()), d4)
         self.assertEqual(UserDict.UserDict.fromkeys('one two'.split(), 1), d5)
         self.assertEqual(UserDict.UserDict().fromkeys('one two'.split(), 1), d5)
-        self.assertTrue(u1.fromkeys('one two'.split()) is not u1)
-        self.assertIsInstance(u1.fromkeys('one two'.split()), UserDict.UserDict)
-        self.assertIsInstance(u2.fromkeys('one two'.split()), UserDict.IterableUserDict)
+        self.assert_(u1.fromkeys('one two'.split()) is not u1)
+        self.assert_(isinstance(u1.fromkeys('one two'.split()), UserDict.UserDict))
+        self.assert_(isinstance(u2.fromkeys('one two'.split()), UserDict.IterableUserDict))
 
         # Test __repr__
-        self.assertEqual(str(u0), str(d0))
-        self.assertEqual(repr(u1), repr(d1))
-        self.assertEqual(repr(u2), repr(d2))
+
+        # zyasoft - the below is not necessarily true, we cannot
+        # depend on the ordering of how the string is constructed;
+        # unless we require that it be sorted, or otherwise ordered in
+        # some consistent fashion
+
+        # for repr, we can use eval, so that's what we will do here
+
+        # self.assertEqual(str(u0), str(d0))
+        # self.assertEqual(repr(u1), repr(d1))
+        # self.assertEqual(`u2`, `d2`)
+
+        self.assertEqual(eval(repr(u1)), eval(repr(d1)))
+        self.assertEqual(eval(`u2`), eval(`d2`))
+
+        # end zyasoft ~
 
         # Test __cmp__ and __len__
         all = [d0, d1, d2, u, u0, u1, u2, uu, uu0, uu1, uu2]
@@ -88,20 +217,22 @@
         m2['foo'] = 'bar'
         self.assertNotEqual(m2a, m2)
 
+        # zyasoft - changed the following three assertions to use sets
+        # to remove order dependency
+
         # Test keys, items, values
-        self.assertEqual(u2.keys(), d2.keys())
-        self.assertEqual(u2.items(), d2.items())
-        self.assertEqual(u2.values(), d2.values())
+        self.assertEqual(set(u2.keys()), set(d2.keys()))
+        self.assertEqual(set(u2.items()), set(d2.items()))
+        self.assertEqual(set(u2.values()), set(d2.values()))
 
         # Test has_key and "in".
         for i in u2.keys():
-            self.assertIn(i, u2)
+            self.assert_(u2.has_key(i))
+            self.assert_(i in u2)
+            self.assertEqual(u1.has_key(i), d1.has_key(i))
             self.assertEqual(i in u1, i in d1)
+            self.assertEqual(u0.has_key(i), d0.has_key(i))
             self.assertEqual(i in u0, i in d0)
-            with test_support.check_py3k_warnings():
-                self.assertTrue(u2.has_key(i))
-                self.assertEqual(u1.has_key(i), d1.has_key(i))
-                self.assertEqual(u0.has_key(i), d0.has_key(i))
 
         # Test update
         t = UserDict.UserDict()
@@ -127,12 +258,12 @@
         for k in u2:
             ikeys.append(k)
         keys = u2.keys()
-        self.assertEqual(set(ikeys), set(keys))
+        self.assertEqual(Set(ikeys), Set(keys))
 
         # Test setdefault
         t = UserDict.UserDict()
         self.assertEqual(t.setdefault("x", 42), 42)
-        self.assertTrue(t.has_key("x"))
+        self.assert_(t.has_key("x"))
         self.assertEqual(t.setdefault("x", 23), 42)
 
         # Test pop
@@ -148,55 +279,6 @@
         self.assertEqual(t.popitem(), ("x", 42))
         self.assertRaises(KeyError, t.popitem)
 
-    def test_missing(self):
-        # Make sure UserDict doesn't have a __missing__ method
-        self.assertEqual(hasattr(UserDict, "__missing__"), False)
-        # Test several cases:
-        # (D) subclass defines __missing__ method returning a value
-        # (E) subclass defines __missing__ method raising RuntimeError
-        # (F) subclass sets __missing__ instance variable (no effect)
-        # (G) subclass doesn't define __missing__ at a all
-        class D(UserDict.UserDict):
-            def __missing__(self, key):
-                return 42
-        d = D({1: 2, 3: 4})
-        self.assertEqual(d[1], 2)
-        self.assertEqual(d[3], 4)
-        self.assertNotIn(2, d)
-        self.assertNotIn(2, d.keys())
-        self.assertEqual(d[2], 42)
-        class E(UserDict.UserDict):
-            def __missing__(self, key):
-                raise RuntimeError(key)
-        e = E()
-        try:
-            e[42]
-        except RuntimeError, err:
-            self.assertEqual(err.args, (42,))
-        else:
-            self.fail("e[42] didn't raise RuntimeError")
-        class F(UserDict.UserDict):
-            def __init__(self):
-                # An instance variable __missing__ should have no effect
-                self.__missing__ = lambda key: None
-                UserDict.UserDict.__init__(self)
-        f = F()
-        try:
-            f[42]
-        except KeyError, err:
-            self.assertEqual(err.args, (42,))
-        else:
-            self.fail("f[42] didn't raise KeyError")
-        class G(UserDict.UserDict):
-            pass
-        g = G()
-        try:
-            g[42]
-        except KeyError, err:
-            self.assertEqual(err.args, (42,))
-        else:
-            self.fail("g[42] didn't raise KeyError")
-
 ##########################
 # Test Dict Mixin
 
@@ -205,14 +287,9 @@
 
     Used to test and demonstrate DictMixin
     """
-    def __init__(self, other=None, **kwargs):
+    def __init__(self):
         self.keylist = []
         self.valuelist = []
-        if other is not None:
-            for (key, value) in other:
-                self[key] = value
-        for (key, value) in kwargs.iteritems():
-            self[key] = value
     def __getitem__(self, key):
         try:
             i = self.keylist.index(key)
@@ -235,20 +312,9 @@
         self.valuelist.pop(i)
     def keys(self):
         return list(self.keylist)
-    def copy(self):
-        d = self.__class__()
-        for key, value in self.iteritems():
-            d[key] = value
-        return d
-    @classmethod
-    def fromkeys(cls, keys, value=None):
-        d = cls()
-        for key in keys:
-            d[key] = value
-        return d
 
-class UserDictMixinTest(mapping_tests.TestMappingProtocol):
-    type2test = SeqDict
+class UserDictMixinTest(TestMappingProtocol):
+    _tested_class = SeqDict
 
     def test_all(self):
         ## Setup test and verify working of the test class
@@ -270,12 +336,12 @@
 
         ## Now, test the DictMixin methods one by one
         # has_key
-        self.assertTrue(s.has_key(10))
-        self.assertTrue(not s.has_key(20))
+        self.assert_(s.has_key(10))
+        self.assert_(not s.has_key(20))
 
         # __contains__
-        self.assertIn(10, s)
-        self.assertNotIn(20, s)
+        self.assert_(10 in s)
+        self.assert_(20 not in s)
 
         # __iter__
         self.assertEqual([k for k in s], [10, 30])
@@ -310,7 +376,7 @@
 
         # pop
         self.assertEqual(s.pop(10), 'ten')
-        self.assertNotIn(10, s)
+        self.assert_(10 not in s)
         s[10] = 'ten'
         self.assertEqual(s.pop("x", 1), 1)
         s["x"] = 42
@@ -318,7 +384,7 @@
 
         # popitem
         k, v = s.popitem()
-        self.assertNotIn(k, s)
+        self.assert_(k not in s)
         s[k] = v
 
         # clear
@@ -341,7 +407,8 @@
         self.assertEqual(s, t)
 
 def test_main():
-    test_support.run_unittest(
+    test.test_support.run_unittest(
+        TestMappingProtocol,
         UserDictTest,
         UserDictMixinTest
     )

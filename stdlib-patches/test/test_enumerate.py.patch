--- lib-python/2.7/test/test_enumerate.py	2015-04-18 05:34:44.539111115 +0300
+++ Lib/test/test_enumerate.py	2015-04-18 05:34:31.831089839 +0300
@@ -103,7 +103,6 @@
         self.assertRaises(TypeError, self.enum, 'abc', 'a') # wrong type
         self.assertRaises(TypeError, self.enum, 'abc', 2, 3) # too many arguments
 
-    @test_support.cpython_only
     def test_tuple_reuse(self):
         # Tests an implementation detail where tuple is reused
         # whenever nothing else holds a reference to it
@@ -139,20 +138,11 @@
         for data in 'abc', range(5), tuple(enumerate('abc')), A(), xrange(1,17,5):
             self.assertEqual(list(data)[::-1], list(reversed(data)))
         self.assertRaises(TypeError, reversed, {})
-        # don't allow keyword arguments
-        self.assertRaises(TypeError, reversed, [], a=1)
-
-    def test_classic_class(self):
-        class A:
-            def __reversed__(self):
-                return [2, 1]
-        self.assertEqual(list(reversed(A())), [2, 1])
 
     def test_xrange_optimization(self):
         x = xrange(1)
         self.assertEqual(type(reversed(x)), type(iter(x)))
 
-    @test_support.cpython_only
     def test_len(self):
         # This is an implementation detail, not an interface requirement
         from test.test_iterlen import len
@@ -206,48 +196,22 @@
                 self.fail("non-callable __reversed__ didn't raise!")
         self.assertEqual(rc, sys.getrefcount(r))
 
-    def test_objmethods(self):
-        # Objects must have __len__() and __getitem__() implemented.
-        class NoLen(object):
-            def __getitem__(self): return 1
-        nl = NoLen()
-        self.assertRaises(TypeError, reversed, nl)
-
-        class NoGetItem(object):
-            def __len__(self): return 2
-        ngi = NoGetItem()
-        self.assertRaises(TypeError, reversed, ngi)
-
-
-class EnumerateStartTestCase(EnumerateTestCase):
-
-    def test_basicfunction(self):
-        e = self.enum(self.seq)
-        self.assertEqual(iter(e), e)
-        self.assertEqual(list(self.enum(self.seq)), self.res)
-
-
-class TestStart(EnumerateStartTestCase):
-
-    enum = lambda self, i: enumerate(i, start=11)
-    seq, res = 'abc', [(11, 'a'), (12, 'b'), (13, 'c')]
-
-
-class TestLongStart(EnumerateStartTestCase):
-
-    enum = lambda self, i: enumerate(i, start=sys.maxint+1)
-    seq, res = 'abc', [(sys.maxint+1,'a'), (sys.maxint+2,'b'),
-                       (sys.maxint+3,'c')]
-
 
 def test_main(verbose=None):
-    test_support.run_unittest(__name__)
+    if test_support.is_jython:
+        # XXX: CPython implementation details
+        del EnumerateTestCase.test_tuple_reuse
+        del TestReversed.test_len
+    testclasses = (EnumerateTestCase, SubclassTestCase, TestEmpty, TestBig,
+                   TestReversed)
+    test_support.run_unittest(*testclasses)
 
     # verify reference counting
+    import sys
     if verbose and hasattr(sys, "gettotalrefcount"):
         counts = [None] * 5
         for i in xrange(len(counts)):
-            test_support.run_unittest(__name__)
+            test_support.run_unittest(*testclasses)
             counts[i] = sys.gettotalrefcount()
         print counts
 

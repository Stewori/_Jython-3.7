--- lib-python/2.7/test/test_functools.py	2015-04-18 05:34:44.559111149 +0300
+++ Lib/test/test_functools.py	2015-04-18 05:34:31.835089846 +0300
@@ -1,9 +1,7 @@
 import functools
-import sys
 import unittest
 from test import test_support
 from weakref import proxy
-import pickle
 
 @staticmethod
 def PythonPartial(func, *args, **keywords):
@@ -21,10 +19,6 @@
     """capture all positional and keyword arguments"""
     return args, kw
 
-def signature(part):
-    """ return the signature of a partial object """
-    return (part.func, part.args, part.keywords, part.__dict__)
-
 class TestPartial(unittest.TestCase):
 
     thetype = functools.partial
@@ -49,14 +43,6 @@
         self.assertRaises(TypeError, setattr, p, 'args', (1, 2))
         self.assertRaises(TypeError, setattr, p, 'keywords', dict(a=1, b=2))
 
-        p = self.thetype(hex)
-        try:
-            del p.__dict__
-        except TypeError:
-            pass
-        else:
-            self.fail('partial object allowed __dict__ to be deleted')
-
     def test_argument_checking(self):
         self.assertRaises(TypeError, self.thetype)     # need at least a func arg
         try:
@@ -105,7 +91,7 @@
             p = self.thetype(capture, *args)
             expected = args + ('x',)
             got, empty = p('x')
-            self.assertTrue(expected == got and empty == {})
+            self.failUnless(expected == got and empty == {})
 
     def test_keyword(self):
         # make sure keyword arguments are captured correctly
@@ -113,29 +99,44 @@
             p = self.thetype(capture, a=a)
             expected = {'a':a,'x':None}
             empty, got = p(x=None)
-            self.assertTrue(expected == got and empty == ())
+            self.failUnless(expected == got and empty == ())
 
     def test_no_side_effects(self):
         # make sure there are no side effects that affect subsequent calls
         p = self.thetype(capture, 0, a=1)
         args1, kw1 = p(1, b=2)
-        self.assertTrue(args1 == (0,1) and kw1 == {'a':1,'b':2})
+        self.failUnless(args1 == (0,1) and kw1 == {'a':1,'b':2})
         args2, kw2 = p()
-        self.assertTrue(args2 == (0,) and kw2 == {'a':1})
+        self.failUnless(args2 == (0,) and kw2 == {'a':1})
 
     def test_error_propagation(self):
         def f(x, y):
-            x // y
+            x / y
         self.assertRaises(ZeroDivisionError, self.thetype(f, 1, 0))
         self.assertRaises(ZeroDivisionError, self.thetype(f, 1), 0)
         self.assertRaises(ZeroDivisionError, self.thetype(f), 1, 0)
         self.assertRaises(ZeroDivisionError, self.thetype(f, y=0), 1)
 
+    def test_attributes(self):
+        p = self.thetype(hex)
+        try:
+            del p.__dict__
+        except TypeError:
+            pass
+        except AttributeError:
+            #In some cases Jython raises AttributeError here.
+            pass
+        else:
+            self.fail('partial object allowed __dict__ to be deleted')
+
     def test_weakref(self):
         f = self.thetype(int, base=16)
         p = proxy(f)
         self.assertEqual(f.func, p.func)
         f = None
+        if test_support.is_jython:
+            from test_weakref import extra_collect
+            extra_collect()
         self.assertRaises(ReferenceError, getattr, p, 'func')
 
     def test_with_bound_and_unbound_methods(self):
@@ -145,29 +146,6 @@
         join = self.thetype(''.join)
         self.assertEqual(join(data), '0123456789')
 
-    def test_pickle(self):
-        f = self.thetype(signature, 'asdf', bar=True)
-        f.add_something_to__dict__ = True
-        f_copy = pickle.loads(pickle.dumps(f))
-        self.assertEqual(signature(f), signature(f_copy))
-
-    # Issue 6083: Reference counting bug
-    def test_setstate_refcount(self):
-        class BadSequence:
-            def __len__(self):
-                return 4
-            def __getitem__(self, key):
-                if key == 0:
-                    return max
-                elif key == 1:
-                    return tuple(range(1000000))
-                elif key in (2, 3):
-                    return {}
-                raise IndexError
-
-        f = self.thetype(object)
-        self.assertRaises(SystemError, f.__setstate__, BadSequence())
-
 class PartialSubclass(functools.partial):
     pass
 
@@ -175,14 +153,11 @@
 
     thetype = PartialSubclass
 
+
 class TestPythonPartial(TestPartial):
 
     thetype = PythonPartial
 
-    # the python version isn't picklable
-    def test_pickle(self): pass
-    def test_setstate_refcount(self): pass
-
 class TestUpdateWrapper(unittest.TestCase):
 
     def check_wrapper(self, wrapper, wrapped,
@@ -190,15 +165,15 @@
                       updated=functools.WRAPPER_UPDATES):
         # Check attributes were assigned
         for name in assigned:
-            self.assertTrue(getattr(wrapper, name) is getattr(wrapped, name))
+            self.failUnless(getattr(wrapper, name) == getattr(wrapped, name))
         # Check attributes were updated
         for name in updated:
             wrapper_attr = getattr(wrapper, name)
             wrapped_attr = getattr(wrapped, name)
             for key in wrapped_attr:
-                self.assertTrue(wrapped_attr[key] is wrapper_attr[key])
+                self.failUnless(wrapped_attr[key] is wrapper_attr[key])
 
-    def _default_update(self):
+    def test_default_update(self):
         def f():
             """This is a test"""
             pass
@@ -206,19 +181,10 @@
         def wrapper():
             pass
         functools.update_wrapper(wrapper, f)
-        return wrapper, f
-
-    def test_default_update(self):
-        wrapper, f = self._default_update()
         self.check_wrapper(wrapper, f)
         self.assertEqual(wrapper.__name__, 'f')
-        self.assertEqual(wrapper.attr, 'This is also a test')
-
-    @unittest.skipIf(sys.flags.optimize >= 2,
-                     "Docstrings are omitted with -O2 and above")
-    def test_default_update_doc(self):
-        wrapper, f = self._default_update()
         self.assertEqual(wrapper.__doc__, 'This is a test')
+        self.assertEqual(wrapper.attr, 'This is also a test')
 
     def test_no_update(self):
         def f():
@@ -231,7 +197,7 @@
         self.check_wrapper(wrapper, f, (), ())
         self.assertEqual(wrapper.__name__, 'wrapper')
         self.assertEqual(wrapper.__doc__, None)
-        self.assertFalse(hasattr(wrapper, 'attr'))
+        self.failIf(hasattr(wrapper, 'attr'))
 
     def test_selective_update(self):
         def f():
@@ -250,18 +216,10 @@
         self.assertEqual(wrapper.attr, 'This is a different test')
         self.assertEqual(wrapper.dict_attr, f.dict_attr)
 
-    @test_support.requires_docstrings
-    def test_builtin_update(self):
-        # Test for bug #1576241
-        def wrapper():
-            pass
-        functools.update_wrapper(wrapper, max)
-        self.assertEqual(wrapper.__name__, 'max')
-        self.assertTrue(wrapper.__doc__.startswith('max('))
 
 class TestWraps(TestUpdateWrapper):
 
-    def _default_update(self):
+    def test_default_update(self):
         def f():
             """This is a test"""
             pass
@@ -270,18 +228,9 @@
         def wrapper():
             pass
         self.check_wrapper(wrapper, f)
-        return wrapper
-
-    def test_default_update(self):
-        wrapper = self._default_update()
         self.assertEqual(wrapper.__name__, 'f')
-        self.assertEqual(wrapper.attr, 'This is also a test')
-
-    @unittest.skipIf(sys.flags.optimize >= 2,
-                     "Docstrings are omitted with -O2 and above")
-    def test_default_update_doc(self):
-        wrapper = self._default_update()
         self.assertEqual(wrapper.__doc__, 'This is a test')
+        self.assertEqual(wrapper.attr, 'This is also a test')
 
     def test_no_update(self):
         def f():
@@ -294,7 +243,7 @@
         self.check_wrapper(wrapper, f, (), ())
         self.assertEqual(wrapper.__name__, 'wrapper')
         self.assertEqual(wrapper.__doc__, None)
-        self.assertFalse(hasattr(wrapper, 'attr'))
+        self.failIf(hasattr(wrapper, 'attr'))
 
     def test_selective_update(self):
         def f():
@@ -317,169 +266,15 @@
         self.assertEqual(wrapper.dict_attr, f.dict_attr)
 
 
-class TestReduce(unittest.TestCase):
-
-    def test_reduce(self):
-        class Squares:
-
-            def __init__(self, max):
-                self.max = max
-                self.sofar = []
-
-            def __len__(self): return len(self.sofar)
-
-            def __getitem__(self, i):
-                if not 0 <= i < self.max: raise IndexError
-                n = len(self.sofar)
-                while n <= i:
-                    self.sofar.append(n*n)
-                    n += 1
-                return self.sofar[i]
-
-        reduce = functools.reduce
-        self.assertEqual(reduce(lambda x, y: x+y, ['a', 'b', 'c'], ''), 'abc')
-        self.assertEqual(
-            reduce(lambda x, y: x+y, [['a', 'c'], [], ['d', 'w']], []),
-            ['a','c','d','w']
-        )
-        self.assertEqual(reduce(lambda x, y: x*y, range(2,8), 1), 5040)
-        self.assertEqual(
-            reduce(lambda x, y: x*y, range(2,21), 1L),
-            2432902008176640000L
-        )
-        self.assertEqual(reduce(lambda x, y: x+y, Squares(10)), 285)
-        self.assertEqual(reduce(lambda x, y: x+y, Squares(10), 0), 285)
-        self.assertEqual(reduce(lambda x, y: x+y, Squares(0), 0), 0)
-        self.assertRaises(TypeError, reduce)
-        self.assertRaises(TypeError, reduce, 42, 42)
-        self.assertRaises(TypeError, reduce, 42, 42, 42)
-        self.assertEqual(reduce(42, "1"), "1") # func is never called with one item
-        self.assertEqual(reduce(42, "", "1"), "1") # func is never called with one item
-        self.assertRaises(TypeError, reduce, 42, (42, 42))
-
-class TestCmpToKey(unittest.TestCase):
-    def test_cmp_to_key(self):
-        def mycmp(x, y):
-            return y - x
-        self.assertEqual(sorted(range(5), key=functools.cmp_to_key(mycmp)),
-                         [4, 3, 2, 1, 0])
-
-    def test_hash(self):
-        def mycmp(x, y):
-            return y - x
-        key = functools.cmp_to_key(mycmp)
-        k = key(10)
-        self.assertRaises(TypeError, hash(k))
-
-class TestTotalOrdering(unittest.TestCase):
-
-    def test_total_ordering_lt(self):
-        @functools.total_ordering
-        class A:
-            def __init__(self, value):
-                self.value = value
-            def __lt__(self, other):
-                return self.value < other.value
-            def __eq__(self, other):
-                return self.value == other.value
-        self.assertTrue(A(1) < A(2))
-        self.assertTrue(A(2) > A(1))
-        self.assertTrue(A(1) <= A(2))
-        self.assertTrue(A(2) >= A(1))
-        self.assertTrue(A(2) <= A(2))
-        self.assertTrue(A(2) >= A(2))
-
-    def test_total_ordering_le(self):
-        @functools.total_ordering
-        class A:
-            def __init__(self, value):
-                self.value = value
-            def __le__(self, other):
-                return self.value <= other.value
-            def __eq__(self, other):
-                return self.value == other.value
-        self.assertTrue(A(1) < A(2))
-        self.assertTrue(A(2) > A(1))
-        self.assertTrue(A(1) <= A(2))
-        self.assertTrue(A(2) >= A(1))
-        self.assertTrue(A(2) <= A(2))
-        self.assertTrue(A(2) >= A(2))
-
-    def test_total_ordering_gt(self):
-        @functools.total_ordering
-        class A:
-            def __init__(self, value):
-                self.value = value
-            def __gt__(self, other):
-                return self.value > other.value
-            def __eq__(self, other):
-                return self.value == other.value
-        self.assertTrue(A(1) < A(2))
-        self.assertTrue(A(2) > A(1))
-        self.assertTrue(A(1) <= A(2))
-        self.assertTrue(A(2) >= A(1))
-        self.assertTrue(A(2) <= A(2))
-        self.assertTrue(A(2) >= A(2))
-
-    def test_total_ordering_ge(self):
-        @functools.total_ordering
-        class A:
-            def __init__(self, value):
-                self.value = value
-            def __ge__(self, other):
-                return self.value >= other.value
-            def __eq__(self, other):
-                return self.value == other.value
-        self.assertTrue(A(1) < A(2))
-        self.assertTrue(A(2) > A(1))
-        self.assertTrue(A(1) <= A(2))
-        self.assertTrue(A(2) >= A(1))
-        self.assertTrue(A(2) <= A(2))
-        self.assertTrue(A(2) >= A(2))
-
-    def test_total_ordering_no_overwrite(self):
-        # new methods should not overwrite existing
-        @functools.total_ordering
-        class A(str):
-            pass
-        self.assertTrue(A("a") < A("b"))
-        self.assertTrue(A("b") > A("a"))
-        self.assertTrue(A("a") <= A("b"))
-        self.assertTrue(A("b") >= A("a"))
-        self.assertTrue(A("b") <= A("b"))
-        self.assertTrue(A("b") >= A("b"))
-
-    def test_no_operations_defined(self):
-        with self.assertRaises(ValueError):
-            @functools.total_ordering
-            class A:
-                pass
-
-    def test_bug_10042(self):
-        @functools.total_ordering
-        class TestTO:
-            def __init__(self, value):
-                self.value = value
-            def __eq__(self, other):
-                if isinstance(other, TestTO):
-                    return self.value == other.value
-                return False
-            def __lt__(self, other):
-                if isinstance(other, TestTO):
-                    return self.value < other.value
-                raise TypeError
-        with self.assertRaises(TypeError):
-            TestTO(8) <= ()
 
 def test_main(verbose=None):
+    import sys
     test_classes = (
         TestPartial,
         TestPartialSubclass,
         TestPythonPartial,
         TestUpdateWrapper,
-        TestTotalOrdering,
-        TestWraps,
-        TestReduce,
+        TestWraps
     )
     test_support.run_unittest(*test_classes)
 

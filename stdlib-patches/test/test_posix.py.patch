--- lib-python/2.7/test/test_posix.py	2015-04-18 05:34:44.627111263 +0300
+++ Lib/test/test_posix.py	2015-04-18 05:34:31.855089880 +0300
@@ -9,7 +9,6 @@
 import sys
 import time
 import os
-import platform
 import pwd
 import shutil
 import stat
@@ -108,11 +107,7 @@
         # If a non-privileged user invokes it, it should fail with OSError
         # EPERM.
         if os.getuid() != 0:
-            try:
-                name = pwd.getpwuid(posix.getuid()).pw_name
-            except KeyError:
-                # the current UID may not have a pwd entry
-                raise unittest.SkipTest("need a pwd entry")
+            name = pwd.getpwuid(posix.getuid()).pw_name
             try:
                 posix.initgroups(name, 13)
             except OSError as e:
@@ -222,64 +217,26 @@
         if hasattr(posix, 'stat'):
             self.assertTrue(posix.stat(test_support.TESTFN))
 
-    def _test_all_chown_common(self, chown_func, first_param, stat_func):
+    def _test_all_chown_common(self, chown_func, first_param):
         """Common code for chown, fchown and lchown tests."""
-        def check_stat(uid, gid):
-            if stat_func is not None:
-                stat = stat_func(first_param)
-                self.assertEqual(stat.st_uid, uid)
-                self.assertEqual(stat.st_gid, gid)
-        uid = os.getuid()
-        gid = os.getgid()
-        # test a successful chown call
-        chown_func(first_param, uid, gid)
-        check_stat(uid, gid)
-        chown_func(first_param, -1, gid)
-        check_stat(uid, gid)
-        chown_func(first_param, uid, -1)
-        check_stat(uid, gid)
-
-        if uid == 0:
-            # Try an amusingly large uid/gid to make sure we handle
-            # large unsigned values.  (chown lets you use any
-            # uid/gid you like, even if they aren't defined.)
-            #
-            # This problem keeps coming up:
-            #   http://bugs.python.org/issue1747858
-            #   http://bugs.python.org/issue4591
-            #   http://bugs.python.org/issue15301
-            # Hopefully the fix in 4591 fixes it for good!
-            #
-            # This part of the test only runs when run as root.
-            # Only scary people run their tests as root.
-
-            big_value = 2**31
-            chown_func(first_param, big_value, big_value)
-            check_stat(big_value, big_value)
-            chown_func(first_param, -1, -1)
-            check_stat(big_value, big_value)
-            chown_func(first_param, uid, gid)
-            check_stat(uid, gid)
-        elif platform.system() in ('HP-UX', 'SunOS'):
-            # HP-UX and Solaris can allow a non-root user to chown() to root
-            # (issue #5113)
-            raise unittest.SkipTest("Skipping because of non-standard chown() "
-                                    "behavior")
+        if os.getuid() == 0:
+            try:
+                # Many linux distros have a nfsnobody user as MAX_UID-2
+                # that makes a good test case for signedness issues.
+                #   http://bugs.python.org/issue1747858
+                # This part of the test only runs when run as root.
+                # Only scary people run their tests as root.
+                ent = pwd.getpwnam('nfsnobody')
+                chown_func(first_param, ent.pw_uid, ent.pw_gid)
+            except KeyError:
+                pass
         else:
             # non-root cannot chown to root, raises OSError
-            self.assertRaises(OSError, chown_func, first_param, 0, 0)
-            check_stat(uid, gid)
-            self.assertRaises(OSError, chown_func, first_param, 0, -1)
-            check_stat(uid, gid)
-            if 0 not in os.getgroups():
-                self.assertRaises(OSError, chown_func, first_param, -1, 0)
-                check_stat(uid, gid)
-        # test illegal types
-        for t in str, float:
-            self.assertRaises(TypeError, chown_func, first_param, t(uid), gid)
-            check_stat(uid, gid)
-            self.assertRaises(TypeError, chown_func, first_param, uid, t(gid))
-            check_stat(uid, gid)
+            self.assertRaises(OSError, chown_func,
+                              first_param, 0, 0)
+
+        # test a successful chown call
+        chown_func(first_param, os.getuid(), os.getgid())
 
     @unittest.skipUnless(hasattr(posix, 'chown'), "test needs os.chown()")
     def test_chown(self):
@@ -289,8 +246,7 @@
 
         # re-create the file
         open(test_support.TESTFN, 'w').close()
-        self._test_all_chown_common(posix.chown, test_support.TESTFN,
-                                    getattr(posix, 'stat', None))
+        self._test_all_chown_common(posix.chown, test_support.TESTFN)
 
     @unittest.skipUnless(hasattr(posix, 'fchown'), "test needs os.fchown()")
     def test_fchown(self):
@@ -300,8 +256,7 @@
         test_file = open(test_support.TESTFN, 'w')
         try:
             fd = test_file.fileno()
-            self._test_all_chown_common(posix.fchown, fd,
-                                        getattr(posix, 'fstat', None))
+            self._test_all_chown_common(posix.fchown, fd)
         finally:
             test_file.close()
 
@@ -310,8 +265,7 @@
         os.unlink(test_support.TESTFN)
         # create a symlink
         os.symlink(_DUMMY_SYMLINK, test_support.TESTFN)
-        self._test_all_chown_common(posix.lchown, test_support.TESTFN,
-                                    getattr(posix, 'lstat', None))
+        self._test_all_chown_common(posix.lchown, test_support.TESTFN)
 
     def test_chdir(self):
         if hasattr(posix, 'chdir'):
@@ -370,16 +324,7 @@
     def _test_chflags_regular_file(self, chflags_func, target_file):
         st = os.stat(target_file)
         self.assertTrue(hasattr(st, 'st_flags'))
-
-        # ZFS returns EOPNOTSUPP when attempting to set flag UF_IMMUTABLE.
-        try:
-            chflags_func(target_file, st.st_flags | stat.UF_IMMUTABLE)
-        except OSError as err:
-            if err.errno != errno.EOPNOTSUPP:
-                raise
-            msg = 'chflag UF_IMMUTABLE not supported by underlying fs'
-            self.skipTest(msg)
-
+        chflags_func(target_file, st.st_flags | stat.UF_IMMUTABLE)
         try:
             new_st = os.stat(target_file)
             self.assertEqual(st.st_flags | stat.UF_IMMUTABLE, new_st.st_flags)
@@ -408,16 +353,8 @@
         self.teardown_files.append(_DUMMY_SYMLINK)
         dummy_symlink_st = os.lstat(_DUMMY_SYMLINK)
 
-        # ZFS returns EOPNOTSUPP when attempting to set flag UF_IMMUTABLE.
-        try:
-            posix.lchflags(_DUMMY_SYMLINK,
-                           dummy_symlink_st.st_flags | stat.UF_IMMUTABLE)
-        except OSError as err:
-            if err.errno != errno.EOPNOTSUPP:
-                raise
-            msg = 'chflag UF_IMMUTABLE not supported by underlying fs'
-            self.skipTest(msg)
-
+        posix.lchflags(_DUMMY_SYMLINK,
+                       dummy_symlink_st.st_flags | stat.UF_IMMUTABLE)
         try:
             new_testfn_st = os.stat(test_support.TESTFN)
             new_dummy_symlink_st = os.lstat(_DUMMY_SYMLINK)
@@ -428,6 +365,7 @@
         finally:
             posix.lchflags(_DUMMY_SYMLINK, dummy_symlink_st.st_flags)
 
+    @unittest.skipIf(test_support.is_jython, "FIXME: not working on Jython")
     def test_getcwd_long_pathnames(self):
         if hasattr(posix, 'getcwd'):
             dirname = 'getcwd-test-directory-0123456789abcdef-01234567890abcdef'
@@ -458,16 +396,8 @@
                             _create_and_do_getcwd(dirname, current_path_length + len(dirname) + 1)
                     except OSError as e:
                         expected_errno = errno.ENAMETOOLONG
-                        # The following platforms have quirky getcwd()
-                        # behaviour -- see issue 9185 and 15765 for
-                        # more information.
-                        quirky_platform = (
-                            'sunos' in sys.platform or
-                            'netbsd' in sys.platform or
-                            'openbsd' in sys.platform
-                        )
-                        if quirky_platform:
-                            expected_errno = errno.ERANGE
+                        if 'sunos' in sys.platform or 'openbsd' in sys.platform:
+                            expected_errno = errno.ERANGE # Issue 9185
                         self.assertEqual(e.errno, expected_errno)
                     finally:
                         os.chdir('..')
@@ -479,22 +409,15 @@
                 os.chdir(curdir)
                 shutil.rmtree(base_path)
 
+    @unittest.skipIf(test_support.is_jython, "FIXME: not working on Jython")
     @unittest.skipUnless(hasattr(os, 'getegid'), "test needs os.getegid()")
     def test_getgroups(self):
         with os.popen('id -G') as idg:
             groups = idg.read().strip()
-            ret = idg.close()
 
-        if ret != None or not groups:
+        if not groups:
             raise unittest.SkipTest("need working 'id -G'")
 
-        # Issues 16698: OS X ABIs prior to 10.6 have limits on getgroups()
-        if sys.platform == 'darwin':
-            import sysconfig
-            dt = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET') or '10.0'
-            if float(dt) < 10.6:
-                raise unittest.SkipTest("getgroups(2) is broken prior to 10.6")
-
         # 'id -G' and 'os.getgroups()' should return the same
         # groups, ignoring order and duplicates.
         # #10822 - it is implementation defined whether posix.getgroups()

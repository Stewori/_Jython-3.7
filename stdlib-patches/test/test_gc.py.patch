--- lib-python/2.7/test/test_gc.py	2015-04-18 05:34:44.559111149 +0300
+++ Lib/test/test_gc.py	2015-04-18 05:34:31.835089846 +0300
@@ -1,9 +1,10 @@
 import unittest
 from test.test_support import verbose, run_unittest
+from test import test_support
 import sys
-import time
 import gc
 import weakref
+import time
 
 try:
     import threading
@@ -42,6 +43,30 @@
 ###############################################################################
 
 class GCTests(unittest.TestCase):
+
+    @classmethod
+    def setUpClass(cls):
+        #Jython-specific block:
+        try:
+            cls.savedJythonGCFlags = gc.getJythonGCFlags()
+            gc.setMonitorGlobal(True)
+            #since gc module already exists, it would not be caught by monitorGlobal.
+            #so we have to monitor it manually:
+            gc.monitorObject(gc)
+            #the finalizer-related tests need this flag to pass in Jython:
+            gc.addJythonGCFlags(gc.DONT_FINALIZE_CYCLIC_GARBAGE)
+        except Exception:
+            pass
+
+    @classmethod
+    def tearDownClass(cls):
+        #Jython-specific block:
+        try:
+            gc.setJythonGCFlags(cls.savedJythonGCFlags)
+            gc.stopMonitoring()
+        except Exception:
+            pass
+
     def test_list(self):
         l = []
         l.append(l)
@@ -70,7 +95,6 @@
         class A:
             pass
         A.a = A
-        gc.collect()
         del A
         self.assertNotEqual(gc.collect(), 0)
 
@@ -112,7 +136,6 @@
         A.a = A()
         del A
         self.assertNotEqual(gc.collect(), 0)
-        self.assertEqual(gc.collect(), 0)
 
     def test_method(self):
         # Tricky: self.__init__ is a bound method, it references the instance.
@@ -186,7 +209,8 @@
             frame = sys._getframe()
         gc.collect()
         f()
-        self.assertEqual(gc.collect(), 1)
+        col = gc.collect()
+        self.assertEqual(col, 1)
 
     def test_saveall(self):
         # Verify that cyclic garbage like lists show up in gc.garbage if the
@@ -207,11 +231,15 @@
         del L
         gc.collect()
         gc.set_debug(debug)
-
         self.assertEqual(len(gc.garbage), 1)
         obj = gc.garbage.pop()
         self.assertEqual(id(obj), id_L)
 
+    @unittest.skipIf(test_support.is_jython,
+        '''
+        Jython neither supports disabling/enabling the gc, nor
+        setting the gc threshold.
+        ''')
     def test_del(self):
         # __del__ methods can trigger collection, make this to happen
         thresholds = gc.get_threshold()
@@ -227,6 +255,11 @@
         gc.disable()
         gc.set_threshold(*thresholds)
 
+    @unittest.skipIf(test_support.is_jython,
+        '''
+        Jython neither supports disabling/enabling the gc, nor
+        setting the gc threshold.
+        ''')
     def test_del_newclass(self):
         # __del__ methods can trigger collection, make this to happen
         thresholds = gc.get_threshold()
@@ -248,6 +281,11 @@
     # For example:
     # - disposed tuples are not freed, but reused
     # - the call to assertEqual somehow avoids building its args tuple
+    @unittest.skipIf(test_support.is_jython,
+        '''
+        Jython does not support to interrogate gc-internal
+        generation-wise counters.
+        ''')
     def test_get_count(self):
         # Avoid future allocation of method object
         assertEqual = self._baseAssertEqual
@@ -258,6 +296,11 @@
         # the dict, and the tuple returned by get_count()
         assertEqual(gc.get_count(), (2, 0, 0))
 
+    @unittest.skipIf(test_support.is_jython,
+        '''
+        Jython does not support to interrogate gc-internal
+        generation-wise counters.
+        ''')
     def test_collect_generations(self):
         # Avoid future allocation of method object
         assertEqual = self.assertEqual
@@ -270,6 +313,14 @@
         gc.collect(2)
         assertEqual(gc.get_count(), (0, 0, 0))
 
+    @unittest.skipIf(test_support.is_jython,
+        '''
+        While this test passes in Jython, it leads to internal
+        allocation failures because of the massive referencing
+        in this test. To keep the JVM-process healthy and to
+        avoid subsequent failures due to bad conditions caused
+        by this test, we skip it for now.
+        ''')
     def test_trashcan(self):
         class Ouch:
             n = 0
@@ -277,14 +328,14 @@
                 Ouch.n = Ouch.n + 1
                 if Ouch.n % 17 == 0:
                     gc.collect()
-
+     
         # "trashcan" is a hack to prevent stack overflow when deallocating
         # very deeply nested tuples etc.  It works in part by abusing the
         # type pointer and refcount fields, and that can yield horrible
         # problems when gc tries to traverse the structures.
         # If this test fails (as it does in 2.0, 2.1 and 2.2), it will
         # most likely die via segfault.
-
+     
         # Note:  In 2.3 the possibility for compiling without cyclic gc was
         # removed, and that in turn allows the trashcan mechanism to work
         # via much simpler means (e.g., it never abuses the type pointer or
@@ -303,21 +354,33 @@
             v = {}
             for i in range(N):
                 v = {1: v, 2: Ouch()}
-        gc.disable()
+        try:
+            gc.disable()
+        except NotImplementedError:
+            #i.e. Jython is running (or other non-CPython interpreter without gc-disabling)
+            pass
 
+    @unittest.skipIf(test_support.is_jython,
+        '''
+        Jython does not have a trashcan mechanism.
+        This test should still not fail but currently does.
+        This is because the massive referencing in this test brings
+        sync gc emulation to its limit. Making this more robust is
+        of no priority for now.
+        ''')
     @unittest.skipUnless(threading, "test meaningless on builds without threads")
     def test_trashcan_threads(self):
         # Issue #13992: trashcan mechanism should be thread-safe
         NESTING = 60
         N_THREADS = 2
-
+     
         def sleeper_gen():
             """A generator that releases the GIL when closed or dealloc'ed."""
             try:
                 yield
             finally:
                 time.sleep(0.000001)
-
+     
         class C(list):
             # Appending to a list is atomic, which avoids the use of a lock.
             inits = []
@@ -335,7 +398,7 @@
                 next(g)
                 # Now that __del__ is finished, subtype_dealloc will proceed
                 # to call list_dealloc, which also uses the trashcan mechanism.
-
+     
         def make_nested():
             """Create a sufficiently nested container object so that the
             trashcan mechanism is invoked when deallocating it."""
@@ -343,12 +406,12 @@
             for i in range(NESTING):
                 x = [C([x])]
             del x
-
+     
         def run_thread():
             """Exercise make_nested() in a loop."""
             while not exit:
                 make_nested()
-
+     
         old_checkinterval = sys.getcheckinterval()
         sys.setcheckinterval(3)
         try:
@@ -359,13 +422,13 @@
                 threads.append(t)
             for t in threads:
                 t.start()
-            time.sleep(1.0)
+            time.sleep(0.01)
             exit = True
             for t in threads:
                 t.join()
         finally:
+            pass
             sys.setcheckinterval(old_checkinterval)
-        gc.collect()
         self.assertEqual(len(C.inits), len(C.dels))
 
     def test_boom(self):
@@ -517,7 +580,6 @@
 
     def test_bug1055820b(self):
         # Corresponds to temp2b.py in the bug report.
-
         ouch = []
         def callback(ignored):
             ouch[:] = [wr() for wr in WRs]
@@ -539,6 +601,10 @@
             # would be damaged, with an empty __dict__.
             self.assertEqual(x, None)
 
+@unittest.skipIf(test_support.is_jython,
+    '''
+    GCTogglingTests are neither relevant nor applicable for Jython.
+    ''')
 class GCTogglingTests(unittest.TestCase):
     def setUp(self):
         gc.enable()
@@ -685,8 +751,11 @@
 
 def test_main():
     enabled = gc.isenabled()
-    gc.disable()
-    assert not gc.isenabled()
+    try:
+        gc.disable()
+        assert not gc.isenabled()
+    except  NotImplementedError:
+        pass
     debug = gc.get_debug()
     gc.set_debug(debug & ~gc.DEBUG_LEAK) # this test is supposed to leak
 
@@ -705,4 +774,4 @@
             gc.disable()
 
 if __name__ == "__main__":
-    test_main()
+    unittest.main()

--- lib-python/2.7/test/test_dircache.py	2015-04-18 05:34:44.519111082 +0300
+++ Lib/test/test_dircache.py	2015-04-18 05:34:31.831089839 +0300
@@ -4,9 +4,8 @@
 """
 
 import unittest
-from test.test_support import run_unittest, import_module
-dircache = import_module('dircache', deprecated=True)
-import os, time, sys, tempfile
+from test.test_support import is_jython, run_unittest, TESTFN
+import dircache, os, time, sys, tempfile
 
 
 class DircacheTests(unittest.TestCase):
@@ -35,25 +34,26 @@
     def test_listdir(self):
         ## SUCCESSFUL CASES
         entries = dircache.listdir(self.tempdir)
-        self.assertEqual(entries, [])
+        self.assertEquals(entries, [])
 
         # Check that cache is actually caching, not just passing through.
-        self.assertTrue(dircache.listdir(self.tempdir) is entries)
+        self.assert_(dircache.listdir(self.tempdir) is entries)
 
         # Directories aren't "files" on Windows, and directory mtime has
         # nothing to do with when files under a directory get created.
         # That is, this test can't possibly work under Windows -- dircache
         # is only good for capturing a one-shot snapshot there.
 
-        if sys.platform[:3] not in ('win', 'os2'):
+        if (sys.platform[:3] not in ('win', 'os2') and
+            (not is_jython or os._name != 'nt')):
             # Sadly, dircache has the same granularity as stat.mtime, and so
             # can't notice any changes that occurred within 1 sec of the last
             # time it examined a directory.
             time.sleep(1)
             self.writeTemp("test1")
             entries = dircache.listdir(self.tempdir)
-            self.assertEqual(entries, ['test1'])
-            self.assertTrue(dircache.listdir(self.tempdir) is entries)
+            self.assertEquals(entries, ['test1'])
+            self.assert_(dircache.listdir(self.tempdir) is entries)
 
         ## UNSUCCESSFUL CASES
         self.assertRaises(OSError, dircache.listdir, self.tempdir+"_nonexistent")
@@ -63,14 +63,11 @@
         self.mkdirTemp("A")
         lst = ['A', 'test2', 'test_nonexistent']
         dircache.annotate(self.tempdir, lst)
-        self.assertEqual(lst, ['A/', 'test2', 'test_nonexistent'])
+        self.assertEquals(lst, ['A/', 'test2', 'test_nonexistent'])
 
 
 def test_main():
-    try:
-        run_unittest(DircacheTests)
-    finally:
-        dircache.reset()
+    run_unittest(DircacheTests)
 
 
 if __name__ == "__main__":

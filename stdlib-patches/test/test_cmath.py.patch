--- lib-python/2.7/test/test_cmath.py	2015-04-18 05:34:44.479111016 +0300
+++ Lib/test/test_cmath.py	2015-04-18 05:34:31.823089826 +0300
@@ -1,4 +1,4 @@
-from test.test_support import run_unittest
+from test.test_support import run_unittest, verbose
 from test.test_math import parse_testfile, test_file
 import unittest
 import cmath, math
@@ -243,8 +243,12 @@
         unit_interval = test_values + [-x for x in test_values] + \
             [0., 1., -1.]
 
+        # test_values for acosh, atanh
+        ge_one = [1.] + [1./x for x in test_values]
+        unit_open = test_values + [-x for x in test_values] + [0.]
+
         # test_values for log, log10, sqrt
-        positive = test_values + [1.] + [1./x for x in test_values]
+        positive = test_values + ge_one
         nonnegative = [0.] + positive
 
         # test_values for functions defined on the whole real line
@@ -254,6 +258,9 @@
             'acos' : unit_interval,
             'asin' : unit_interval,
             'atan' : real_line,
+            'acosh' : ge_one,           # Jython added
+            'asinh' : real_line,        # Jython added
+            'atanh' : unit_open,        # Jython added
             'cos' : real_line,
             'cosh' : real_line,
             'exp' : real_line,
@@ -282,7 +289,7 @@
 
     def test_specific_values(self):
         if not float.__getformat__("double").startswith("IEEE"):
-            return
+            self.skipTest('needs IEEE double')
 
         def rect_complex(z):
             """Wrapped version of rect that accepts a complex number instead of
@@ -294,62 +301,88 @@
             two floats."""
             return complex(*polar(z))
 
+        raised_fmt = '\n' \
+                '{}: {}(complex({!r}, {!r}))\n' \
+                'Raised: {!r}\n' \
+                'Expected: complex({!r}, {!r})'
+        not_raised_fmt = '\n' \
+                '{} not raised in test {}: {}(complex({!r}, {!r}))\n' \
+                'Received: complex({!r}, {!r})'
+        value_fmt = '\n' \
+                '{}: {}(complex({!r}, {!r}))\n' \
+                'Expected: complex({!r}, {!r})\n' \
+                'Received: complex({!r}, {!r})\n' \
+                'Received value insufficiently close to expected value.'
+        failures = 0
+
         for id, fn, ar, ai, er, ei, flags in parse_testfile(test_file):
             arg = complex(ar, ai)
-            expected = complex(er, ei)
             if fn == 'rect':
                 function = rect_complex
             elif fn == 'polar':
                 function = polar_complex
             else:
                 function = getattr(cmath, fn)
-            if 'divide-by-zero' in flags or 'invalid' in flags:
-                try:
-                    actual = function(arg)
-                except ValueError:
-                    continue
-                else:
-                    self.fail('ValueError not raised in test '
-                          '{}: {}(complex({!r}, {!r}))'.format(id, fn, ar, ai))
 
-            if 'overflow' in flags:
-                try:
+            try:
+                # Catch and count failing test cases locally
+                if 'divide-by-zero' in flags or 'invalid' in flags:
+                    try:
+                        actual = function(arg)
+                    except ValueError:
+                        pass
+                    else:
+                        failures += 1
+                        self.fail(not_raised_fmt.format('ValueError',
+                                id, fn, ar, ai, actual.real, actual.imag))
+
+                elif 'overflow' in flags:
+                    try:
+                        actual = function(arg)
+                    except OverflowError:
+                        pass
+                    else:
+                        failures += 1
+                        self.fail(not_raised_fmt.format('OverflowError',
+                                id, fn, ar, ai, actual.real, actual.imag))
+
+                else :
                     actual = function(arg)
-                except OverflowError:
-                    continue
-                else:
-                    self.fail('OverflowError not raised in test '
-                          '{}: {}(complex({!r}, {!r}))'.format(id, fn, ar, ai))
-
-            actual = function(arg)
-
-            if 'ignore-real-sign' in flags:
-                actual = complex(abs(actual.real), actual.imag)
-                expected = complex(abs(expected.real), expected.imag)
-            if 'ignore-imag-sign' in flags:
-                actual = complex(actual.real, abs(actual.imag))
-                expected = complex(expected.real, abs(expected.imag))
-
-            # for the real part of the log function, we allow an
-            # absolute error of up to 2e-15.
-            if fn in ('log', 'log10'):
-                real_abs_err = 2e-15
-            else:
-                real_abs_err = 5e-323
 
-            error_message = (
-                '{}: {}(complex({!r}, {!r}))\n'
-                'Expected: complex({!r}, {!r})\n'
-                'Received: complex({!r}, {!r})\n'
-                'Received value insufficiently close to expected value.'
-                ).format(id, fn, ar, ai,
-                     expected.real, expected.imag,
-                     actual.real, actual.imag)
-            self.rAssertAlmostEqual(expected.real, actual.real,
-                                        abs_err=real_abs_err,
-                                        msg=error_message)
-            self.rAssertAlmostEqual(expected.imag, actual.imag,
-                                        msg=error_message)
+                    # Make sign of expected conform to actual, where ignored.
+                    exr, exi = er, ei
+                    if 'ignore-real-sign' in flags:
+                        exr = math.copysign(er, actual.real)
+                    if 'ignore-imag-sign' in flags:
+                        exi = math.copysign(ei, actual.imag)
+
+                    # for the real part of the log function, we allow an
+                    # absolute error of up to 2e-15.
+                    if fn in ('log', 'log10'):
+                        real_abs_err = 2e-15
+                    else:
+                        real_abs_err = 5e-323
+
+                    error_message = value_fmt.format(id, fn, ar, ai, er, ei,
+                                            actual.real, actual.imag)
+                    self.rAssertAlmostEqual(exr, actual.real,
+                                            abs_err=real_abs_err,
+                                            msg=error_message)
+                    self.rAssertAlmostEqual(exi, actual.imag,
+                                            msg=error_message)
+
+            except AssertionError as ex:
+                failures += 1
+                if verbose :
+                    print(ex)
+            except BaseException as ex:
+                failures += 1
+                if verbose :
+                    print(raised_fmt.format(id, fn, ar, ai, ex, er, ei))
+
+        if failures :
+            self.fail('{} discrepancies'.format(failures))
+
 
     def assertCISEqual(self, a, b):
         eps = 1E-7

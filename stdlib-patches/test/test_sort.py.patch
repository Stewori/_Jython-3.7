--- lib-python/2.7/test/test_sort.py	2015-04-18 05:34:44.655111309 +0300
+++ Lib/test/test_sort.py	2015-04-18 05:34:31.863089894 +0300
@@ -2,6 +2,10 @@
 import random
 import sys
 import unittest
+try:
+    import java
+except ImportError:
+    pass
 
 verbose = test_support.verbose
 nerrors = 0
@@ -100,8 +104,15 @@
                 print "    Checking against an insane comparison function."
                 print "        If the implementation isn't careful, this may segfault."
             s = x[:]
-            s.sort(lambda a, b:  int(random.random() * 3) - 1)
-            check("an insane function left some permutation", x, s)
+
+            if test_support.is_jython:
+                try:
+                    s.sort(lambda a, b:  int(random.random() * 3) - 1)
+                except java.lang.IllegalArgumentException:
+                    pass
+            else:
+                s.sort(lambda a, b:  int(random.random() * 3) - 1)
+                check("an insane function left some permutation", x, s)
 
             x = [Complains(i) for i in x]
             s = x[:]
@@ -209,7 +220,12 @@
         dup = data[:]
         self.assertRaises(ZeroDivisionError, data.sort, None, lambda x: 1 // x)
         self.assertEqual(data, dup)
-
+ 
+    # for jython, we have a different storage mechanism for this in our
+    # implementation of MergeState; given that this is likely to go away,
+    # this doesn't seem so important
+    @unittest.skipIf(test_support.is_jython,
+            "Jython has a different implementation of MergeSort")
     def test_key_with_mutation(self):
         data = range(10)
         def k(x):
@@ -217,7 +233,11 @@
             data[:] = range(20)
             return x
         self.assertRaises(ValueError, data.sort, key=k)
-
+ 
+    # The function passed to the "key" argument changes the data upon which
+    # sort is invoked.  It can not be checked if that function changes data as
+    # long as it is invoked(e.g. __del__ in SortKiller). so skipping for now.
+    @unittest.skipIf(test_support.is_jython, "Doesn't work for Jython")
     def test_key_with_mutating_del(self):
         data = range(10)
         class SortKiller(object):
@@ -228,6 +248,10 @@
                 data[:] = range(20)
         self.assertRaises(ValueError, data.sort, key=SortKiller)
 
+    # The function passed to the "key" argument changes the data upon which
+    # sort is invoked.  It can not be checked if that function changes data as
+    # long as it is invoked(e.g. __del__ in SortKiller). so skipping for now.
+    @unittest.skipIf(test_support.is_jython, "Doesn't work for Jython")
     def test_key_with_mutating_del_and_exception(self):
         data = range(10)
         ## dup = data[:]

--- lib-python/2.7/test/test_copy.py	2015-04-18 05:34:44.499111048 +0300
+++ Lib/test/test_copy.py	2015-04-18 05:34:31.827089833 +0300
@@ -2,7 +2,6 @@
 
 import copy
 import copy_reg
-import weakref
 
 import unittest
 from test import test_support
@@ -12,8 +11,8 @@
     # Attempt full line coverage of copy.py from top to bottom
 
     def test_exceptions(self):
-        self.assertTrue(copy.Error is copy.error)
-        self.assertTrue(issubclass(copy.Error, Exception))
+        self.assert_(copy.Error is copy.error)
+        self.assert_(issubclass(copy.Error, Exception))
 
     # The copy() method
 
@@ -54,7 +53,7 @@
                 raise test_support.TestFailed, "shouldn't call this"
         x = C()
         y = copy.copy(x)
-        self.assertTrue(y is x)
+        self.assert_(y is x)
 
     def test_copy_reduce(self):
         class C(object):
@@ -62,7 +61,7 @@
                 return ""
         x = C()
         y = copy.copy(x)
-        self.assertTrue(y is x)
+        self.assert_(y is x)
 
     def test_copy_cant(self):
         class C(object):
@@ -86,7 +85,7 @@
                  "hello", u"hello\u1234", f.func_code,
                  NewStyle, xrange(10), Classic, max]
         for x in tests:
-            self.assertTrue(copy.copy(x) is x, repr(x))
+            self.assert_(copy.copy(x) is x, repr(x))
 
     def test_copy_list(self):
         x = [1, 2, 3]
@@ -180,9 +179,9 @@
         x = [x, x]
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y[0] is not x[0])
-        self.assertTrue(y[0] is y[1])
+        self.assert_(y is not x)
+        self.assert_(y[0] is not x[0])
+        self.assert_(y[0] is y[1])
 
     def test_deepcopy_issubclass(self):
         # XXX Note: there's no way to test the TypeError coming out of
@@ -227,7 +226,7 @@
                 raise test_support.TestFailed, "shouldn't call this"
         x = C()
         y = copy.deepcopy(x)
-        self.assertTrue(y is x)
+        self.assert_(y is x)
 
     def test_deepcopy_reduce(self):
         class C(object):
@@ -235,7 +234,7 @@
                 return ""
         x = C()
         y = copy.deepcopy(x)
-        self.assertTrue(y is x)
+        self.assert_(y is x)
 
     def test_deepcopy_cant(self):
         class C(object):
@@ -259,61 +258,64 @@
                  "hello", u"hello\u1234", f.func_code,
                  NewStyle, xrange(10), Classic, max]
         for x in tests:
-            self.assertTrue(copy.deepcopy(x) is x, repr(x))
+            self.assert_(copy.deepcopy(x) is x, repr(x))
 
     def test_deepcopy_list(self):
         x = [[1, 2], 3]
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(x is not y)
-        self.assertTrue(x[0] is not y[0])
+        self.assert_(x is not y)
+        self.assert_(x[0] is not y[0])
 
+    # modified for Jython
     def test_deepcopy_reflexive_list(self):
         x = []
         x.append(x)
         y = copy.deepcopy(x)
-        self.assertRaises(RuntimeError, cmp, y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y[0] is y)
+        self.assertEqual(y, x)
+        self.assert_(y is not x)
+        self.assert_(y[0] is y)
         self.assertEqual(len(y), 1)
 
     def test_deepcopy_tuple(self):
         x = ([1, 2], 3)
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(x is not y)
-        self.assertTrue(x[0] is not y[0])
+        self.assert_(x is not y)
+        self.assert_(x[0] is not y[0])
 
+    # modified for Jython
     def test_deepcopy_reflexive_tuple(self):
         x = ([],)
         x[0].append(x)
         y = copy.deepcopy(x)
-        self.assertRaises(RuntimeError, cmp, y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y[0] is not x[0])
-        self.assertTrue(y[0][0] is y)
+        self.assertEqual(y, x)
+        self.assert_(y is not x)
+        self.assert_(y[0] is not x[0])
+        self.assert_(y[0][0] is y)
 
     def test_deepcopy_dict(self):
         x = {"foo": [1, 2], "bar": 3}
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(x is not y)
-        self.assertTrue(x["foo"] is not y["foo"])
+        self.assert_(x is not y)
+        self.assert_(x["foo"] is not y["foo"])
 
+    # modified for Jython
     def test_deepcopy_reflexive_dict(self):
         x = {}
         x['foo'] = x
         y = copy.deepcopy(x)
-        self.assertRaises(RuntimeError, cmp, y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y['foo'] is y)
+        self.assertEqual(y, x)
+        self.assert_(y is not x)
+        self.assert_(y['foo'] is y)
         self.assertEqual(len(y), 1)
 
     def test_deepcopy_keepalive(self):
         memo = {}
         x = 42
         y = copy.deepcopy(x, memo)
-        self.assertTrue(memo[id(x)] is x)
+        self.assert_(memo[id(x)] is x)
 
     def test_deepcopy_inst_vanilla(self):
         class C:
@@ -324,7 +326,7 @@
         x = C([42])
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y.foo is not x.foo)
 
     def test_deepcopy_inst_deepcopy(self):
         class C:
@@ -337,8 +339,8 @@
         x = C([42])
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y is not x)
+        self.assert_(y.foo is not x.foo)
 
     def test_deepcopy_inst_getinitargs(self):
         class C:
@@ -351,8 +353,8 @@
         x = C([42])
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y is not x)
+        self.assert_(y.foo is not x.foo)
 
     def test_deepcopy_inst_getstate(self):
         class C:
@@ -365,8 +367,8 @@
         x = C([42])
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y is not x)
+        self.assert_(y.foo is not x.foo)
 
     def test_deepcopy_inst_setstate(self):
         class C:
@@ -379,8 +381,8 @@
         x = C([42])
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y is not x)
+        self.assert_(y.foo is not x.foo)
 
     def test_deepcopy_inst_getstate_setstate(self):
         class C:
@@ -395,8 +397,8 @@
         x = C([42])
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y is not x)
+        self.assert_(y.foo is not x.foo)
 
     def test_deepcopy_reflexive_inst(self):
         class C:
@@ -404,8 +406,8 @@
         x = C()
         x.foo = x
         y = copy.deepcopy(x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y.foo is y)
+        self.assert_(y is not x)
+        self.assert_(y.foo is y)
 
     # _reconstruct()
 
@@ -415,9 +417,9 @@
                 return ""
         x = C()
         y = copy.copy(x)
-        self.assertTrue(y is x)
+        self.assert_(y is x)
         y = copy.deepcopy(x)
-        self.assertTrue(y is x)
+        self.assert_(y is x)
 
     def test_reconstruct_nostate(self):
         class C(object):
@@ -426,9 +428,9 @@
         x = C()
         x.foo = 42
         y = copy.copy(x)
-        self.assertTrue(y.__class__ is x.__class__)
+        self.assert_(y.__class__ is x.__class__)
         y = copy.deepcopy(x)
-        self.assertTrue(y.__class__ is x.__class__)
+        self.assert_(y.__class__ is x.__class__)
 
     def test_reconstruct_state(self):
         class C(object):
@@ -443,7 +445,7 @@
         self.assertEqual(y, x)
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y.foo is not x.foo)
 
     def test_reconstruct_state_setstate(self):
         class C(object):
@@ -460,7 +462,7 @@
         self.assertEqual(y, x)
         y = copy.deepcopy(x)
         self.assertEqual(y, x)
-        self.assertTrue(y.foo is not x.foo)
+        self.assert_(y.foo is not x.foo)
 
     def test_reconstruct_reflexive(self):
         class C(object):
@@ -468,8 +470,8 @@
         x = C()
         x.foo = x
         y = copy.deepcopy(x)
-        self.assertTrue(y is not x)
-        self.assertTrue(y.foo is y)
+        self.assert_(y is not x)
+        self.assert_(y.foo is y)
 
     # Additions for Python 2.3 and pickle protocol 2
 
@@ -484,12 +486,12 @@
         x = C([[1, 2], 3])
         y = copy.copy(x)
         self.assertEqual(x, y)
-        self.assertTrue(x is not y)
-        self.assertTrue(x[0] is y[0])
+        self.assert_(x is not y)
+        self.assert_(x[0] is y[0])
         y = copy.deepcopy(x)
         self.assertEqual(x, y)
-        self.assertTrue(x is not y)
-        self.assertTrue(x[0] is not y[0])
+        self.assert_(x is not y)
+        self.assert_(x[0] is not y[0])
 
     def test_reduce_5tuple(self):
         class C(dict):
@@ -502,12 +504,12 @@
         x = C([("foo", [1, 2]), ("bar", 3)])
         y = copy.copy(x)
         self.assertEqual(x, y)
-        self.assertTrue(x is not y)
-        self.assertTrue(x["foo"] is y["foo"])
+        self.assert_(x is not y)
+        self.assert_(x["foo"] is y["foo"])
         y = copy.deepcopy(x)
         self.assertEqual(x, y)
-        self.assertTrue(x is not y)
-        self.assertTrue(x["foo"] is not y["foo"])
+        self.assert_(x is not y)
+        self.assert_(x["foo"] is not y["foo"])
 
     def test_copy_slots(self):
         class C(object):
@@ -515,7 +517,7 @@
         x = C()
         x.foo = [42]
         y = copy.copy(x)
-        self.assertTrue(x.foo is y.foo)
+        self.assert_(x.foo is y.foo)
 
     def test_deepcopy_slots(self):
         class C(object):
@@ -524,27 +526,7 @@
         x.foo = [42]
         y = copy.deepcopy(x)
         self.assertEqual(x.foo, y.foo)
-        self.assertTrue(x.foo is not y.foo)
-
-    def test_deepcopy_dict_subclass(self):
-        class C(dict):
-            def __init__(self, d=None):
-                if not d:
-                    d = {}
-                self._keys = list(d.keys())
-                dict.__init__(self, d)
-            def __setitem__(self, key, item):
-                dict.__setitem__(self, key, item)
-                if key not in self._keys:
-                    self._keys.append(key)
-        x = C(d={'foo':0})
-        y = copy.deepcopy(x)
-        self.assertEqual(x, y)
-        self.assertEqual(x._keys, y._keys)
-        self.assertTrue(x is not y)
-        x['bar'] = 1
-        self.assertNotEqual(x, y)
-        self.assertNotEqual(x._keys, y._keys)
+        self.assert_(x.foo is not y.foo)
 
     def test_copy_list_subclass(self):
         class C(list):
@@ -554,8 +536,8 @@
         y = copy.copy(x)
         self.assertEqual(list(x), list(y))
         self.assertEqual(x.foo, y.foo)
-        self.assertTrue(x[0] is y[0])
-        self.assertTrue(x.foo is y.foo)
+        self.assert_(x[0] is y[0])
+        self.assert_(x.foo is y.foo)
 
     def test_deepcopy_list_subclass(self):
         class C(list):
@@ -565,8 +547,8 @@
         y = copy.deepcopy(x)
         self.assertEqual(list(x), list(y))
         self.assertEqual(x.foo, y.foo)
-        self.assertTrue(x[0] is not y[0])
-        self.assertTrue(x.foo is not y.foo)
+        self.assert_(x[0] is not y[0])
+        self.assert_(x.foo is not y.foo)
 
     def test_copy_tuple_subclass(self):
         class C(tuple):
@@ -583,8 +565,8 @@
         self.assertEqual(tuple(x), ([1, 2], 3))
         y = copy.deepcopy(x)
         self.assertEqual(tuple(y), ([1, 2], 3))
-        self.assertTrue(x is not y)
-        self.assertTrue(x[0] is not y[0])
+        self.assert_(x is not y)
+        self.assert_(x[0] is not y[0])
 
     def test_getstate_exc(self):
         class EvilState(object):
@@ -606,103 +588,6 @@
         bar = lambda: None
         self.assertEqual(copy.deepcopy(bar), bar)
 
-    def _check_weakref(self, _copy):
-        class C(object):
-            pass
-        obj = C()
-        x = weakref.ref(obj)
-        y = _copy(x)
-        self.assertTrue(y is x)
-        del obj
-        y = _copy(x)
-        self.assertTrue(y is x)
-
-    def test_copy_weakref(self):
-        self._check_weakref(copy.copy)
-
-    def test_deepcopy_weakref(self):
-        self._check_weakref(copy.deepcopy)
-
-    def _check_copy_weakdict(self, _dicttype):
-        class C(object):
-            pass
-        a, b, c, d = [C() for i in xrange(4)]
-        u = _dicttype()
-        u[a] = b
-        u[c] = d
-        v = copy.copy(u)
-        self.assertFalse(v is u)
-        self.assertEqual(v, u)
-        self.assertEqual(v[a], b)
-        self.assertEqual(v[c], d)
-        self.assertEqual(len(v), 2)
-        del c, d
-        self.assertEqual(len(v), 1)
-        x, y = C(), C()
-        # The underlying containers are decoupled
-        v[x] = y
-        self.assertNotIn(x, u)
-
-    def test_copy_weakkeydict(self):
-        self._check_copy_weakdict(weakref.WeakKeyDictionary)
-
-    def test_copy_weakvaluedict(self):
-        self._check_copy_weakdict(weakref.WeakValueDictionary)
-
-    def test_deepcopy_weakkeydict(self):
-        class C(object):
-            def __init__(self, i):
-                self.i = i
-        a, b, c, d = [C(i) for i in xrange(4)]
-        u = weakref.WeakKeyDictionary()
-        u[a] = b
-        u[c] = d
-        # Keys aren't copied, values are
-        v = copy.deepcopy(u)
-        self.assertNotEqual(v, u)
-        self.assertEqual(len(v), 2)
-        self.assertFalse(v[a] is b)
-        self.assertFalse(v[c] is d)
-        self.assertEqual(v[a].i, b.i)
-        self.assertEqual(v[c].i, d.i)
-        del c
-        self.assertEqual(len(v), 1)
-
-    def test_deepcopy_weakvaluedict(self):
-        class C(object):
-            def __init__(self, i):
-                self.i = i
-        a, b, c, d = [C(i) for i in xrange(4)]
-        u = weakref.WeakValueDictionary()
-        u[a] = b
-        u[c] = d
-        # Keys are copied, values aren't
-        v = copy.deepcopy(u)
-        self.assertNotEqual(v, u)
-        self.assertEqual(len(v), 2)
-        (x, y), (z, t) = sorted(v.items(), key=lambda pair: pair[0].i)
-        self.assertFalse(x is a)
-        self.assertEqual(x.i, a.i)
-        self.assertTrue(y is b)
-        self.assertFalse(z is c)
-        self.assertEqual(z.i, c.i)
-        self.assertTrue(t is d)
-        del x, y, z, t
-        del d
-        self.assertEqual(len(v), 1)
-
-    def test_deepcopy_bound_method(self):
-        class Foo(object):
-            def m(self):
-                pass
-        f = Foo()
-        f.b = f.m
-        g = copy.deepcopy(f)
-        self.assertEqual(g.m, g.b)
-        self.assertTrue(g.b.im_self is g)
-        g.b()
-
-
 def global_foo(x, y): return x+y
 
 def test_main():

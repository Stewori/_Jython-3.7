--- lib-python/2.7/test/test_marshal.py	2015-04-18 05:34:44.599111215 +0300
+++ Lib/test/test_marshal.py	2015-04-18 05:34:31.847089867 +0300
@@ -1,12 +1,25 @@
 #!/usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 
+from __future__ import with_statement
 from test import test_support
 import marshal
 import sys
 import unittest
 import os
 
+# the original had incorrect semantics for non-refcounting GCs:
+#                marshal.dump(expected, file(test_support.TESTFN, "wb"))
+#                got = marshal.load(file(test_support.TESTFN, "rb"))
+
+def roundtrip(item):
+    with open(test_support.TESTFN, "wb") as test_file:
+        marshal.dump(item, test_file)
+    with open(test_support.TESTFN, "rb") as test_file:
+        got = marshal.load(test_file)
+    return got
+
+
 class IntTestCase(unittest.TestCase):
     def test_ints(self):
         # Test the full range of Python ints.
@@ -16,9 +29,7 @@
                 s = marshal.dumps(expected)
                 got = marshal.loads(s)
                 self.assertEqual(expected, got)
-                marshal.dump(expected, file(test_support.TESTFN, "wb"))
-                got = marshal.load(file(test_support.TESTFN, "rb"))
-                self.assertEqual(expected, got)
+                self.assertEqual(expected, roundtrip(expected))
             n = n >> 1
         os.unlink(test_support.TESTFN)
 
@@ -51,8 +62,7 @@
             new = marshal.loads(marshal.dumps(b))
             self.assertEqual(b, new)
             self.assertEqual(type(b), type(new))
-            marshal.dump(b, file(test_support.TESTFN, "wb"))
-            new = marshal.load(file(test_support.TESTFN, "rb"))
+            new = roundtrip(b)
             self.assertEqual(b, new)
             self.assertEqual(type(b), type(new))
 
@@ -67,8 +77,7 @@
                 s = marshal.dumps(f)
                 got = marshal.loads(s)
                 self.assertEqual(f, got)
-                marshal.dump(f, file(test_support.TESTFN, "wb"))
-                got = marshal.load(file(test_support.TESTFN, "rb"))
+                got = roundtrip(f)
                 self.assertEqual(f, got)
             n /= 123.4567
 
@@ -92,15 +101,18 @@
 
                 s = marshal.dumps(f, 1)
                 got = marshal.loads(s)
-                self.assertEqual(f, got)
+                if test_support.is_jython:
+                    self.assertAlmostEqual(f, got)
+                else:
+                    self.assertEqual(f, got)
 
-                marshal.dump(f, file(test_support.TESTFN, "wb"))
-                got = marshal.load(file(test_support.TESTFN, "rb"))
+                got = roundtrip(f)
                 self.assertEqual(f, got)
 
-                marshal.dump(f, file(test_support.TESTFN, "wb"), 1)
-                got = marshal.load(file(test_support.TESTFN, "rb"))
-                self.assertEqual(f, got)
+                # XXX - not certain what this extra arg to dump is!
+                #marshal.dump(f, file(test_support.TESTFN, "wb"), 1)
+                #got = marshal.load(file(test_support.TESTFN, "rb"))
+                #self.assertEqual(f, got)
             n *= 123.4567
         os.unlink(test_support.TESTFN)
 
@@ -110,8 +122,7 @@
             new = marshal.loads(marshal.dumps(s))
             self.assertEqual(s, new)
             self.assertEqual(type(s), type(new))
-            marshal.dump(s, file(test_support.TESTFN, "wb"))
-            new = marshal.load(file(test_support.TESTFN, "rb"))
+            new = roundtrip(s)
             self.assertEqual(s, new)
             self.assertEqual(type(s), type(new))
         os.unlink(test_support.TESTFN)
@@ -121,23 +132,20 @@
             new = marshal.loads(marshal.dumps(s))
             self.assertEqual(s, new)
             self.assertEqual(type(s), type(new))
-            marshal.dump(s, file(test_support.TESTFN, "wb"))
-            new = marshal.load(file(test_support.TESTFN, "rb"))
+            new = roundtrip(s)
             self.assertEqual(s, new)
             self.assertEqual(type(s), type(new))
         os.unlink(test_support.TESTFN)
 
-    def test_buffer(self):
-        for s in ["", "Andrè Previn", "abc", " "*10000]:
-            with test_support.check_py3k_warnings(("buffer.. not supported",
-                                                     DeprecationWarning)):
+    if not test_support.is_jython:
+        def test_buffer(self):
+            for s in ["", "Andrè Previn", "abc", " "*10000]:
                 b = buffer(s)
-            new = marshal.loads(marshal.dumps(b))
-            self.assertEqual(s, new)
-            marshal.dump(b, file(test_support.TESTFN, "wb"))
-            new = marshal.load(file(test_support.TESTFN, "rb"))
-            self.assertEqual(s, new)
-        os.unlink(test_support.TESTFN)
+                new = marshal.loads(marshal.dumps(b))
+                self.assertEqual(s, new)
+                new = roundtrip(b)
+                self.assertEqual(s, new)
+            os.unlink(test_support.TESTFN)
 
 class ExceptionTestCase(unittest.TestCase):
     def test_exceptions(self):
@@ -145,10 +153,11 @@
         self.assertEqual(StopIteration, new)
 
 class CodeTestCase(unittest.TestCase):
-    def test_code(self):
-        co = ExceptionTestCase.test_exceptions.func_code
-        new = marshal.loads(marshal.dumps(co))
-        self.assertEqual(co, new)
+    if not test_support.is_jython: # XXX - need to use the PBC compilation backend, which doesn't exist yet
+        def test_code(self):
+            co = ExceptionTestCase.test_exceptions.func_code
+            new = marshal.loads(marshal.dumps(co))
+            self.assertEqual(co, new)
 
 class ContainerTestCase(unittest.TestCase):
     d = {'astring': 'foo@bar.baz.spam',
@@ -163,8 +172,7 @@
     def test_dict(self):
         new = marshal.loads(marshal.dumps(self.d))
         self.assertEqual(self.d, new)
-        marshal.dump(self.d, file(test_support.TESTFN, "wb"))
-        new = marshal.load(file(test_support.TESTFN, "rb"))
+        new = roundtrip(self.d)
         self.assertEqual(self.d, new)
         os.unlink(test_support.TESTFN)
 
@@ -172,8 +180,7 @@
         lst = self.d.items()
         new = marshal.loads(marshal.dumps(lst))
         self.assertEqual(lst, new)
-        marshal.dump(lst, file(test_support.TESTFN, "wb"))
-        new = marshal.load(file(test_support.TESTFN, "rb"))
+        new = roundtrip(lst)
         self.assertEqual(lst, new)
         os.unlink(test_support.TESTFN)
 
@@ -181,8 +188,7 @@
         t = tuple(self.d.keys())
         new = marshal.loads(marshal.dumps(t))
         self.assertEqual(t, new)
-        marshal.dump(t, file(test_support.TESTFN, "wb"))
-        new = marshal.load(file(test_support.TESTFN, "rb"))
+        new = roundtrip(t)
         self.assertEqual(t, new)
         os.unlink(test_support.TESTFN)
 
@@ -191,10 +197,9 @@
             t = constructor(self.d.keys())
             new = marshal.loads(marshal.dumps(t))
             self.assertEqual(t, new)
-            self.assertTrue(isinstance(new, constructor))
+            self.assert_(isinstance(new, constructor))
             self.assertNotEqual(id(t), id(new))
-            marshal.dump(t, file(test_support.TESTFN, "wb"))
-            new = marshal.load(file(test_support.TESTFN, "rb"))
+            new = roundtrip(t)
             self.assertEqual(t, new)
             os.unlink(test_support.TESTFN)
 
@@ -210,8 +215,8 @@
 
     def test_version_argument(self):
         # Python 2.4.0 crashes for any call to marshal.dumps(x, y)
-        self.assertEqual(marshal.loads(marshal.dumps(5, 0)), 5)
-        self.assertEqual(marshal.loads(marshal.dumps(5, 1)), 5)
+        self.assertEquals(marshal.loads(marshal.dumps(5, 0)), 5)
+        self.assertEquals(marshal.loads(marshal.dumps(5, 1)), 5)
 
     def test_fuzz(self):
         # simple test that it's at least not *totally* trivial to
@@ -246,77 +251,6 @@
         last.append([0])
         self.assertRaises(ValueError, marshal.dumps, head)
 
-    def test_exact_type_match(self):
-        # Former bug:
-        #   >>> class Int(int): pass
-        #   >>> type(loads(dumps(Int())))
-        #   <type 'int'>
-        for typ in (int, long, float, complex, tuple, list, dict, set, frozenset):
-            # Note: str and unicode subclasses are not tested because they get handled
-            # by marshal's routines for objects supporting the buffer API.
-            subtyp = type('subtyp', (typ,), {})
-            self.assertRaises(ValueError, marshal.dumps, subtyp())
-
-    # Issue #1792 introduced a change in how marshal increases the size of its
-    # internal buffer; this test ensures that the new code is exercised.
-    def test_large_marshal(self):
-        size = int(1e6)
-        testString = 'abc' * size
-        marshal.dumps(testString)
-
-    def test_invalid_longs(self):
-        # Issue #7019: marshal.loads shouldn't produce unnormalized PyLongs
-        invalid_string = 'l\x02\x00\x00\x00\x00\x00\x00\x00'
-        self.assertRaises(ValueError, marshal.loads, invalid_string)
-
-LARGE_SIZE = 2**31
-character_size = 4 if sys.maxunicode > 0xFFFF else 2
-pointer_size = 8 if sys.maxsize > 0xFFFFFFFF else 4
-
-@unittest.skipIf(LARGE_SIZE > sys.maxsize, "test cannot run on 32-bit systems")
-class LargeValuesTestCase(unittest.TestCase):
-    def check_unmarshallable(self, data):
-        f = open(test_support.TESTFN, 'wb')
-        self.addCleanup(test_support.unlink, test_support.TESTFN)
-        with f:
-            self.assertRaises(ValueError, marshal.dump, data, f)
-
-    @test_support.precisionbigmemtest(size=LARGE_SIZE, memuse=1, dry_run=False)
-    def test_string(self, size):
-        self.check_unmarshallable('x' * size)
-
-    @test_support.precisionbigmemtest(size=LARGE_SIZE,
-            memuse=character_size, dry_run=False)
-    def test_unicode(self, size):
-        self.check_unmarshallable(u'x' * size)
-
-    @test_support.precisionbigmemtest(size=LARGE_SIZE,
-            memuse=pointer_size, dry_run=False)
-    def test_tuple(self, size):
-        self.check_unmarshallable((None,) * size)
-
-    @test_support.precisionbigmemtest(size=LARGE_SIZE,
-            memuse=pointer_size, dry_run=False)
-    def test_list(self, size):
-        self.check_unmarshallable([None] * size)
-
-    @test_support.precisionbigmemtest(size=LARGE_SIZE,
-            memuse=pointer_size*12 + sys.getsizeof(LARGE_SIZE-1),
-            dry_run=False)
-    def test_set(self, size):
-        self.check_unmarshallable(set(range(size)))
-
-    @test_support.precisionbigmemtest(size=LARGE_SIZE,
-            memuse=pointer_size*12 + sys.getsizeof(LARGE_SIZE-1),
-            dry_run=False)
-    def test_frozenset(self, size):
-        self.check_unmarshallable(frozenset(range(size)))
-
-    @test_support.precisionbigmemtest(size=LARGE_SIZE, memuse=1, dry_run=False)
-    def test_bytearray(self, size):
-        self.check_unmarshallable(bytearray(size))
-
-
 def test_main():
     test_support.run_unittest(IntTestCase,
                               FloatTestCase,
@@ -324,9 +258,7 @@
                               CodeTestCase,
                               ContainerTestCase,
                               ExceptionTestCase,
-                              BugsTestCase,
-                              LargeValuesTestCase,
-                             )
+                              BugsTestCase)
 
 if __name__ == "__main__":
     test_main()

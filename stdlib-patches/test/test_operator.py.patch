--- lib-python/2.7/test/test_operator.py	2015-04-18 05:34:44.615111242 +0300
+++ Lib/test/test_operator.py	2015-04-18 05:34:31.851089873 +0300
@@ -1,5 +1,6 @@
 import operator
 import unittest
+import inspect
 
 from test import test_support
 
@@ -33,167 +34,179 @@
 
 
 class OperatorTestCase(unittest.TestCase):
+    def test_missing_module_attribute(self):
+        skip = {'__subclasshook__', '__new__'}
+
+        def _predicate(member):
+            return inspect.isbuiltin(member) and member.__name__ not in skip
+
+        objects = inspect.getmembers(operator, predicate=_predicate)
+        for _, value in objects:
+            self.assertEqual(value.__module__, "operator", value)
+
     def test_lt(self):
-        self.assertRaises(TypeError, operator.lt)
-        self.assertRaises(TypeError, operator.lt, 1j, 2j)
-        self.assertFalse(operator.lt(1, 0))
-        self.assertFalse(operator.lt(1, 0.0))
-        self.assertFalse(operator.lt(1, 1))
-        self.assertFalse(operator.lt(1, 1.0))
-        self.assertTrue(operator.lt(1, 2))
-        self.assertTrue(operator.lt(1, 2.0))
+        self.failUnlessRaises(TypeError, operator.lt)
+        self.failUnlessRaises(TypeError, operator.lt, 1j, 2j)
+        self.failIf(operator.lt(1, 0))
+        self.failIf(operator.lt(1, 0.0))
+        self.failIf(operator.lt(1, 1))
+        self.failIf(operator.lt(1, 1.0))
+        self.failUnless(operator.lt(1, 2))
+        self.failUnless(operator.lt(1, 2.0))
 
     def test_le(self):
-        self.assertRaises(TypeError, operator.le)
-        self.assertRaises(TypeError, operator.le, 1j, 2j)
-        self.assertFalse(operator.le(1, 0))
-        self.assertFalse(operator.le(1, 0.0))
-        self.assertTrue(operator.le(1, 1))
-        self.assertTrue(operator.le(1, 1.0))
-        self.assertTrue(operator.le(1, 2))
-        self.assertTrue(operator.le(1, 2.0))
+        self.failUnlessRaises(TypeError, operator.le)
+        self.failUnlessRaises(TypeError, operator.le, 1j, 2j)
+        self.failIf(operator.le(1, 0))
+        self.failIf(operator.le(1, 0.0))
+        self.failUnless(operator.le(1, 1))
+        self.failUnless(operator.le(1, 1.0))
+        self.failUnless(operator.le(1, 2))
+        self.failUnless(operator.le(1, 2.0))
 
     def test_eq(self):
         class C(object):
             def __eq__(self, other):
                 raise SyntaxError
             __hash__ = None # Silence Py3k warning
-        self.assertRaises(TypeError, operator.eq)
-        self.assertRaises(SyntaxError, operator.eq, C(), C())
-        self.assertFalse(operator.eq(1, 0))
-        self.assertFalse(operator.eq(1, 0.0))
-        self.assertTrue(operator.eq(1, 1))
-        self.assertTrue(operator.eq(1, 1.0))
-        self.assertFalse(operator.eq(1, 2))
-        self.assertFalse(operator.eq(1, 2.0))
+        self.failUnlessRaises(TypeError, operator.eq)
+        self.failUnlessRaises(SyntaxError, operator.eq, C(), C())
+        self.failIf(operator.eq(1, 0))
+        self.failIf(operator.eq(1, 0.0))
+        self.failUnless(operator.eq(1, 1))
+        self.failUnless(operator.eq(1, 1.0))
+        self.failIf(operator.eq(1, 2))
+        self.failIf(operator.eq(1, 2.0))
 
     def test_ne(self):
         class C(object):
             def __ne__(self, other):
                 raise SyntaxError
-        self.assertRaises(TypeError, operator.ne)
-        self.assertRaises(SyntaxError, operator.ne, C(), C())
-        self.assertTrue(operator.ne(1, 0))
-        self.assertTrue(operator.ne(1, 0.0))
-        self.assertFalse(operator.ne(1, 1))
-        self.assertFalse(operator.ne(1, 1.0))
-        self.assertTrue(operator.ne(1, 2))
-        self.assertTrue(operator.ne(1, 2.0))
+        self.failUnlessRaises(TypeError, operator.ne)
+        self.failUnlessRaises(SyntaxError, operator.ne, C(), C())
+        self.failUnless(operator.ne(1, 0))
+        self.failUnless(operator.ne(1, 0.0))
+        self.failIf(operator.ne(1, 1))
+        self.failIf(operator.ne(1, 1.0))
+        self.failUnless(operator.ne(1, 2))
+        self.failUnless(operator.ne(1, 2.0))
 
     def test_ge(self):
-        self.assertRaises(TypeError, operator.ge)
-        self.assertRaises(TypeError, operator.ge, 1j, 2j)
-        self.assertTrue(operator.ge(1, 0))
-        self.assertTrue(operator.ge(1, 0.0))
-        self.assertTrue(operator.ge(1, 1))
-        self.assertTrue(operator.ge(1, 1.0))
-        self.assertFalse(operator.ge(1, 2))
-        self.assertFalse(operator.ge(1, 2.0))
+        self.failUnlessRaises(TypeError, operator.ge)
+        self.failUnlessRaises(TypeError, operator.ge, 1j, 2j)
+        self.failUnless(operator.ge(1, 0))
+        self.failUnless(operator.ge(1, 0.0))
+        self.failUnless(operator.ge(1, 1))
+        self.failUnless(operator.ge(1, 1.0))
+        self.failIf(operator.ge(1, 2))
+        self.failIf(operator.ge(1, 2.0))
 
     def test_gt(self):
-        self.assertRaises(TypeError, operator.gt)
-        self.assertRaises(TypeError, operator.gt, 1j, 2j)
-        self.assertTrue(operator.gt(1, 0))
-        self.assertTrue(operator.gt(1, 0.0))
-        self.assertFalse(operator.gt(1, 1))
-        self.assertFalse(operator.gt(1, 1.0))
-        self.assertFalse(operator.gt(1, 2))
-        self.assertFalse(operator.gt(1, 2.0))
+        self.failUnlessRaises(TypeError, operator.gt)
+        self.failUnlessRaises(TypeError, operator.gt, 1j, 2j)
+        self.failUnless(operator.gt(1, 0))
+        self.failUnless(operator.gt(1, 0.0))
+        self.failIf(operator.gt(1, 1))
+        self.failIf(operator.gt(1, 1.0))
+        self.failIf(operator.gt(1, 2))
+        self.failIf(operator.gt(1, 2.0))
 
     def test_abs(self):
-        self.assertRaises(TypeError, operator.abs)
-        self.assertRaises(TypeError, operator.abs, None)
-        self.assertTrue(operator.abs(-1) == 1)
-        self.assertTrue(operator.abs(1) == 1)
+        self.failUnlessRaises(TypeError, operator.abs)
+        self.failUnlessRaises(TypeError, operator.abs, None)
+        self.failUnless(operator.abs(-1) == 1)
+        self.failUnless(operator.abs(1) == 1)
 
     def test_add(self):
-        self.assertRaises(TypeError, operator.add)
-        self.assertRaises(TypeError, operator.add, None, None)
-        self.assertTrue(operator.add(3, 4) == 7)
+        self.failUnlessRaises(TypeError, operator.add)
+        self.failUnlessRaises(TypeError, operator.add, None, None)
+        self.failUnless(operator.add(3, 4) == 7)
 
     def test_bitwise_and(self):
-        self.assertRaises(TypeError, operator.and_)
-        self.assertRaises(TypeError, operator.and_, None, None)
-        self.assertTrue(operator.and_(0xf, 0xa) == 0xa)
+        self.failUnlessRaises(TypeError, operator.and_)
+        self.failUnlessRaises(TypeError, operator.and_, None, None)
+        self.failUnless(operator.and_(0xf, 0xa) == 0xa)
 
     def test_concat(self):
-        self.assertRaises(TypeError, operator.concat)
-        self.assertRaises(TypeError, operator.concat, None, None)
-        self.assertTrue(operator.concat('py', 'thon') == 'python')
-        self.assertTrue(operator.concat([1, 2], [3, 4]) == [1, 2, 3, 4])
-        self.assertTrue(operator.concat(Seq1([5, 6]), Seq1([7])) == [5, 6, 7])
-        self.assertTrue(operator.concat(Seq2([5, 6]), Seq2([7])) == [5, 6, 7])
-        self.assertRaises(TypeError, operator.concat, 13, 29)
+        self.failUnlessRaises(TypeError, operator.concat)
+        self.failUnlessRaises(TypeError, operator.concat, None, None)
+        self.failUnless(operator.concat('py', 'thon') == 'python')
+        self.failUnless(operator.concat([1, 2], [3, 4]) == [1, 2, 3, 4])
+        self.failUnless(operator.concat(Seq1([5, 6]), Seq1([7])) == [5, 6, 7])
+        self.failUnless(operator.concat(Seq2([5, 6]), Seq2([7])) == [5, 6, 7])
+        if not test_support.is_jython:
+            # Jython concat is add
+            self.failUnlessRaises(TypeError, operator.concat, 13, 29)
 
     def test_countOf(self):
-        self.assertRaises(TypeError, operator.countOf)
-        self.assertRaises(TypeError, operator.countOf, None, None)
-        self.assertTrue(operator.countOf([1, 2, 1, 3, 1, 4], 3) == 1)
-        self.assertTrue(operator.countOf([1, 2, 1, 3, 1, 4], 5) == 0)
+        self.failUnlessRaises(TypeError, operator.countOf)
+        self.failUnlessRaises(TypeError, operator.countOf, None, None)
+        self.failUnless(operator.countOf([1, 2, 1, 3, 1, 4], 3) == 1)
+        self.failUnless(operator.countOf([1, 2, 1, 3, 1, 4], 5) == 0)
 
     def test_delitem(self):
         a = [4, 3, 2, 1]
-        self.assertRaises(TypeError, operator.delitem, a)
-        self.assertRaises(TypeError, operator.delitem, a, None)
-        self.assertTrue(operator.delitem(a, 1) is None)
-        self.assertTrue(a == [4, 2, 1])
+        self.failUnlessRaises(TypeError, operator.delitem, a)
+        self.failUnlessRaises(TypeError, operator.delitem, a, None)
+        self.failUnless(operator.delitem(a, 1) is None)
+        self.assert_(a == [4, 2, 1])
 
     def test_delslice(self):
         a = range(10)
-        self.assertRaises(TypeError, operator.delslice, a)
-        self.assertRaises(TypeError, operator.delslice, a, None, None)
-        self.assertTrue(operator.delslice(a, 2, 8) is None)
-        self.assertTrue(a == [0, 1, 8, 9])
+        self.failUnlessRaises(TypeError, operator.delslice, a)
+        self.failUnlessRaises(TypeError, operator.delslice, a, None, None)
+        self.failUnless(operator.delslice(a, 2, 8) is None)
+        self.assert_(a == [0, 1, 8, 9])
         operator.delslice(a, 0, test_support.MAX_Py_ssize_t)
-        self.assertTrue(a == [])
+        self.assert_(a == [])
 
     def test_div(self):
-        self.assertRaises(TypeError, operator.div, 5)
-        self.assertRaises(TypeError, operator.div, None, None)
-        self.assertTrue(operator.floordiv(5, 2) == 2)
+        self.failUnlessRaises(TypeError, operator.div, 5)
+        self.failUnlessRaises(TypeError, operator.div, None, None)
+        self.failUnless(operator.floordiv(5, 2) == 2)
 
     def test_floordiv(self):
-        self.assertRaises(TypeError, operator.floordiv, 5)
-        self.assertRaises(TypeError, operator.floordiv, None, None)
-        self.assertTrue(operator.floordiv(5, 2) == 2)
+        self.failUnlessRaises(TypeError, operator.floordiv, 5)
+        self.failUnlessRaises(TypeError, operator.floordiv, None, None)
+        self.failUnless(operator.floordiv(5, 2) == 2)
 
     def test_truediv(self):
-        self.assertRaises(TypeError, operator.truediv, 5)
-        self.assertRaises(TypeError, operator.truediv, None, None)
-        self.assertTrue(operator.truediv(5, 2) == 2.5)
+        self.failUnlessRaises(TypeError, operator.truediv, 5)
+        self.failUnlessRaises(TypeError, operator.truediv, None, None)
+        self.failUnless(operator.truediv(5, 2) == 2.5)
 
     def test_getitem(self):
         a = range(10)
-        self.assertRaises(TypeError, operator.getitem)
-        self.assertRaises(TypeError, operator.getitem, a, None)
-        self.assertTrue(operator.getitem(a, 2) == 2)
+        self.failUnlessRaises(TypeError, operator.getitem)
+        self.failUnlessRaises(TypeError, operator.getitem, a, None)
+        self.failUnless(operator.getitem(a, 2) == 2)
 
     def test_getslice(self):
         a = range(10)
-        self.assertRaises(TypeError, operator.getslice)
-        self.assertRaises(TypeError, operator.getslice, a, None, None)
-        self.assertTrue(operator.getslice(a, 4, 6) == [4, 5])
+        self.failUnlessRaises(TypeError, operator.getslice)
+        self.failUnlessRaises(TypeError, operator.getslice, a, None, None)
+        self.failUnless(operator.getslice(a, 4, 6) == [4, 5])
         b = operator.getslice(a, 0, test_support.MAX_Py_ssize_t)
-        self.assertTrue(b == a)
+        self.assert_(b == a)
 
     def test_indexOf(self):
-        self.assertRaises(TypeError, operator.indexOf)
-        self.assertRaises(TypeError, operator.indexOf, None, None)
-        self.assertTrue(operator.indexOf([4, 3, 2, 1], 3) == 1)
+        self.failUnlessRaises(TypeError, operator.indexOf)
+        self.failUnlessRaises(TypeError, operator.indexOf, None, None)
+        self.failUnless(operator.indexOf([4, 3, 2, 1], 3) == 1)
         self.assertRaises(ValueError, operator.indexOf, [4, 3, 2, 1], 0)
 
     def test_invert(self):
-        self.assertRaises(TypeError, operator.invert)
-        self.assertRaises(TypeError, operator.invert, None)
-        self.assertTrue(operator.inv(4) == -5)
+        self.failUnlessRaises(TypeError, operator.invert)
+        self.failUnlessRaises(TypeError, operator.invert, None)
+        self.failUnless(operator.inv(4) == -5)
 
     def test_isCallable(self):
-        self.assertRaises(TypeError, operator.isCallable)
+        self.failUnlessRaises(TypeError, operator.isCallable)
         class C:
             pass
         def check(self, o, v):
+            self.assertEqual(operator.isCallable(o), v)
             with test_support.check_py3k_warnings():
-                self.assertEqual(operator.isCallable(o), v)
                 self.assertEqual(callable(o), v)
         check(self, 4, 0)
         check(self, operator.isCallable, 1)
@@ -201,106 +214,108 @@
         check(self, C(), 0)
 
     def test_isMappingType(self):
-        self.assertRaises(TypeError, operator.isMappingType)
-        self.assertFalse(operator.isMappingType(1))
-        self.assertFalse(operator.isMappingType(operator.isMappingType))
-        self.assertTrue(operator.isMappingType(operator.__dict__))
-        self.assertTrue(operator.isMappingType({}))
+        self.failUnlessRaises(TypeError, operator.isMappingType)
+        self.failIf(operator.isMappingType(1))
+        self.failIf(operator.isMappingType(operator.isMappingType))
+        self.failUnless(operator.isMappingType(operator.__dict__))
+        self.failUnless(operator.isMappingType({}))
 
     def test_isNumberType(self):
-        self.assertRaises(TypeError, operator.isNumberType)
-        self.assertTrue(operator.isNumberType(8))
-        self.assertTrue(operator.isNumberType(8j))
-        self.assertTrue(operator.isNumberType(8L))
-        self.assertTrue(operator.isNumberType(8.3))
-        self.assertFalse(operator.isNumberType(dir()))
+        self.failUnlessRaises(TypeError, operator.isNumberType)
+        self.failUnless(operator.isNumberType(8))
+        self.failUnless(operator.isNumberType(8j))
+        self.failUnless(operator.isNumberType(8L))
+        self.failUnless(operator.isNumberType(8.3))
+        self.failIf(operator.isNumberType(dir()))
 
     def test_isSequenceType(self):
-        self.assertRaises(TypeError, operator.isSequenceType)
-        self.assertTrue(operator.isSequenceType(dir()))
-        self.assertTrue(operator.isSequenceType(()))
-        self.assertTrue(operator.isSequenceType(xrange(10)))
-        self.assertTrue(operator.isSequenceType('yeahbuddy'))
-        self.assertFalse(operator.isSequenceType(3))
+        self.failUnlessRaises(TypeError, operator.isSequenceType)
+        self.failUnless(operator.isSequenceType(dir()))
+        self.failUnless(operator.isSequenceType(()))
+        self.failUnless(operator.isSequenceType(xrange(10)))
+        self.failUnless(operator.isSequenceType('yeahbuddy'))
+        self.failIf(operator.isSequenceType(3))
         class Dict(dict): pass
-        self.assertFalse(operator.isSequenceType(Dict()))
+        self.failIf(operator.isSequenceType(Dict()))
 
     def test_lshift(self):
-        self.assertRaises(TypeError, operator.lshift)
-        self.assertRaises(TypeError, operator.lshift, None, 42)
-        self.assertTrue(operator.lshift(5, 1) == 10)
-        self.assertTrue(operator.lshift(5, 0) == 5)
+        self.failUnlessRaises(TypeError, operator.lshift)
+        self.failUnlessRaises(TypeError, operator.lshift, None, 42)
+        self.failUnless(operator.lshift(5, 1) == 10)
+        self.failUnless(operator.lshift(5, 0) == 5)
         self.assertRaises(ValueError, operator.lshift, 2, -1)
 
     def test_mod(self):
-        self.assertRaises(TypeError, operator.mod)
-        self.assertRaises(TypeError, operator.mod, None, 42)
-        self.assertTrue(operator.mod(5, 2) == 1)
+        self.failUnlessRaises(TypeError, operator.mod)
+        self.failUnlessRaises(TypeError, operator.mod, None, 42)
+        self.failUnless(operator.mod(5, 2) == 1)
 
     def test_mul(self):
-        self.assertRaises(TypeError, operator.mul)
-        self.assertRaises(TypeError, operator.mul, None, None)
-        self.assertTrue(operator.mul(5, 2) == 10)
+        self.failUnlessRaises(TypeError, operator.mul)
+        self.failUnlessRaises(TypeError, operator.mul, None, None)
+        self.failUnless(operator.mul(5, 2) == 10)
 
     def test_neg(self):
-        self.assertRaises(TypeError, operator.neg)
-        self.assertRaises(TypeError, operator.neg, None)
-        self.assertTrue(operator.neg(5) == -5)
-        self.assertTrue(operator.neg(-5) == 5)
-        self.assertTrue(operator.neg(0) == 0)
-        self.assertTrue(operator.neg(-0) == 0)
+        self.failUnlessRaises(TypeError, operator.neg)
+        self.failUnlessRaises(TypeError, operator.neg, None)
+        self.failUnless(operator.neg(5) == -5)
+        self.failUnless(operator.neg(-5) == 5)
+        self.failUnless(operator.neg(0) == 0)
+        self.failUnless(operator.neg(-0) == 0)
 
     def test_bitwise_or(self):
-        self.assertRaises(TypeError, operator.or_)
-        self.assertRaises(TypeError, operator.or_, None, None)
-        self.assertTrue(operator.or_(0xa, 0x5) == 0xf)
+        self.failUnlessRaises(TypeError, operator.or_)
+        self.failUnlessRaises(TypeError, operator.or_, None, None)
+        self.failUnless(operator.or_(0xa, 0x5) == 0xf)
 
     def test_pos(self):
-        self.assertRaises(TypeError, operator.pos)
-        self.assertRaises(TypeError, operator.pos, None)
-        self.assertTrue(operator.pos(5) == 5)
-        self.assertTrue(operator.pos(-5) == -5)
-        self.assertTrue(operator.pos(0) == 0)
-        self.assertTrue(operator.pos(-0) == 0)
+        self.failUnlessRaises(TypeError, operator.pos)
+        self.failUnlessRaises(TypeError, operator.pos, None)
+        self.failUnless(operator.pos(5) == 5)
+        self.failUnless(operator.pos(-5) == -5)
+        self.failUnless(operator.pos(0) == 0)
+        self.failUnless(operator.pos(-0) == 0)
 
     def test_pow(self):
-        self.assertRaises(TypeError, operator.pow)
-        self.assertRaises(TypeError, operator.pow, None, None)
-        self.assertTrue(operator.pow(3,5) == 3**5)
-        self.assertTrue(operator.__pow__(3,5) == 3**5)
+        self.failUnlessRaises(TypeError, operator.pow)
+        self.failUnlessRaises(TypeError, operator.pow, None, None)
+        self.failUnless(operator.pow(3,5) == 3**5)
+        self.failUnless(operator.__pow__(3,5) == 3**5)
         self.assertRaises(TypeError, operator.pow, 1)
         self.assertRaises(TypeError, operator.pow, 1, 2, 3)
 
     def test_repeat(self):
         a = range(3)
-        self.assertRaises(TypeError, operator.repeat)
-        self.assertRaises(TypeError, operator.repeat, a, None)
-        self.assertTrue(operator.repeat(a, 2) == a+a)
-        self.assertTrue(operator.repeat(a, 1) == a)
-        self.assertTrue(operator.repeat(a, 0) == [])
+        self.failUnlessRaises(TypeError, operator.repeat)
+        self.failUnlessRaises(TypeError, operator.repeat, a, None)
+        self.failUnless(operator.repeat(a, 2) == a+a)
+        self.failUnless(operator.repeat(a, 1) == a)
+        self.failUnless(operator.repeat(a, 0) == [])
         a = (1, 2, 3)
-        self.assertTrue(operator.repeat(a, 2) == a+a)
-        self.assertTrue(operator.repeat(a, 1) == a)
-        self.assertTrue(operator.repeat(a, 0) == ())
+        self.failUnless(operator.repeat(a, 2) == a+a)
+        self.failUnless(operator.repeat(a, 1) == a)
+        self.failUnless(operator.repeat(a, 0) == ())
         a = '123'
-        self.assertTrue(operator.repeat(a, 2) == a+a)
-        self.assertTrue(operator.repeat(a, 1) == a)
-        self.assertTrue(operator.repeat(a, 0) == '')
+        self.failUnless(operator.repeat(a, 2) == a+a)
+        self.failUnless(operator.repeat(a, 1) == a)
+        self.failUnless(operator.repeat(a, 0) == '')
         a = Seq1([4, 5, 6])
-        self.assertTrue(operator.repeat(a, 2) == [4, 5, 6, 4, 5, 6])
-        self.assertTrue(operator.repeat(a, 1) == [4, 5, 6])
-        self.assertTrue(operator.repeat(a, 0) == [])
+        self.failUnless(operator.repeat(a, 2) == [4, 5, 6, 4, 5, 6])
+        self.failUnless(operator.repeat(a, 1) == [4, 5, 6])
+        self.failUnless(operator.repeat(a, 0) == [])
         a = Seq2([4, 5, 6])
-        self.assertTrue(operator.repeat(a, 2) == [4, 5, 6, 4, 5, 6])
-        self.assertTrue(operator.repeat(a, 1) == [4, 5, 6])
-        self.assertTrue(operator.repeat(a, 0) == [])
-        self.assertRaises(TypeError, operator.repeat, 6, 7)
+        self.failUnless(operator.repeat(a, 2) == [4, 5, 6, 4, 5, 6])
+        self.failUnless(operator.repeat(a, 1) == [4, 5, 6])
+        self.failUnless(operator.repeat(a, 0) == [])
+        if not test_support.is_jython:
+            # Jython repeat is mul
+            self.failUnlessRaises(TypeError, operator.repeat, 6, 7)
 
     def test_rshift(self):
-        self.assertRaises(TypeError, operator.rshift)
-        self.assertRaises(TypeError, operator.rshift, None, 42)
-        self.assertTrue(operator.rshift(5, 1) == 2)
-        self.assertTrue(operator.rshift(5, 0) == 5)
+        self.failUnlessRaises(TypeError, operator.rshift)
+        self.failUnlessRaises(TypeError, operator.rshift, None, 42)
+        self.failUnless(operator.rshift(5, 1) == 2)
+        self.failUnless(operator.rshift(5, 0) == 5)
         self.assertRaises(ValueError, operator.rshift, 2, -1)
 
     def test_contains(self):
@@ -308,61 +323,60 @@
         self.assertRaises(TypeError, operator.contains, None, None)
         self.assertTrue(operator.contains(range(4), 2))
         self.assertFalse(operator.contains(range(4), 5))
-        with test_support.check_py3k_warnings():
-            self.assertTrue(operator.sequenceIncludes(range(4), 2))
-            self.assertFalse(operator.sequenceIncludes(range(4), 5))
+        self.assertTrue(operator.sequenceIncludes(range(4), 2))
+        self.assertFalse(operator.sequenceIncludes(range(4), 5))
 
     def test_setitem(self):
         a = range(3)
-        self.assertRaises(TypeError, operator.setitem, a)
-        self.assertRaises(TypeError, operator.setitem, a, None, None)
-        self.assertTrue(operator.setitem(a, 0, 2) is None)
-        self.assertTrue(a == [2, 1, 2])
+        self.failUnlessRaises(TypeError, operator.setitem, a)
+        self.failUnlessRaises(TypeError, operator.setitem, a, None, None)
+        self.failUnless(operator.setitem(a, 0, 2) is None)
+        self.assert_(a == [2, 1, 2])
         self.assertRaises(IndexError, operator.setitem, a, 4, 2)
 
     def test_setslice(self):
         a = range(4)
-        self.assertRaises(TypeError, operator.setslice, a)
-        self.assertRaises(TypeError, operator.setslice, a, None, None, None)
-        self.assertTrue(operator.setslice(a, 1, 3, [2, 1]) is None)
-        self.assertTrue(a == [0, 2, 1, 3])
+        self.failUnlessRaises(TypeError, operator.setslice, a)
+        self.failUnlessRaises(TypeError, operator.setslice, a, None, None, None)
+        self.failUnless(operator.setslice(a, 1, 3, [2, 1]) is None)
+        self.assert_(a == [0, 2, 1, 3])
         operator.setslice(a, 0, test_support.MAX_Py_ssize_t, [])
-        self.assertTrue(a == [])
+        self.assert_(a == [])
 
     def test_sub(self):
-        self.assertRaises(TypeError, operator.sub)
-        self.assertRaises(TypeError, operator.sub, None, None)
-        self.assertTrue(operator.sub(5, 2) == 3)
+        self.failUnlessRaises(TypeError, operator.sub)
+        self.failUnlessRaises(TypeError, operator.sub, None, None)
+        self.failUnless(operator.sub(5, 2) == 3)
 
     def test_truth(self):
         class C(object):
             def __nonzero__(self):
                 raise SyntaxError
-        self.assertRaises(TypeError, operator.truth)
-        self.assertRaises(SyntaxError, operator.truth, C())
-        self.assertTrue(operator.truth(5))
-        self.assertTrue(operator.truth([0]))
-        self.assertFalse(operator.truth(0))
-        self.assertFalse(operator.truth([]))
+        self.failUnlessRaises(TypeError, operator.truth)
+        self.failUnlessRaises(SyntaxError, operator.truth, C())
+        self.failUnless(operator.truth(5))
+        self.failUnless(operator.truth([0]))
+        self.failIf(operator.truth(0))
+        self.failIf(operator.truth([]))
 
     def test_bitwise_xor(self):
-        self.assertRaises(TypeError, operator.xor)
-        self.assertRaises(TypeError, operator.xor, None, None)
-        self.assertTrue(operator.xor(0xb, 0xc) == 0x7)
+        self.failUnlessRaises(TypeError, operator.xor)
+        self.failUnlessRaises(TypeError, operator.xor, None, None)
+        self.failUnless(operator.xor(0xb, 0xc) == 0x7)
 
     def test_is(self):
         a = b = 'xyzpdq'
         c = a[:3] + b[3:]
-        self.assertRaises(TypeError, operator.is_)
-        self.assertTrue(operator.is_(a, b))
-        self.assertFalse(operator.is_(a,c))
+        self.failUnlessRaises(TypeError, operator.is_)
+        self.failUnless(operator.is_(a, b))
+        self.failIf(operator.is_(a,c))
 
     def test_is_not(self):
         a = b = 'xyzpdq'
         c = a[:3] + b[3:]
-        self.assertRaises(TypeError, operator.is_not)
-        self.assertFalse(operator.is_not(a, b))
-        self.assertTrue(operator.is_not(a,c))
+        self.failUnlessRaises(TypeError, operator.is_not)
+        self.failIf(operator.is_not(a, b))
+        self.failUnless(operator.is_not(a,c))
 
     def test_attrgetter(self):
         class A:
@@ -388,7 +402,7 @@
         class C(object):
             def __getattr__(self, name):
                 raise SyntaxError
-        self.assertRaises(SyntaxError, operator.attrgetter('foo'), C())
+        self.failUnlessRaises(SyntaxError, operator.attrgetter('foo'), C())
 
         # recursive gets
         a = A()
@@ -420,7 +434,7 @@
         class C(object):
             def __getitem__(self, name):
                 raise SyntaxError
-        self.assertRaises(SyntaxError, operator.itemgetter(42), C())
+        self.failUnlessRaises(SyntaxError, operator.itemgetter(42), C())
 
         f = operator.itemgetter('name')
         self.assertRaises(TypeError, f, a)
@@ -455,12 +469,12 @@
         f = operator.methodcaller('foo')
         self.assertRaises(IndexError, f, a)
         f = operator.methodcaller('foo', 1, 2)
-        self.assertEqual(f(a), 3)
+        self.assertEquals(f(a), 3)
         f = operator.methodcaller('bar')
-        self.assertEqual(f(a), 42)
+        self.assertEquals(f(a), 42)
         self.assertRaises(TypeError, f, a, a)
         f = operator.methodcaller('bar', f=5)
-        self.assertEqual(f(a), 5)
+        self.assertEquals(f(a), 5)
 
     def test_inplace(self):
         class C(object):

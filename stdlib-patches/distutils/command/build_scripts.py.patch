--- lib-python/2.7/distutils/command/build_scripts.py	2015-04-18 05:34:44.615111242 +0300
+++ Lib/distutils/command/build_scripts.py	2015-04-18 05:34:31.763089726 +0300
@@ -2,10 +2,13 @@
 
 Implements the Distutils 'build_scripts' command."""
 
-__revision__ = "$Id$"
+# This module should be kept compatible with Python 2.1.
 
-import os, re
+__revision__ = "$Id: build_scripts.py 59668 2008-01-02 18:59:36Z guido.van.rossum $"
+
+import sys, os, re
 from stat import ST_MODE
+from distutils import sysconfig
 from distutils.core import Command
 from distutils.dep_util import newer
 from distutils.util import convert_path
@@ -56,7 +59,6 @@
         ie. starts with "\#!" and contains "python"), then adjust the first
         line to refer to the current Python interpreter as we copy.
         """
-        _sysconfig = __import__('sysconfig')
         self.mkpath(self.build_dir)
         outfiles = []
         for script in self.scripts:
@@ -92,19 +94,18 @@
             if adjust:
                 log.info("copying and adjusting %s -> %s", script,
                          self.build_dir)
+                if not sysconfig.python_build:
+                    executable = self.executable
+                else:
+                    executable = os.path.join(
+                        sysconfig.get_config_var("BINDIR"),
+                        "python" + sysconfig.get_config_var("EXE"))
+                executable = fix_jython_executable(executable, post_interp)
                 if not self.dry_run:
                     outf = open(outfile, "w")
-                    if not _sysconfig.is_python_build():
-                        outf.write("#!%s%s\n" %
-                                   (self.executable,
-                                    post_interp))
-                    else:
-                        outf.write("#!%s%s\n" %
-                                   (os.path.join(
-                            _sysconfig.get_config_var("BINDIR"),
-                           "python%s%s" % (_sysconfig.get_config_var("VERSION"),
-                                           _sysconfig.get_config_var("EXE"))),
-                                    post_interp))
+                    outf.write("#!%s%s\n" %
+                               (executable,
+                                post_interp))
                     outf.writelines(f.readlines())
                     outf.close()
                 if f:
@@ -114,7 +115,7 @@
                     f.close()
                 self.copy_file(script, outfile)
 
-        if os.name == 'posix':
+        if hasattr(os, 'chmod'):
             for file in outfiles:
                 if self.dry_run:
                     log.info("changing mode of %s", file)
@@ -129,3 +130,29 @@
     # copy_scripts ()
 
 # class build_scripts
+
+
+def is_sh(executable):
+    """Determine if the specified executable is a .sh (contains a #! line)"""
+    try:
+        fp = open(executable)
+        magic = fp.read(2)
+        fp.close()
+    except IOError, OSError:
+        return executable
+    return magic == '#!'
+
+
+def fix_jython_executable(executable, options):
+    if sys.platform.startswith('java') and is_sh(executable):
+        # Workaround Jython's sys.executable being a .sh (an invalid
+        # shebang line interpreter)
+        if options:
+            # Can't apply the workaround, leave it broken
+            log.warn("WARNING: Unable to adapt shebang line for Jython,"
+                             " the following script is NOT executable\n"
+                     "         see http://bugs.jython.org/issue1112 for"
+                             " more information.")
+        else:
+            return '/usr/bin/env %s' % executable
+    return executable

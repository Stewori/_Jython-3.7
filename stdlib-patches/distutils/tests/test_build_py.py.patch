--- lib-python/2.7/distutils/tests/test_build_py.py	2015-04-18 05:34:44.667111329 +0300
+++ Lib/distutils/tests/test_build_py.py	2015-04-18 05:34:31.775089745 +0300
@@ -10,7 +10,6 @@
 from distutils.errors import DistutilsFileError
 
 from distutils.tests import support
-from test.test_support import run_unittest
 
 
 class BuildPyTestCase(support.TempdirManager,
@@ -20,15 +19,11 @@
     def test_package_data(self):
         sources = self.mkdtemp()
         f = open(os.path.join(sources, "__init__.py"), "w")
-        try:
-            f.write("# Pretend this is a package.")
-        finally:
-            f.close()
+        f.write("# Pretend this is a package.")
+        f.close()
         f = open(os.path.join(sources, "README.txt"), "w")
-        try:
-            f.write("Info about this package")
-        finally:
-            f.close()
+        f.write("Info about this package")
+        f.close()
 
         destination = self.mkdtemp()
 
@@ -57,15 +52,14 @@
         self.assertEqual(len(cmd.get_outputs()), 3)
         pkgdest = os.path.join(destination, "pkg")
         files = os.listdir(pkgdest)
-        self.assertIn("__init__.py", files)
-        self.assertIn("README.txt", files)
-        # XXX even with -O, distutils writes pyc, not pyo; bug?
-        if sys.dont_write_bytecode:
-            self.assertNotIn("__init__.pyc", files)
+        self.assert_("__init__.py" in files)
+        if sys.platform.startswith('java'):
+            self.assert_("__init__$py.class" in files, files)
         else:
-            self.assertIn("__init__.pyc", files)
+            self.assert_("__init__.pyc" in files)
+        self.assert_("README.txt" in files)
 
-    def test_empty_package_dir(self):
+    def test_empty_package_dir (self):
         # See SF 1668596/1720897.
         cwd = os.getcwd()
 
@@ -113,10 +107,10 @@
         finally:
             sys.dont_write_bytecode = old_dont_write_bytecode
 
-        self.assertIn('byte-compiling is disabled', self.logs[0][1])
+        self.assertTrue('byte-compiling is disabled' in self.logs[0][1])
 
 def test_suite():
     return unittest.makeSuite(BuildPyTestCase)
 
 if __name__ == "__main__":
-    run_unittest(test_suite())
+    unittest.main(defaultTest="test_suite")

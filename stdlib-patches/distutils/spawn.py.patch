--- lib-python/2.7/distutils/spawn.py	2015-04-18 05:34:44.659111317 +0300
+++ Lib/distutils/spawn.py	2015-04-18 05:34:31.771089740 +0300
@@ -6,7 +6,7 @@
 executable name.
 """
 
-__revision__ = "$Id$"
+__revision__ = "$Id: spawn.py 73147 2009-06-02 15:58:43Z tarek.ziade $"
 
 import sys
 import os
@@ -36,6 +36,8 @@
         _spawn_nt(cmd, search_path, dry_run=dry_run)
     elif os.name == 'os2':
         _spawn_os2(cmd, search_path, dry_run=dry_run)
+    elif os.name == 'java':
+        _spawn_java(cmd, search_path, dry_run=dry_run)
     else:
         raise DistutilsPlatformError, \
               "don't know how to spawn programs on platform '%s'" % os.name
@@ -96,43 +98,17 @@
             raise DistutilsExecError, \
                   "command '%s' failed with exit status %d" % (cmd[0], rc)
 
-if sys.platform == 'darwin':
-    from distutils import sysconfig
-    _cfg_target = None
-    _cfg_target_split = None
 
 def _spawn_posix(cmd, search_path=1, verbose=0, dry_run=0):
     log.info(' '.join(cmd))
     if dry_run:
         return
     exec_fn = search_path and os.execvp or os.execv
-    exec_args = [cmd[0], cmd]
-    if sys.platform == 'darwin':
-        global _cfg_target, _cfg_target_split
-        if _cfg_target is None:
-            _cfg_target = sysconfig.get_config_var(
-                                  'MACOSX_DEPLOYMENT_TARGET') or ''
-            if _cfg_target:
-                _cfg_target_split = [int(x) for x in _cfg_target.split('.')]
-        if _cfg_target:
-            # ensure that the deployment target of build process is not less
-            # than that used when the interpreter was built. This ensures
-            # extension modules are built with correct compatibility values
-            cur_target = os.environ.get('MACOSX_DEPLOYMENT_TARGET', _cfg_target)
-            if _cfg_target_split > [int(x) for x in cur_target.split('.')]:
-                my_msg = ('$MACOSX_DEPLOYMENT_TARGET mismatch: '
-                          'now "%s" but "%s" during configure'
-                                % (cur_target, _cfg_target))
-                raise DistutilsPlatformError(my_msg)
-            env = dict(os.environ,
-                       MACOSX_DEPLOYMENT_TARGET=cur_target)
-            exec_fn = search_path and os.execvpe or os.execve
-            exec_args.append(env)
     pid = os.fork()
 
     if pid == 0:  # in the child
         try:
-            exec_fn(*exec_args)
+            exec_fn(cmd[0], cmd)
         except OSError, e:
             sys.stderr.write("unable to execute %s: %s\n" %
                              (cmd[0], e.strerror))
@@ -174,6 +150,27 @@
                       "unknown error executing '%s': termination status %d" % \
                       (cmd[0], status)
 
+def _spawn_java(cmd,
+                search_path=1,
+                verbose=0,
+                dry_run=0):
+    executable = cmd[0]
+    cmd = ' '.join(_nt_quote_args(cmd))
+    log.info(cmd)
+    if not dry_run:
+        try:
+            rc = os.system(cmd) >> 8
+        except OSError, exc:
+            # this seems to happen when the command isn't found
+            raise DistutilsExecError, \
+                  "command '%s' failed: %s" % (executable, exc[-1])
+        if rc != 0:
+            # and this reflects the command running but failing
+            print "command '%s' failed with exit status %d" % (executable, rc)
+            raise DistutilsExecError, \
+                  "command '%s' failed with exit status %d" % (executable, rc)
+
+
 def find_executable(executable, path=None):
     """Tries to find 'executable' in the directories listed in 'path'.
 

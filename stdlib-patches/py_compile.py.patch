--- lib-python/2.7/py_compile.py	2015-04-18 05:34:44.555111142 +0300
+++ Lib/py_compile.py	2015-04-18 05:34:31.791089772 +0300
@@ -3,15 +3,11 @@
 This module has intimate knowledge of the format of .pyc files.
 """
 
-import __builtin__
-import imp
-import marshal
+import _py_compile
 import os
 import sys
 import traceback
 
-MAGIC = imp.get_magic()
-
 __all__ = ["compile", "main", "PyCompileError"]
 
 
@@ -61,13 +57,6 @@
         return self.msg
 
 
-def wr_long(f, x):
-    """Internal; write a 32-bit int to a file in little-endian order."""
-    f.write(chr( x        & 0xff))
-    f.write(chr((x >> 8)  & 0xff))
-    f.write(chr((x >> 16) & 0xff))
-    f.write(chr((x >> 24) & 0xff))
-
 def compile(file, cfile=None, dfile=None, doraise=False):
     """Byte-compile one Python source file to Python bytecode.
 
@@ -103,30 +92,15 @@
     directories).
 
     """
-    with open(file, 'U') as f:
-        try:
-            timestamp = long(os.fstat(f.fileno()).st_mtime)
-        except AttributeError:
-            timestamp = long(os.stat(file).st_mtime)
-        codestring = f.read()
     try:
-        codeobject = __builtin__.compile(codestring, dfile or file,'exec')
+        _py_compile.compile(file, cfile, dfile)
     except Exception,err:
-        py_exc = PyCompileError(err.__class__, err, dfile or file)
+        py_exc = PyCompileError(err.__class__,err.args,dfile or file)
         if doraise:
             raise py_exc
         else:
             sys.stderr.write(py_exc.msg + '\n')
             return
-    if cfile is None:
-        cfile = file + (__debug__ and 'c' or 'o')
-    with open(cfile, 'wb') as fc:
-        fc.write('\0\0\0\0')
-        wr_long(fc, timestamp)
-        marshal.dump(codeobject, fc)
-        fc.flush()
-        fc.seek(0, 0)
-        fc.write(MAGIC)
 
 def main(args=None):
     """Compile several source files.
@@ -135,35 +109,19 @@
     not specified) are compiled and the resulting bytecode is cached
     in the normal manner.  This function does not search a directory
     structure to locate source files; it only compiles files named
-    explicitly.  If '-' is the only parameter in args, the list of
-    files is taken from standard input.
+    explicitly.
 
     """
     if args is None:
         args = sys.argv[1:]
     rv = 0
-    if args == ['-']:
-        while True:
-            filename = sys.stdin.readline()
-            if not filename:
-                break
-            filename = filename.rstrip('\n')
-            try:
-                compile(filename, doraise=True)
-            except PyCompileError as error:
-                rv = 1
-                sys.stderr.write("%s\n" % error.msg)
-            except IOError as error:
-                rv = 1
-                sys.stderr.write("%s\n" % error)
-    else:
-        for filename in args:
-            try:
-                compile(filename, doraise=True)
-            except PyCompileError as error:
-                # return value to indicate at least one failure
-                rv = 1
-                sys.stderr.write(error.msg)
+    for filename in args:
+        try:
+            compile(filename, doraise=True)
+        except PyCompileError, err:
+            # return value to indicate at least one failure
+            rv = 1
+            sys.stderr.write(err.msg)
     return rv
 
 if __name__ == "__main__":

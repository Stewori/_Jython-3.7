--- lib-python/2.7/ssl.py	2015-04-18 05:34:44.599111215 +0300
+++ Lib/ssl.py	2015-04-18 05:34:31.799089785 +0300
@@ -1,386 +1,294 @@
-# Wrapper module for _ssl, providing some additional facilities
-# implemented in Python.  Written by Bill Janssen.
-
-"""\
-This module provides some more Pythonic support for SSL.
-
-Object types:
-
-  SSLSocket -- subtype of socket.socket which does SSL over the socket
-
-Exceptions:
-
-  SSLError -- exception raised for I/O errors
-
-Functions:
-
-  cert_time_to_seconds -- convert time string used for certificate
-                          notBefore and notAfter functions to integer
-                          seconds past the Epoch (the time values
-                          returned from time.time())
-
-  fetch_server_certificate (HOST, PORT) -- fetch the certificate provided
-                          by the server running on HOST at port PORT.  No
-                          validation of the certificate is performed.
+import base64
+import errno
+import logging
+import os.path
+import textwrap
+import time
+import threading
 
-Integer constants:
+try:
+    # jarjar-ed version
+    from org.python.netty.channel import ChannelInitializer
+    from org.python.netty.handler.ssl import SslHandler
+except ImportError:
+    # dev version from extlibs
+    from io.netty.channel import ChannelInitializer
+    from io.netty.handler.ssl import SslHandler
+
+from _socket import (
+    SSLError, raises_java_exception,
+    SSL_ERROR_SSL,
+    SSL_ERROR_WANT_READ,
+    SSL_ERROR_WANT_WRITE,
+    SSL_ERROR_WANT_X509_LOOKUP,
+    SSL_ERROR_SYSCALL,
+    SSL_ERROR_ZERO_RETURN,
+    SSL_ERROR_WANT_CONNECT,
+    SSL_ERROR_EOF,
+    SSL_ERROR_INVALID_ERROR_CODE,
+    error as socket_error)
+from _sslcerts import _get_ssl_context
+
+from java.text import SimpleDateFormat
+from java.util import ArrayList, Locale, TimeZone
+from java.util.concurrent import CountDownLatch
+from javax.naming.ldap import LdapName
+from javax.security.auth.x500 import X500Principal
+
+
+log = logging.getLogger("_socket")
+
+
+# Pretend to be OpenSSL
+OPENSSL_VERSION = "OpenSSL 1.0.0 (as emulated by Java SSL)"
+OPENSSL_VERSION_NUMBER = 0x1000000L
+OPENSSL_VERSION_INFO = (1, 0, 0, 0, 0)
 
-SSL_ERROR_ZERO_RETURN
-SSL_ERROR_WANT_READ
-SSL_ERROR_WANT_WRITE
-SSL_ERROR_WANT_X509_LOOKUP
-SSL_ERROR_SYSCALL
-SSL_ERROR_SSL
-SSL_ERROR_WANT_CONNECT
+CERT_NONE, CERT_OPTIONAL, CERT_REQUIRED = range(3)
 
-SSL_ERROR_EOF
-SSL_ERROR_INVALID_ERROR_CODE
+# Do not support PROTOCOL_SSLv2, it is highly insecure and it is optional
+_, PROTOCOL_SSLv3, PROTOCOL_SSLv23, PROTOCOL_TLSv1 = range(4)
+_PROTOCOL_NAMES = {
+    PROTOCOL_SSLv3: 'SSLv3', 
+    PROTOCOL_SSLv23: 'SSLv23',
+    PROTOCOL_TLSv1: 'TLSv1'}
+
+_rfc2822_date_format = SimpleDateFormat("MMM dd HH:mm:ss yyyy z", Locale.US)
+_rfc2822_date_format.setTimeZone(TimeZone.getTimeZone("GMT"))
+
+_ldap_rdn_display_names = {
+    # list from RFC 2253
+    "CN": "commonName",
+    "L":  "localityName",
+    "ST": "stateOrProvinceName",
+    "O":  "organizationName",
+    "OU": "organizationalUnitName",
+    "C":  "countryName",
+    "STREET": "streetAddress",
+    "DC": "domainComponent",
+    "UID": "userid"
+}
 
-The following group define certificate requirements that one side is
-allowing/requiring from the other side:
+_cert_name_types = [
+    # Fields documented in 
+    # http://docs.oracle.com/javase/7/docs/api/java/security/cert/X509Certificate.html#getSubjectAlternativeNames()
+    "other",
+    "rfc822",
+    "DNS",
+    "x400Address",
+    "directory",
+    "ediParty",
+    "uniformResourceIdentifier",
+    "ipAddress",
+    "registeredID"]
+
+
+class SSLInitializer(ChannelInitializer):
+
+    def __init__(self, ssl_handler):
+        self.ssl_handler = ssl_handler
+
+    def initChannel(self, ch):
+        pipeline = ch.pipeline()
+        pipeline.addFirst("ssl", self.ssl_handler)
+
+
+class SSLSocket(object):
+    
+    def __init__(self, sock,
+                 keyfile, certfile, ca_certs,
+                 do_handshake_on_connect, server_side):
+        self.sock = sock
+        self.do_handshake_on_connect = do_handshake_on_connect
+        self._sock = sock._sock  # the real underlying socket
+        self.context = _get_ssl_context(keyfile, certfile, ca_certs)
+        self.engine = self.context.createSSLEngine()
+        self.server_side = server_side
+        self.engine.setUseClientMode(not server_side)
+        self.ssl_handler = None
+        # _sslobj is used to follow CPython convention that an object
+        # means we have handshaked, as used by existing code that
+        # looks at this internal
+        self._sslobj = None
+        self.handshake_count = 0
 
-CERT_NONE - no certificates from the other side are required (or will
-            be looked at if provided)
-CERT_OPTIONAL - certificates are not required, but if provided will be
-                validated, and if validation fails, the connection will
-                also fail
-CERT_REQUIRED - certificates are required, and will be validated, and
-                if validation fails, the connection will also fail
+        if self.do_handshake_on_connect and self.sock._sock.connected:
+            self.do_handshake()
 
-The following constants identify various SSL protocol variants:
+    def connect(self, addr):
+        log.debug("Connect SSL with handshaking %s", self.do_handshake_on_connect, extra={"sock": self._sock})
+        self._sock._connect(addr)
+        if self.do_handshake_on_connect:
+            self.do_handshake()
 
-PROTOCOL_SSLv2
-PROTOCOL_SSLv3
-PROTOCOL_SSLv23
-PROTOCOL_TLSv1
-"""
+    def connect_ex(self, addr):
+        log.debug("Connect SSL with handshaking %s", self.do_handshake_on_connect, extra={"sock": self._sock})
+        self._sock._connect(addr)
+        if self.do_handshake_on_connect:
+            self.do_handshake()
+        return self._sock.connect_ex(addr)
 
-import textwrap
+    def unwrap(self):
+        self._sock.channel.pipeline().remove("ssl")
+        self.ssl_handler.close()
+        return self._sock
 
-import _ssl             # if we can't import it, let the error propagate
+    def do_handshake(self):
+        log.debug("SSL handshaking", extra={"sock": self._sock})
 
-from _ssl import OPENSSL_VERSION_NUMBER, OPENSSL_VERSION_INFO, OPENSSL_VERSION
-from _ssl import SSLError
-from _ssl import CERT_NONE, CERT_OPTIONAL, CERT_REQUIRED
-from _ssl import RAND_status, RAND_egd, RAND_add
-from _ssl import \
-     SSL_ERROR_ZERO_RETURN, \
-     SSL_ERROR_WANT_READ, \
-     SSL_ERROR_WANT_WRITE, \
-     SSL_ERROR_WANT_X509_LOOKUP, \
-     SSL_ERROR_SYSCALL, \
-     SSL_ERROR_SSL, \
-     SSL_ERROR_WANT_CONNECT, \
-     SSL_ERROR_EOF, \
-     SSL_ERROR_INVALID_ERROR_CODE
-from _ssl import PROTOCOL_SSLv3, PROTOCOL_SSLv23, PROTOCOL_TLSv1
-_PROTOCOL_NAMES = {
-    PROTOCOL_TLSv1: "TLSv1",
-    PROTOCOL_SSLv23: "SSLv23",
-    PROTOCOL_SSLv3: "SSLv3",
-}
-try:
-    from _ssl import PROTOCOL_SSLv2
-    _SSLv2_IF_EXISTS = PROTOCOL_SSLv2
-except ImportError:
-    _SSLv2_IF_EXISTS = None
-else:
-    _PROTOCOL_NAMES[PROTOCOL_SSLv2] = "SSLv2"
-
-from socket import socket, _fileobject, _delegate_methods, error as socket_error
-from socket import getnameinfo as _getnameinfo
-import base64        # for DER-to-PEM translation
-import errno
+        def handshake_step(result):
+            log.debug("SSL handshaking completed %s", result, extra={"sock": self._sock})
+            if not hasattr(self._sock, "active_latch"):
+                log.debug("Post connect step", extra={"sock": self._sock})
+                self._sock._post_connect()
+                self._sock._unlatch()
+            self._sslobj = object()  # we have now handshaked
+            self._notify_selectors()
+
+        if self.ssl_handler is None:
+            self.ssl_handler = SslHandler(self.engine)
+            self.ssl_handler.handshakeFuture().addListener(handshake_step)
+
+            if hasattr(self._sock, "connected") and self._sock.connected:
+                # The underlying socket is already connected, so some extra work to manage
+                log.debug("Adding SSL handler to pipeline after connection", extra={"sock": self._sock})
+                self._sock.channel.pipeline().addFirst("ssl", self.ssl_handler)
+            else:
+                log.debug("Not connected, adding SSL initializer...", extra={"sock": self._sock})
+                self._sock.connect_handlers.append(SSLInitializer(self.ssl_handler))
 
-# Disable weak or insecure ciphers by default
-# (OpenSSL's default setting is 'DEFAULT:!aNULL:!eNULL')
-_DEFAULT_CIPHERS = 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2'
-
-
-class SSLSocket(socket):
-
-    """This class implements a subtype of socket.socket that wraps
-    the underlying OS socket in an SSL context when necessary, and
-    provides read and write methods over that channel."""
-
-    def __init__(self, sock, keyfile=None, certfile=None,
-                 server_side=False, cert_reqs=CERT_NONE,
-                 ssl_version=PROTOCOL_SSLv23, ca_certs=None,
-                 do_handshake_on_connect=True,
-                 suppress_ragged_eofs=True, ciphers=None):
-        socket.__init__(self, _sock=sock._sock)
-        # The initializer for socket overrides the methods send(), recv(), etc.
-        # in the instancce, which we don't need -- but we want to provide the
-        # methods defined in SSLSocket.
-        for attr in _delegate_methods:
-            try:
-                delattr(self, attr)
-            except AttributeError:
-                pass
-
-        if ciphers is None and ssl_version != _SSLv2_IF_EXISTS:
-            ciphers = _DEFAULT_CIPHERS
-
-        if certfile and not keyfile:
-            keyfile = certfile
-        # see if it's connected
+        handshake = self.ssl_handler.handshakeFuture()
+        time.sleep(0.001)  # Necessary apparently for the handler to get into a good state
         try:
-            socket.getpeername(self)
+            self._sock._handle_channel_future(handshake, "SSL handshake")
         except socket_error, e:
-            if e.errno != errno.ENOTCONN:
-                raise
-            # no, no connection yet
-            self._connected = False
-            self._sslobj = None
-        else:
-            # yes, create the SSL object
-            self._connected = True
-            self._sslobj = _ssl.sslwrap(self._sock, server_side,
-                                        keyfile, certfile,
-                                        cert_reqs, ssl_version, ca_certs,
-                                        ciphers)
-            if do_handshake_on_connect:
-                self.do_handshake()
-        self.keyfile = keyfile
-        self.certfile = certfile
-        self.cert_reqs = cert_reqs
-        self.ssl_version = ssl_version
-        self.ca_certs = ca_certs
-        self.ciphers = ciphers
-        self.do_handshake_on_connect = do_handshake_on_connect
-        self.suppress_ragged_eofs = suppress_ragged_eofs
-        self._makefile_refs = 0
+            raise SSLError(SSL_ERROR_SSL, e.strerror)
 
-    def read(self, len=1024):
+    # Various pass through methods to the wrapped socket
 
-        """Read up to LEN bytes and return them.
-        Return zero-length string on EOF."""
+    def send(self, data):
+        return self.sock.send(data)
 
-        try:
-            return self._sslobj.read(len)
-        except SSLError, x:
-            if x.args[0] == SSL_ERROR_EOF and self.suppress_ragged_eofs:
-                return ''
-            else:
-                raise
+    write = send
 
-    def write(self, data):
+    def sendall(self, data):
+        return self.sock.sendall(data)
 
-        """Write DATA to the underlying SSL channel.  Returns
-        number of bytes of DATA actually transmitted."""
+    def recv(self, bufsize, flags=0):
+        return self.sock.recv(bufsize, flags)
 
-        return self._sslobj.write(data)
+    read = recv
 
-    def getpeercert(self, binary_form=False):
+    def recvfrom(self, bufsize, flags=0):
+        return self.sock.recvfrom(bufsize, flags)
 
-        """Returns a formatted version of the data in the
-        certificate provided by the other end of the SSL channel.
-        Return None if no certificate was provided, {} if a
-        certificate was provided, but not validated."""
+    def recvfrom_into(self, buffer, nbytes=0, flags=0):
+        return self.sock.recvfrom_into(buffer, nbytes, flags)
 
-        return self._sslobj.peer_certificate(binary_form)
+    def recv_into(self, buffer, nbytes=0, flags=0):
+        return self.sock.recv_into(buffer, nbytes, flags)
 
-    def cipher(self):
-
-        if not self._sslobj:
-            return None
-        else:
-            return self._sslobj.cipher()
+    def sendto(self, string, arg1, arg2=None):
+        raise socket_error(errno.EPROTO)
 
-    def send(self, data, flags=0):
-        if self._sslobj:
-            if flags != 0:
-                raise ValueError(
-                    "non-zero flags not allowed in calls to send() on %s" %
-                    self.__class__)
-            while True:
-                try:
-                    v = self._sslobj.write(data)
-                except SSLError, x:
-                    if x.args[0] == SSL_ERROR_WANT_READ:
-                        return 0
-                    elif x.args[0] == SSL_ERROR_WANT_WRITE:
-                        return 0
-                    else:
-                        raise
-                else:
-                    return v
-        else:
-            return self._sock.send(data, flags)
+    def close(self):
+        self.sock.close()
 
-    def sendto(self, data, flags_or_addr, addr=None):
-        if self._sslobj:
-            raise ValueError("sendto not allowed on instances of %s" %
-                             self.__class__)
-        elif addr is None:
-            return self._sock.sendto(data, flags_or_addr)
-        else:
-            return self._sock.sendto(data, flags_or_addr, addr)
+    def setblocking(self, mode):
+        self.sock.setblocking(mode)
 
-    def sendall(self, data, flags=0):
-        if self._sslobj:
-            if flags != 0:
-                raise ValueError(
-                    "non-zero flags not allowed in calls to sendall() on %s" %
-                    self.__class__)
-            amount = len(data)
-            count = 0
-            while (count < amount):
-                v = self.send(data[count:])
-                count += v
-            return amount
-        else:
-            return socket.sendall(self, data, flags)
+    def settimeout(self, timeout):
+        self.sock.settimeout(timeout)
 
-    def recv(self, buflen=1024, flags=0):
-        if self._sslobj:
-            if flags != 0:
-                raise ValueError(
-                    "non-zero flags not allowed in calls to recv() on %s" %
-                    self.__class__)
-            return self.read(buflen)
-        else:
-            return self._sock.recv(buflen, flags)
+    def gettimeout(self):
+        return self.sock.gettimeout()
 
-    def recv_into(self, buffer, nbytes=None, flags=0):
-        if buffer and (nbytes is None):
-            nbytes = len(buffer)
-        elif nbytes is None:
-            nbytes = 1024
-        if self._sslobj:
-            if flags != 0:
-                raise ValueError(
-                  "non-zero flags not allowed in calls to recv_into() on %s" %
-                  self.__class__)
-            tmp_buffer = self.read(nbytes)
-            v = len(tmp_buffer)
-            buffer[:v] = tmp_buffer
-            return v
-        else:
-            return self._sock.recv_into(buffer, nbytes, flags)
+    def makefile(self, mode='r', bufsize=-1):
+        return self.sock.makefile(mode, bufsize)
 
-    def recvfrom(self, buflen=1024, flags=0):
-        if self._sslobj:
-            raise ValueError("recvfrom not allowed on instances of %s" %
-                             self.__class__)
-        else:
-            return self._sock.recvfrom(buflen, flags)
+    def shutdown(self, how):
+        self.sock.shutdown(how)
 
-    def recvfrom_into(self, buffer, nbytes=None, flags=0):
-        if self._sslobj:
-            raise ValueError("recvfrom_into not allowed on instances of %s" %
-                             self.__class__)
-        else:
-            return self._sock.recvfrom_into(buffer, nbytes, flags)
+    # Need to work with the real underlying socket as well
 
     def pending(self):
-        if self._sslobj:
-            return self._sslobj.pending()
-        else:
-            return 0
+        # undocumented function, used by some tests
+        # see also http://bugs.python.org/issue21430
+        return self._sock._pending()
 
-    def unwrap(self):
-        if self._sslobj:
-            s = self._sslobj.shutdown()
-            self._sslobj = None
-            return s
-        else:
-            raise ValueError("No SSL wrapper around " + str(self))
+    def _readable(self):
+        return self._sock._readable()
 
-    def shutdown(self, how):
-        self._sslobj = None
-        socket.shutdown(self, how)
+    def _writable(self):
+        return self._sock._writable()
 
-    def close(self):
-        if self._makefile_refs < 1:
-            self._sslobj = None
-            socket.close(self)
-        else:
-            self._makefile_refs -= 1
-
-    def do_handshake(self):
+    def _register_selector(self, selector):
+        self._sock._register_selector(selector)
 
-        """Perform a TLS/SSL handshake."""
+    def _unregister_selector(self, selector):
+        return self._sock._unregister_selector(selector)
 
-        self._sslobj.do_handshake()
+    def _notify_selectors(self):
+        self._sock._notify_selectors()
 
-    def _real_connect(self, addr, return_errno):
-        # Here we assume that the socket is client-side, and not
-        # connected at the time of the call.  We connect it, then wrap it.
-        if self._connected:
-            raise ValueError("attempt to connect already-connected SSLSocket!")
-        self._sslobj = _ssl.sslwrap(self._sock, False, self.keyfile, self.certfile,
-                                    self.cert_reqs, self.ssl_version,
-                                    self.ca_certs, self.ciphers)
-        try:
-            if return_errno:
-                rc = socket.connect_ex(self, addr)
-            else:
-                rc = None
-                socket.connect(self, addr)
-            if not rc:
-                if self.do_handshake_on_connect:
-                    self.do_handshake()
-                self._connected = True
-            return rc
-        except socket_error:
-            self._sslobj = None
-            raise
+    def getpeername(self):
+        return self.sock.getpeername()
 
-    def connect(self, addr):
-        """Connects to remote ADDR, and then wraps the connection in
-        an SSL channel."""
-        self._real_connect(addr, False)
+    def fileno(self):
+        return self
 
-    def connect_ex(self, addr):
-        """Connects to remote ADDR, and then wraps the connection in
-        an SSL channel."""
-        return self._real_connect(addr, True)
-
-    def accept(self):
-
-        """Accepts a new connection from a remote client, and returns
-        a tuple containing that new connection wrapped with a server-side
-        SSL channel, and the address of the remote client."""
-
-        newsock, addr = socket.accept(self)
-        return (SSLSocket(newsock,
-                          keyfile=self.keyfile,
-                          certfile=self.certfile,
-                          server_side=True,
-                          cert_reqs=self.cert_reqs,
-                          ssl_version=self.ssl_version,
-                          ca_certs=self.ca_certs,
-                          ciphers=self.ciphers,
-                          do_handshake_on_connect=self.do_handshake_on_connect,
-                          suppress_ragged_eofs=self.suppress_ragged_eofs),
-                addr)
+    @raises_java_exception
+    def getpeercert(self, binary_form=False):
+        cert = self.engine.getSession().getPeerCertificates()[0]
+        if binary_form:
+            return cert.getEncoded()
+        dn = cert.getSubjectX500Principal().getName()
+        ldapDN = LdapName(dn)
+        # FIXME given this tuple of a single element tuple structure assumed here, is it possible this is
+        # not actually the case, eg because of multi value attributes?
+        rdns = tuple((((_ldap_rdn_display_names.get(rdn.type), rdn.value),) for rdn in ldapDN.getRdns()))
+        # FIXME is it str? or utf8? or some other encoding? maybe a bug in cpython?
+        alt_names = tuple(((_cert_name_types[type], str(name)) for (type, name) in cert.getSubjectAlternativeNames()))
+        pycert = {
+            "notAfter": _rfc2822_date_format.format(cert.getNotAfter()),
+            "subject": rdns,
+            "subjectAltName": alt_names, 
+        }
+        return pycert
+
+    @raises_java_exception
+    def issuer(self):
+        return self.getpeercert().getIssuerDN().toString()
 
-    def makefile(self, mode='r', bufsize=-1):
+    def cipher(self):
+        session = self._sslsocket.session
+        suite = str(session.cipherSuite)
+        if "256" in suite:  # FIXME!!! this test usually works, but there must be a better approach
+            strength = 256
+        elif "128" in suite:
+            strength = 128
+        else:
+            strength = None
+        return suite, str(session.protocol), strength
 
-        """Make and return a file-like object that
-        works with the SSL connection.  Just use the code
-        from the socket module."""
 
-        self._makefile_refs += 1
-        # close=True so as to decrement the reference count when done with
-        # the file-like object.
-        return _fileobject(self, mode, bufsize, close=True)
 
+# instantiates a SSLEngine, with the following things to keep in mind:
 
+# FIXME not yet supported
+# suppress_ragged_eofs - presumably this is an exception we can detect in Netty, the underlying SSLEngine certainly does
+# ssl_version - use SSLEngine.setEnabledProtocols(java.lang.String[])
+# ciphers - SSLEngine.setEnabledCipherSuites(String[] suites)
 
-def wrap_socket(sock, keyfile=None, certfile=None,
-                server_side=False, cert_reqs=CERT_NONE,
-                ssl_version=PROTOCOL_SSLv23, ca_certs=None,
-                do_handshake_on_connect=True,
+@raises_java_exception
+def wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE,
+                ssl_version=None, ca_certs=None, do_handshake_on_connect=True,
                 suppress_ragged_eofs=True, ciphers=None):
-
-    return SSLSocket(sock, keyfile=keyfile, certfile=certfile,
-                     server_side=server_side, cert_reqs=cert_reqs,
-                     ssl_version=ssl_version, ca_certs=ca_certs,
-                     do_handshake_on_connect=do_handshake_on_connect,
-                     suppress_ragged_eofs=suppress_ragged_eofs,
-                     ciphers=ciphers)
+    return SSLSocket(
+        sock, 
+        keyfile=keyfile, certfile=certfile, ca_certs=ca_certs,
+        server_side=server_side,
+        do_handshake_on_connect=do_handshake_on_connect)
 
 
 # some utility functions
@@ -449,7 +357,6 @@
 def get_protocol_name(protocol_code):
     return _PROTOCOL_NAMES.get(protocol_code, '<unknown>')
 
-
 # a replacement for the old socket.ssl function
 
 def sslwrap_simple(sock, keyfile=None, certfile=None):
@@ -458,11 +365,7 @@
     for compability with Python 2.5 and earlier.  Will disappear in
     Python 3.0."""
 
-    if hasattr(sock, "_sock"):
-        sock = sock._sock
-
-    ssl_sock = _ssl.sslwrap(sock, 0, keyfile, certfile, CERT_NONE,
-                            PROTOCOL_SSLv23, None)
+    ssl_sock = wrap_socket(sock, keyfile=keyfile, certfile=certfile, ssl_version=PROTOCOL_SSLv23)
     try:
         sock.getpeername()
     except socket_error:
@@ -473,3 +376,18 @@
         ssl_sock.do_handshake()
 
     return ssl_sock
+
+
+# Underlying Java does a good job of managing entropy, so these are just no-ops
+
+def RAND_status():
+    return True
+
+def RAND_egd(path):
+    if os.path.abspath(str(path)) != path:
+        raise TypeError("Must be an absolute path, but ignoring it regardless")
+
+def RAND_add(bytes, entropy):
+    pass
+
+

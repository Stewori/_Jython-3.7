--- lib-python/2.7/getpass.py	2015-04-18 05:34:44.475111008 +0300
+++ Lib/getpass.py	2015-04-18 05:34:31.783089759 +0300
@@ -1,86 +1,63 @@
 """Utilities to get a password and/or the current user name.
 
-getpass(prompt[, stream]) - Prompt for a password, with echo turned off.
-getuser() - Get the user name from the environment or password database.
-
-GetPassWarning - This UserWarning is issued when getpass() cannot prevent
-                 echoing of the password contents while reading.
+getpass(prompt) - prompt for a password, with echo turned off
+getuser() - get the user name from the environment or password database
 
 On Windows, the msvcrt module will be used.
 On the Mac EasyDialogs.AskPassword is used, if available.
 
 """
 
+# From CPython 2.5.1 with a fix to _raw_input (see
+# http://bugs.python.org/issue1703 )
+
 # Authors: Piers Lauder (original)
 #          Guido van Rossum (Windows support and cleanup)
-#          Gregory P. Smith (tty support & GetPassWarning)
 
-import os, sys, warnings
+import os
+import sys
 
-__all__ = ["getpass","getuser","GetPassWarning"]
+__all__ = ["getpass","getuser"]
 
+def jython_getpass(prompt='Password: ', stream=None):
+    """Prompt for a password, with echo turned off.
+    The prompt is written on stream, by default stdout.
 
-class GetPassWarning(UserWarning): pass
+    Restore terminal settings at end.
+    """
+    try:
+        reader = sys._jy_console.reader
+    except:
+        return default_getpass(prompt)
+    if stream is not None:
+        stream.write(prompt)
+        prompt = ''
+    return reader.readLine(prompt, '\0').encode(sys._jy_console.encoding)
 
 
 def unix_getpass(prompt='Password: ', stream=None):
     """Prompt for a password, with echo turned off.
+    The prompt is written on stream, by default stdout.
 
-    Args:
-      prompt: Written on stream to ask for the input.  Default: 'Password: '
-      stream: A writable file object to display the prompt.  Defaults to
-              the tty.  If no tty is available defaults to sys.stderr.
-    Returns:
-      The seKr3t input.
-    Raises:
-      EOFError: If our input tty or stdin was closed.
-      GetPassWarning: When we were unable to turn echo off on the input.
-
-    Always restores terminal settings before returning.
+    Restore terminal settings at end.
     """
-    fd = None
-    tty = None
+    if stream is None:
+        stream = sys.stdout
+
     try:
-        # Always try reading and writing directly on the tty first.
-        fd = os.open('/dev/tty', os.O_RDWR|os.O_NOCTTY)
-        tty = os.fdopen(fd, 'w+', 1)
-        input = tty
-        if not stream:
-            stream = tty
-    except EnvironmentError, e:
-        # If that fails, see if stdin can be controlled.
-        try:
-            fd = sys.stdin.fileno()
-        except (AttributeError, ValueError):
-            passwd = fallback_getpass(prompt, stream)
-        input = sys.stdin
-        if not stream:
-            stream = sys.stderr
+        fd = sys.stdin.fileno()
+    except:
+        return default_getpass(prompt)
 
-    if fd is not None:
-        passwd = None
-        try:
-            old = termios.tcgetattr(fd)     # a copy to save
-            new = old[:]
-            new[3] &= ~termios.ECHO  # 3 == 'lflags'
-            tcsetattr_flags = termios.TCSAFLUSH
-            if hasattr(termios, 'TCSASOFT'):
-                tcsetattr_flags |= termios.TCSASOFT
-            try:
-                termios.tcsetattr(fd, tcsetattr_flags, new)
-                passwd = _raw_input(prompt, stream, input=input)
-            finally:
-                termios.tcsetattr(fd, tcsetattr_flags, old)
-                stream.flush()  # issue7208
-        except termios.error, e:
-            if passwd is not None:
-                # _raw_input succeeded.  The final tcsetattr failed.  Reraise
-                # instead of leaving the terminal in an unknown state.
-                raise
-            # We can't control the tty or stdin.  Give up and use normal IO.
-            # fallback_getpass() raises an appropriate warning.
-            del input, tty  # clean up unused file objects before blocking
-            passwd = fallback_getpass(prompt, stream)
+    old = termios.tcgetattr(fd)     # a copy to save
+    new = old[:]
+
+    new[3] = new[3] & ~termios.ECHO # 3 == 'lflags'
+    try:
+        termios.tcsetattr(fd, termios.TCSADRAIN, new)
+        passwd = _raw_input(prompt, stream)
+    finally:
+        termios.tcsetattr(fd, termios.TCSADRAIN, old)
 
     stream.write('\n')
     return passwd
@@ -89,7 +66,7 @@
 def win_getpass(prompt='Password: ', stream=None):
     """Prompt for password with echo off, using Windows getch()."""
     if sys.stdin is not sys.__stdin__:
-        return fallback_getpass(prompt, stream)
+        return default_getpass(prompt, stream)
     import msvcrt
     for c in prompt:
         msvcrt.putch(c)
@@ -109,28 +86,21 @@
     return pw
 
 
-def fallback_getpass(prompt='Password: ', stream=None):
-    warnings.warn("Can not control echo on the terminal.", GetPassWarning,
-                  stacklevel=2)
-    if not stream:
-        stream = sys.stderr
-    print >>stream, "Warning: Password input may be echoed."
+def default_getpass(prompt='Password: ', stream=None):
+    print >>sys.stderr, "Warning: Problem with getpass. Passwords may be echoed."
     return _raw_input(prompt, stream)
 
 
-def _raw_input(prompt="", stream=None, input=None):
+def _raw_input(prompt="", stream=None):
     # A raw_input() replacement that doesn't save the string in the
     # GNU readline history.
-    if not stream:
-        stream = sys.stderr
-    if not input:
-        input = sys.stdin
+    if stream is None:
+        stream = sys.stdout
     prompt = str(prompt)
     if prompt:
         stream.write(prompt)
         stream.flush()
-    # NOTE: The Python C API calls flockfile() (and unlock) during readline.
-    line = input.readline()
+    line = sys.stdin.readline()
     if not line:
         raise EOFError
     if line[-1] == '\n':
@@ -146,8 +116,6 @@
 
     """
 
-    import os
-
     for name in ('LOGNAME', 'USER', 'LNAME', 'USERNAME'):
         user = os.environ.get(name)
         if user:
@@ -170,7 +138,8 @@
         try:
             from EasyDialogs import AskPassword
         except ImportError:
-            getpass = fallback_getpass
+            if os.name == 'java':
+                getpass = jython_getpass
         else:
             getpass = AskPassword
     else:

--- lib-python/2.7/xml/dom/minidom.py	2015-04-18 05:34:44.843111625 +0300
+++ Lib/xml/dom/minidom.py	2015-04-18 05:34:31.883089926 +0300
@@ -1,6 +1,5 @@
-"""Simple implementation of the Level 1 DOM.
-
-Namespaces and other minor Level 2 features are also supported.
+"""\
+minidom.py -- a lightweight DOM implementation.
 
 parse("foo.xml")
 
@@ -21,6 +20,8 @@
 from xml.dom.minicompat import *
 from xml.dom.xmlbuilder import DOMImplementationLS, DocumentLS
 
+_TupleType = type(())
+
 # This is used by the ID-cache invalidation checks; the list isn't
 # actually complete, since the nodes being checked will never be the
 # DOCUMENT_NODE or DOCUMENT_FRAGMENT_NODE.  (The node being checked is
@@ -30,7 +31,7 @@
                             xml.dom.Node.ENTITY_REFERENCE_NODE)
 
 
-class Node(xml.dom.Node):
+class Node(xml.dom.Node, GetattrMagic):
     namespaceURI = None # this is non-null only for elements and attributes
     parentNode = None
     ownerDocument = None
@@ -60,6 +61,9 @@
             self.writexml(writer, "", indent, newl)
         return writer.getvalue()
 
+    def hasAttributes(self):
+        return False
+
     def hasChildNodes(self):
         if self.childNodes:
             return True
@@ -134,20 +138,20 @@
         if newChild.nodeType not in self._child_node_types:
             raise xml.dom.HierarchyRequestErr(
                 "%s cannot be child of %s" % (repr(newChild), repr(self)))
-        if newChild is oldChild:
-            return
         if newChild.parentNode is not None:
             newChild.parentNode.removeChild(newChild)
+        if newChild is oldChild:
+            return
         try:
             index = self.childNodes.index(oldChild)
         except ValueError:
             raise xml.dom.NotFoundErr()
-        self.childNodes[index] = newChild
-        newChild.parentNode = self
-        oldChild.parentNode = None
         if (newChild.nodeType in _nodeTypes_with_children
             or oldChild.nodeType in _nodeTypes_with_children):
             _clear_id_cache(self)
+        self.childNodes[index] = newChild
+        newChild.parentNode = self
+        oldChild.parentNode = None
         newChild.nextSibling = oldChild.nextSibling
         newChild.previousSibling = oldChild.previousSibling
         oldChild.nextSibling = None
@@ -178,28 +182,35 @@
         L = []
         for child in self.childNodes:
             if child.nodeType == Node.TEXT_NODE:
-                if not child.data:
-                    # empty text node; discard
-                    if L:
-                        L[-1].nextSibling = child.nextSibling
-                    if child.nextSibling:
-                        child.nextSibling.previousSibling = child.previousSibling
-                    child.unlink()
-                elif L and L[-1].nodeType == child.nodeType:
+                data = child.data
+                if data and L and L[-1].nodeType == child.nodeType:
                     # collapse text node
                     node = L[-1]
                     node.data = node.data + child.data
                     node.nextSibling = child.nextSibling
-                    if child.nextSibling:
-                        child.nextSibling.previousSibling = node
                     child.unlink()
-                else:
+                elif data:
+                    if L:
+                        L[-1].nextSibling = child
+                        child.previousSibling = L[-1]
+                    else:
+                        child.previousSibling = None
                     L.append(child)
+                else:
+                    # empty text node; discard
+                    child.unlink()
             else:
+                if L:
+                    L[-1].nextSibling = child
+                    child.previousSibling = L[-1]
+                else:
+                    child.previousSibling = None
                 L.append(child)
                 if child.nodeType == Node.ELEMENT_NODE:
                     child.normalize()
-        self.childNodes[:] = L
+        if self.childNodes:
+            self.childNodes[:] = L
+        return
 
     def cloneNode(self, deep):
         return _clone_node(self, deep, self.ownerDocument or self)
@@ -239,7 +250,7 @@
         except AttributeError:
             d = {}
             self._user_data = d
-        if key in d:
+        if d.has_key(key):
             old = d[key][0]
         if data is None:
             # ignore handlers passed for None
@@ -292,10 +303,9 @@
 
 def _write_data(writer, data):
     "Writes datachars to writer."
-    if data:
-        data = data.replace("&", "&amp;").replace("<", "&lt;"). \
-                    replace("\"", "&quot;").replace(">", "&gt;")
-        writer.write(data)
+    data = data.replace("&", "&amp;").replace("<", "&lt;")
+    data = data.replace("\"", "&quot;").replace(">", "&gt;")
+    writer.write(data)
 
 def _get_elements_by_tagName_helper(parent, name, rc):
     for node in parent.childNodes:
@@ -454,7 +464,7 @@
 defproperty(Attr, "schemaType", doc="Schema type for this attribute.")
 
 
-class NamedNodeMap(object):
+class NamedNodeMap(NewStyle, GetattrMagic):
     """The attribute list is a transient interface to the underlying
     dictionaries.  Mutations here will change the underlying element's
     dictionary.
@@ -493,9 +503,9 @@
 
     def has_key(self, key):
         if isinstance(key, StringTypes):
-            return key in self._attrs
+            return self._attrs.has_key(key)
         else:
-            return key in self._attrsNS
+            return self._attrsNS.has_key(key)
 
     def keys(self):
         return self._attrs.keys()
@@ -511,7 +521,6 @@
 
     __len__ = _get_length
 
-    __hash__ = None # Mutable type can't be correctly hashed
     def __cmp__(self, other):
         if self._attrs is getattr(other, "_attrs", None):
             return 0
@@ -519,7 +528,7 @@
             return cmp(id(self), id(other))
 
     def __getitem__(self, attname_or_tuple):
-        if isinstance(attname_or_tuple, tuple):
+        if isinstance(attname_or_tuple, _TupleType):
             return self._attrsNS[attname_or_tuple]
         else:
             return self._attrs[attname_or_tuple]
@@ -558,7 +567,7 @@
             _clear_id_cache(self._ownerElement)
             del self._attrs[n.nodeName]
             del self._attrsNS[(n.namespaceURI, n.localName)]
-            if 'ownerElement' in n.__dict__:
+            if n.__dict__.has_key('ownerElement'):
                 n.__dict__['ownerElement'] = None
             return n
         else:
@@ -570,7 +579,7 @@
             _clear_id_cache(self._ownerElement)
             del self._attrsNS[(n.namespaceURI, n.localName)]
             del self._attrs[n.nodeName]
-            if 'ownerElement' in n.__dict__:
+            if n.__dict__.has_key('ownerElement'):
                 n.__dict__['ownerElement'] = None
             return n
         else:
@@ -583,6 +592,7 @@
         old = self._attrs.get(node.name)
         if old:
             old.unlink()
+            old.ownerDocument = self._ownerElement.ownerDocument
         self._attrs[node.name] = node
         self._attrsNS[(node.namespaceURI, node.localName)] = node
         node.ownerElement = self._ownerElement
@@ -609,7 +619,7 @@
 AttributeList = NamedNodeMap
 
 
-class TypeInfo(object):
+class TypeInfo(NewStyle):
     __slots__ = 'namespace', 'name'
 
     def __init__(self, namespace, name):
@@ -618,9 +628,9 @@
 
     def __repr__(self):
         if self.namespace:
-            return "<TypeInfo %r (from %r)>" % (self.name, self.namespace)
+            return "<TypeInfo %s (from %s)>" % (`self.name`, `self.namespace`)
         else:
-            return "<TypeInfo %r>" % self.name
+            return "<TypeInfo %s>" % `self.name`
 
     def _get_name(self):
         return self.name
@@ -773,14 +783,15 @@
         # Restore this since the node is still useful and otherwise
         # unlinked
         node.ownerDocument = self.ownerDocument
+        return node
 
     removeAttributeNodeNS = removeAttributeNode
 
     def hasAttribute(self, name):
-        return name in self._attrs
+        return self._attrs.has_key(name)
 
     def hasAttributeNS(self, namespaceURI, localName):
-        return (namespaceURI, localName) in self._attrsNS
+        return self._attrsNS.has_key((namespaceURI, localName))
 
     def getElementsByTagName(self, name):
         return _get_elements_by_tagName_helper(self, name, NodeList())
@@ -807,16 +818,10 @@
             _write_data(writer, attrs[a_name].value)
             writer.write("\"")
         if self.childNodes:
-            writer.write(">")
-            if (len(self.childNodes) == 1 and
-                self.childNodes[0].nodeType == Node.TEXT_NODE):
-                self.childNodes[0].writexml(writer, '', '', '')
-            else:
-                writer.write(newl)
-                for node in self.childNodes:
-                    node.writexml(writer, indent+addindent, addindent, newl)
-                writer.write(indent)
-            writer.write("</%s>%s" % (self.tagName, newl))
+            writer.write(">%s"%(newl))
+            for node in self.childNodes:
+                node.writexml(writer,indent+addindent,addindent,newl)
+            writer.write("%s</%s>%s" % (indent,self.tagName,newl))
         else:
             writer.write("/>%s"%(newl))
 
@@ -898,10 +903,6 @@
         raise xml.dom.NotFoundErr(
             self.nodeName + " nodes do not have children")
 
-    def normalize(self):
-        # For childless nodes, normalize() has nothing to do.
-        pass
-
     def replaceChild(self, newChild, oldChild):
         raise xml.dom.HierarchyRequestErr(
             self.nodeName + " nodes do not have children")
@@ -964,13 +965,13 @@
             dotdotdot = "..."
         else:
             dotdotdot = ""
-        return '<DOM %s node "%r%s">' % (
+        return "<DOM %s node \"%s%s\">" % (
             self.__class__.__name__, data[0:10], dotdotdot)
 
     def substringData(self, offset, count):
         if offset < 0:
             raise xml.dom.IndexSizeErr("offset cannot be negative")
-        if offset >= len(self.data):
+        if offset > len(self.data):
             raise xml.dom.IndexSizeErr("offset cannot be beyond end of data")
         if count < 0:
             raise xml.dom.IndexSizeErr("count cannot be negative")
@@ -982,7 +983,7 @@
     def insertData(self, offset, arg):
         if offset < 0:
             raise xml.dom.IndexSizeErr("offset cannot be negative")
-        if offset >= len(self.data):
+        if offset > len(self.data):
             raise xml.dom.IndexSizeErr("offset cannot be beyond end of data")
         if arg:
             self.data = "%s%s%s" % (
@@ -991,7 +992,7 @@
     def deleteData(self, offset, count):
         if offset < 0:
             raise xml.dom.IndexSizeErr("offset cannot be negative")
-        if offset >= len(self.data):
+        if offset > len(self.data):
             raise xml.dom.IndexSizeErr("offset cannot be beyond end of data")
         if count < 0:
             raise xml.dom.IndexSizeErr("count cannot be negative")
@@ -1001,7 +1002,7 @@
     def replaceData(self, offset, count, arg):
         if offset < 0:
             raise xml.dom.IndexSizeErr("offset cannot be negative")
-        if offset >= len(self.data):
+        if offset > len(self.data):
             raise xml.dom.IndexSizeErr("offset cannot be beyond end of data")
         if count < 0:
             raise xml.dom.IndexSizeErr("count cannot be negative")
@@ -1013,10 +1014,12 @@
 
 
 class Text(CharacterData):
-    # Make sure we don't add an instance __dict__ if we don't already
-    # have one, at least when that's possible:
-    # XXX this does not work, CharacterData is an old-style class
-    # __slots__ = ()
+
+    # This class doesn't have an __init__() by design; the intent is
+    # to speed construction of new instances.  Once an instance is
+    # created, the .data and .ownerDocument attributes will need to be
+    # initialized.  Subclasses may add an __init__() and initialize
+    # those members there or require them to be initialized later.
 
     nodeType = Node.TEXT_NODE
     nodeName = "#text"
@@ -1038,7 +1041,7 @@
         return newText
 
     def writexml(self, writer, indent="", addindent="", newl=""):
-        _write_data(writer, "%s%s%s" % (indent, self.data, newl))
+        _write_data(writer, "%s%s%s"%(indent, self.data, newl))
 
     # DOM Level 3 (WD 9 April 2002)
 
@@ -1134,17 +1137,10 @@
         self.data = self.nodeValue = data
 
     def writexml(self, writer, indent="", addindent="", newl=""):
-        if "--" in self.data:
-            raise ValueError("'--' is not allowed in a comment node")
         writer.write("%s<!--%s-->%s" % (indent, self.data, newl))
 
 
 class CDATASection(Text):
-    # Make sure we don't add an instance __dict__ if we don't already
-    # have one, at least when that's possible:
-    # XXX this does not work, Text is an old-style class
-    # __slots__ = ()
-
     nodeType = Node.CDATA_SECTION_NODE
     nodeName = "#cdata-section"
 
@@ -1154,7 +1150,7 @@
         writer.write("<![CDATA[%s]]>" % self.data)
 
 
-class ReadOnlySequentialNamedNodeMap(object):
+class ReadOnlySequentialNamedNodeMap(NewStyle, GetattrMagic):
     __slots__ = '_seq',
 
     def __init__(self, seq=()):
@@ -1178,7 +1174,7 @@
                 return n
 
     def __getitem__(self, name_or_tuple):
-        if isinstance(name_or_tuple, tuple):
+        if isinstance(name_or_tuple, _TupleType):
             node = self.getNamedItemNS(*name_or_tuple)
         else:
             node = self.getNamedItem(name_or_tuple)
@@ -1214,6 +1210,7 @@
         return [self._seq]
 
     def __setstate__(self, state):
+        assert len(state) == 1
         self._seq = state[0]
 
 defproperty(ReadOnlySequentialNamedNodeMap, "length",
@@ -1223,9 +1220,6 @@
 class Identified:
     """Mix-in class that supports the publicId and systemId attributes."""
 
-    # XXX this does not work, this is an old-style class
-    # __slots__ = 'publicId', 'systemId'
-
     def _identified_mixin_init(self, publicId, systemId):
         self.publicId = publicId
         self.systemId = systemId
@@ -1286,15 +1280,15 @@
         writer.write("<!DOCTYPE ")
         writer.write(self.name)
         if self.publicId:
-            writer.write("%s  PUBLIC '%s'%s  '%s'"
-                         % (newl, self.publicId, newl, self.systemId))
+            writer.write("\n  PUBLIC '%s'\n  '%s'"
+                         % (self.publicId, self.systemId))
         elif self.systemId:
-            writer.write("%s  SYSTEM '%s'" % (newl, self.systemId))
+            writer.write("\n  SYSTEM '%s'" % self.systemId)
         if self.internalSubset is not None:
             writer.write(" [")
             writer.write(self.internalSubset)
             writer.write("]")
-        writer.write(">"+newl)
+        writer.write(">\n")
 
 class Entity(Identified, Node):
     attributes = None
@@ -1348,9 +1342,11 @@
 class DOMImplementation(DOMImplementationLS):
     _features = [("core", "1.0"),
                  ("core", "2.0"),
+                 ("core", "3.0"),
                  ("core", None),
                  ("xml", "1.0"),
                  ("xml", "2.0"),
+                 ("xml", "3.0"),
                  ("xml", None),
                  ("ls-load", "3.0"),
                  ("ls-load", None),
@@ -1424,7 +1420,7 @@
     def _create_document(self):
         return Document()
 
-class ElementInfo(object):
+class ElementInfo(NewStyle):
     """Object that represents content-model information for an element.
 
     This implementation is not expected to be used in practice; DOM
@@ -1453,7 +1449,7 @@
         return False
 
     def isId(self, aname):
-        """Returns true iff the named attribute is a DTD-style ID."""
+        """Returns true iff the named attribte is a DTD-style ID."""
         return False
 
     def isIdNS(self, namespaceURI, localName):
@@ -1668,7 +1664,7 @@
         return n
 
     def getElementById(self, id):
-        if id in self._id_cache:
+        if self._id_cache.has_key(id):
             return self._id_cache[id]
         if not (self._elem_info or self._magic_id_count):
             return None
@@ -1745,9 +1741,9 @@
     def writexml(self, writer, indent="", addindent="", newl="",
                  encoding = None):
         if encoding is None:
-            writer.write('<?xml version="1.0" ?>'+newl)
+            writer.write('<?xml version="1.0" ?>\n')
         else:
-            writer.write('<?xml version="1.0" encoding="%s"?>%s' % (encoding, newl))
+            writer.write('<?xml version="1.0" encoding="%s"?>\n' % encoding)
         for node in self.childNodes:
             node.writexml(writer, indent, addindent, newl)
 
@@ -1882,7 +1878,7 @@
                     e._call_user_data_handler(operation, n, entity)
     else:
         # Note the cloning of Document and DocumentType nodes is
-        # implementation specific.  minidom handles those cases
+        # implemenetation specific.  minidom handles those cases
         # directly in the cloneNode() methods.
         raise xml.dom.NotSupportedErr("Cannot clone node %s" % repr(node))
 
@@ -1908,30 +1904,34 @@
     return StringIO()
 
 def _do_pulldom_parse(func, args, kwargs):
-    events = func(*args, **kwargs)
+    events = apply(func, args, kwargs)
     toktype, rootNode = events.getEvent()
     events.expandNode(rootNode)
     events.clear()
+    rootNode.normalize()
     return rootNode
 
 def parse(file, parser=None, bufsize=None):
     """Parse a file into a DOM by filename or file object."""
-    if parser is None and not bufsize:
-        from xml.dom import expatbuilder
-        return expatbuilder.parse(file)
-    else:
-        from xml.dom import pulldom
-        return _do_pulldom_parse(pulldom.parse, (file,),
+    import sys
+    if parser is None and bufsize is None and sys.platform[:4] != "java":
+        try:
+            from xml.dom import expatbuilder
+            return expatbuilder.parse(file)
+        except ImportError:
+            pass
+    from xml.dom import pulldom
+    return _do_pulldom_parse(pulldom.parse, (file,),
             {'parser': parser, 'bufsize': bufsize})
 
 def parseString(string, parser=None):
     """Parse a file into a DOM from a string."""
-    if parser is None:
+    import sys
+    if parser is None and sys.platform[:4] != "java":
         from xml.dom import expatbuilder
         return expatbuilder.parseString(string)
-    else:
-        from xml.dom import pulldom
-        return _do_pulldom_parse(pulldom.parseString, (string,),
+    from xml.dom import pulldom
+    return _do_pulldom_parse(pulldom.parseString, (string,),
                                  {'parser': parser})
 
 def getDOMImplementation(features=None):

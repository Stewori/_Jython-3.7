--- lib-python/2.7/compiler/transformer.py	2015-04-18 05:34:44.531111101 +0300
+++ Lib/compiler/transformer.py	2015-04-18 05:34:31.755089713 +0300
@@ -26,9 +26,11 @@
 # and replace OWNER, ORGANIZATION, and YEAR as appropriate.
 
 from compiler.ast import *
-import parser
 import symbol
 import token
+import sys
+if not sys.platform.startswith('java'):
+    import parser
 
 class WalkerError(StandardError):
     pass
@@ -81,7 +83,7 @@
 
 def Node(*args):
     kind = args[0]
-    if kind in nodes:
+    if nodes.has_key(kind):
         try:
             return nodes[kind](*args[1:])
         except TypeError:
@@ -120,7 +122,7 @@
     def transform(self, tree):
         """Transform an AST into a modified parse tree."""
         if not (isinstance(tree, tuple) or isinstance(tree, list)):
-            tree = parser.st2tuple(tree, line_info=1)
+            tree = parser.ast2tuple(tree, line_info=1)
         return self.compile_node(tree)
 
     def parsesuite(self, text):
@@ -232,18 +234,6 @@
             items.append(self.decorator(dec_nodelist[1:]))
         return Decorators(items)
 
-    def decorated(self, nodelist):
-        assert nodelist[0][0] == symbol.decorators
-        if nodelist[1][0] == symbol.funcdef:
-            n = [nodelist[0]] + list(nodelist[1][1:])
-            return self.funcdef(n)
-        elif nodelist[1][0] == symbol.classdef:
-            decorators = self.decorators(nodelist[0][1:])
-            cls = self.classdef(nodelist[1][1:])
-            cls.decorators = decorators
-            return cls
-        raise WalkerError()
-
     def funcdef(self, nodelist):
         #                    -6   -5    -4         -3  -2    -1
         # funcdef: [decorators] 'def' NAME parameters ':' suite
@@ -581,10 +571,8 @@
     testlist1 = testlist
     exprlist = testlist
 
-    def testlist_comp(self, nodelist):
-        # test ( comp_for | (',' test)* [','] )
-        assert nodelist[0][0] == symbol.test
-        if len(nodelist) == 2 and nodelist[1][0] == symbol.comp_for:
+    def testlist_gexp(self, nodelist):
+        if len(nodelist) == 2 and nodelist[1][0] == symbol.gen_for:
             test = self.com_node(nodelist[0])
             return self.com_generator_expression(test, nodelist[1])
         return self.testlist(nodelist)
@@ -751,7 +739,7 @@
     def atom_lbrace(self, nodelist):
         if nodelist[1][0] == token.RBRACE:
             return Dict((), lineno=nodelist[0][2])
-        return self.com_dictorsetmaker(nodelist[1])
+        return self.com_dictmaker(nodelist[1])
 
     def atom_backquote(self, nodelist):
         return Backquote(self.com_node(nodelist[1]))
@@ -943,7 +931,7 @@
         for i in range(3, len(nodelist), 3):
             node = nodelist[i]
             if node[0] == symbol.except_clause:
-                # except_clause: 'except' [expr [(',' | 'as') expr]] */
+                # except_clause: 'except' [expr [',' expr]] */
                 if len(node) > 2:
                     expr1 = self.com_node(node[2])
                     if len(node) > 4:
@@ -967,22 +955,18 @@
             return try_except
 
     def com_with(self, nodelist):
-        # with_stmt: 'with' with_item (',' with_item)* ':' suite
+        # with_stmt: 'with' expr [with_var] ':' suite
+        expr = self.com_node(nodelist[1])
         body = self.com_node(nodelist[-1])
-        for i in range(len(nodelist) - 3, 0, -2):
-            ret = self.com_with_item(nodelist[i], body, nodelist[0][2])
-            if i == 1:
-                return ret
-            body = ret
-
-    def com_with_item(self, nodelist, body, lineno):
-        # with_item: test ['as' expr]
-        if len(nodelist) == 4:
-            var = self.com_assign(nodelist[3], OP_ASSIGN)
-        else:
+        if nodelist[2][0] == token.COLON:
             var = None
-        expr = self.com_node(nodelist[1])
-        return With(expr, var, body, lineno=lineno)
+        else:
+            var = self.com_assign(nodelist[2][2], OP_ASSIGN)
+        return With(expr, var, body, lineno=nodelist[0][2])
+
+    def com_with_var(self, nodelist):
+        # with_var: 'as' expr
+        return self.com_node(nodelist[1])
 
     def com_augassign_op(self, node):
         assert node[0] == symbol.augassign
@@ -1003,7 +987,7 @@
         # loop to avoid trivial recursion
         while 1:
             t = node[0]
-            if t in (symbol.exprlist, symbol.testlist, symbol.testlist_safe, symbol.testlist_comp):
+            if t in (symbol.exprlist, symbol.testlist, symbol.testlist_safe, symbol.testlist_gexp):
                 if len(node) > 2:
                     return self.com_assign_tuple(node, assigning)
                 node = node[1]
@@ -1101,141 +1085,111 @@
         else:
             stmts.append(result)
 
-    def com_list_constructor(self, nodelist):
-        # listmaker: test ( list_for | (',' test)* [','] )
-        values = []
-        for i in range(1, len(nodelist)):
-            if nodelist[i][0] == symbol.list_for:
-                assert len(nodelist[i:]) == 1
-                return self.com_list_comprehension(values[0],
-                                                   nodelist[i])
-            elif nodelist[i][0] == token.COMMA:
-                continue
-            values.append(self.com_node(nodelist[i]))
-        return List(values, lineno=values[0].lineno)
-
-    def com_list_comprehension(self, expr, node):
-        return self.com_comprehension(expr, None, node, 'list')
-
-    def com_comprehension(self, expr1, expr2, node, type):
-        # list_iter: list_for | list_if
-        # list_for: 'for' exprlist 'in' testlist [list_iter]
-        # list_if: 'if' test [list_iter]
-
-        # XXX should raise SyntaxError for assignment
-        # XXX(avassalotti) Set and dict comprehensions should have generator
-        #                  semantics. In other words, they shouldn't leak
-        #                  variables outside of the comprehension's scope.
-
-        lineno = node[1][2]
-        fors = []
-        while node:
-            t = node[1][1]
-            if t == 'for':
-                assignNode = self.com_assign(node[2], OP_ASSIGN)
-                compNode = self.com_node(node[4])
-                newfor = ListCompFor(assignNode, compNode, [])
-                newfor.lineno = node[1][2]
-                fors.append(newfor)
-                if len(node) == 5:
-                    node = None
-                elif type == 'list':
-                    node = self.com_list_iter(node[5])
+    if hasattr(symbol, 'list_for'):
+        def com_list_constructor(self, nodelist):
+            # listmaker: test ( list_for | (',' test)* [','] )
+            values = []
+            for i in range(1, len(nodelist)):
+                if nodelist[i][0] == symbol.list_for:
+                    assert len(nodelist[i:]) == 1
+                    return self.com_list_comprehension(values[0],
+                                                       nodelist[i])
+                elif nodelist[i][0] == token.COMMA:
+                    continue
+                values.append(self.com_node(nodelist[i]))
+            return List(values, lineno=values[0].lineno)
+
+        def com_list_comprehension(self, expr, node):
+            # list_iter: list_for | list_if
+            # list_for: 'for' exprlist 'in' testlist [list_iter]
+            # list_if: 'if' test [list_iter]
+
+            # XXX should raise SyntaxError for assignment
+
+            lineno = node[1][2]
+            fors = []
+            while node:
+                t = node[1][1]
+                if t == 'for':
+                    assignNode = self.com_assign(node[2], OP_ASSIGN)
+                    listNode = self.com_node(node[4])
+                    newfor = ListCompFor(assignNode, listNode, [])
+                    newfor.lineno = node[1][2]
+                    fors.append(newfor)
+                    if len(node) == 5:
+                        node = None
+                    else:
+                        node = self.com_list_iter(node[5])
+                elif t == 'if':
+                    test = self.com_node(node[2])
+                    newif = ListCompIf(test, lineno=node[1][2])
+                    newfor.ifs.append(newif)
+                    if len(node) == 3:
+                        node = None
+                    else:
+                        node = self.com_list_iter(node[3])
                 else:
-                    node = self.com_comp_iter(node[5])
-            elif t == 'if':
-                test = self.com_node(node[2])
-                newif = ListCompIf(test, lineno=node[1][2])
-                newfor.ifs.append(newif)
-                if len(node) == 3:
-                    node = None
-                elif type == 'list':
-                    node = self.com_list_iter(node[3])
+                    raise SyntaxError, \
+                          ("unexpected list comprehension element: %s %d"
+                           % (node, lineno))
+            return ListComp(expr, fors, lineno=lineno)
+
+        def com_list_iter(self, node):
+            assert node[0] == symbol.list_iter
+            return node[1]
+    else:
+        def com_list_constructor(self, nodelist):
+            values = []
+            for i in range(1, len(nodelist), 2):
+                values.append(self.com_node(nodelist[i]))
+            return List(values, lineno=values[0].lineno)
+
+    if hasattr(symbol, 'gen_for'):
+        def com_generator_expression(self, expr, node):
+            # gen_iter: gen_for | gen_if
+            # gen_for: 'for' exprlist 'in' test [gen_iter]
+            # gen_if: 'if' test [gen_iter]
+
+            lineno = node[1][2]
+            fors = []
+            while node:
+                t = node[1][1]
+                if t == 'for':
+                    assignNode = self.com_assign(node[2], OP_ASSIGN)
+                    genNode = self.com_node(node[4])
+                    newfor = GenExprFor(assignNode, genNode, [],
+                                        lineno=node[1][2])
+                    fors.append(newfor)
+                    if (len(node)) == 5:
+                        node = None
+                    else:
+                        node = self.com_gen_iter(node[5])
+                elif t == 'if':
+                    test = self.com_node(node[2])
+                    newif = GenExprIf(test, lineno=node[1][2])
+                    newfor.ifs.append(newif)
+                    if len(node) == 3:
+                        node = None
+                    else:
+                        node = self.com_gen_iter(node[3])
                 else:
-                    node = self.com_comp_iter(node[3])
-            else:
-                raise SyntaxError, \
-                      ("unexpected comprehension element: %s %d"
-                       % (node, lineno))
-        if type == 'list':
-            return ListComp(expr1, fors, lineno=lineno)
-        elif type == 'set':
-            return SetComp(expr1, fors, lineno=lineno)
-        elif type == 'dict':
-            return DictComp(expr1, expr2, fors, lineno=lineno)
-        else:
-            raise ValueError("unexpected comprehension type: " + repr(type))
-
-    def com_list_iter(self, node):
-        assert node[0] == symbol.list_iter
-        return node[1]
-
-    def com_comp_iter(self, node):
-        assert node[0] == symbol.comp_iter
-        return node[1]
+                    raise SyntaxError, \
+                            ("unexpected generator expression element: %s %d"
+                             % (node, lineno))
+            fors[0].is_outmost = True
+            return GenExpr(GenExprInner(expr, fors), lineno=lineno)
+
+        def com_gen_iter(self, node):
+            assert node[0] == symbol.gen_iter
+            return node[1]
 
-    def com_generator_expression(self, expr, node):
-        # comp_iter: comp_for | comp_if
-        # comp_for: 'for' exprlist 'in' test [comp_iter]
-        # comp_if: 'if' test [comp_iter]
-
-        lineno = node[1][2]
-        fors = []
-        while node:
-            t = node[1][1]
-            if t == 'for':
-                assignNode = self.com_assign(node[2], OP_ASSIGN)
-                genNode = self.com_node(node[4])
-                newfor = GenExprFor(assignNode, genNode, [],
-                                    lineno=node[1][2])
-                fors.append(newfor)
-                if (len(node)) == 5:
-                    node = None
-                else:
-                    node = self.com_comp_iter(node[5])
-            elif t == 'if':
-                test = self.com_node(node[2])
-                newif = GenExprIf(test, lineno=node[1][2])
-                newfor.ifs.append(newif)
-                if len(node) == 3:
-                    node = None
-                else:
-                    node = self.com_comp_iter(node[3])
-            else:
-                raise SyntaxError, \
-                        ("unexpected generator expression element: %s %d"
-                         % (node, lineno))
-        fors[0].is_outmost = True
-        return GenExpr(GenExprInner(expr, fors), lineno=lineno)
-
-    def com_dictorsetmaker(self, nodelist):
-        # dictorsetmaker: ( (test ':' test (comp_for | (',' test ':' test)* [','])) |
-        #                   (test (comp_for | (',' test)* [','])) )
-        assert nodelist[0] == symbol.dictorsetmaker
-        nodelist = nodelist[1:]
-        if len(nodelist) == 1 or nodelist[1][0] == token.COMMA:
-            # set literal
-            items = []
-            for i in range(0, len(nodelist), 2):
-                items.append(self.com_node(nodelist[i]))
-            return Set(items, lineno=items[0].lineno)
-        elif nodelist[1][0] == symbol.comp_for:
-            # set comprehension
-            expr = self.com_node(nodelist[0])
-            return self.com_comprehension(expr, None, nodelist[1], 'set')
-        elif len(nodelist) > 3 and nodelist[3][0] == symbol.comp_for:
-            # dict comprehension
-            assert nodelist[1][0] == token.COLON
-            key = self.com_node(nodelist[0])
-            value = self.com_node(nodelist[2])
-            return self.com_comprehension(key, value, nodelist[3], 'dict')
-        else:
-            # dict literal
-            items = []
-            for i in range(0, len(nodelist), 4):
-                items.append((self.com_node(nodelist[i]),
-                              self.com_node(nodelist[i+2])))
-            return Dict(items, lineno=items[0][0].lineno)
+    def com_dictmaker(self, nodelist):
+        # dictmaker: test ':' test (',' test ':' value)* [',']
+        items = []
+        for i in range(1, len(nodelist), 4):
+            items.append((self.com_node(nodelist[i]),
+                          self.com_node(nodelist[i+2])))
+        return Dict(items, lineno=items[0][0].lineno)
 
     def com_apply_trailer(self, primaryNode, nodelist):
         t = nodelist[1][0]
@@ -1258,49 +1212,51 @@
             return CallFunc(primaryNode, [], lineno=extractLineNo(nodelist))
         args = []
         kw = 0
-        star_node = dstar_node = None
         len_nodelist = len(nodelist)
-        i = 1
-        while i < len_nodelist:
+        for i in range(1, len_nodelist, 2):
             node = nodelist[i]
-
-            if node[0]==token.STAR:
-                if star_node is not None:
-                    raise SyntaxError, 'already have the varargs indentifier'
-                star_node = self.com_node(nodelist[i+1])
-                i = i + 3
-                continue
-            elif node[0]==token.DOUBLESTAR:
-                if dstar_node is not None:
-                    raise SyntaxError, 'already have the kwargs indentifier'
-                dstar_node = self.com_node(nodelist[i+1])
-                i = i + 3
-                continue
-
-            # positional or named parameters
-            kw, result = self.com_argument(node, kw, star_node)
+            if node[0] == token.STAR or node[0] == token.DOUBLESTAR:
+                break
+            kw, result = self.com_argument(node, kw)
 
             if len_nodelist != 2 and isinstance(result, GenExpr) \
-               and len(node) == 3 and node[2][0] == symbol.comp_for:
+               and len(node) == 3 and node[2][0] == symbol.gen_for:
                 # allow f(x for x in y), but reject f(x for x in y, 1)
                 # should use f((x for x in y), 1) instead of f(x for x in y, 1)
                 raise SyntaxError, 'generator expression needs parenthesis'
 
             args.append(result)
-            i = i + 2
-
+        else:
+            # No broken by star arg, so skip the last one we processed.
+            i = i + 1
+        if i < len_nodelist and nodelist[i][0] == token.COMMA:
+            # need to accept an application that looks like "f(a, b,)"
+            i = i + 1
+        star_node = dstar_node = None
+        while i < len_nodelist:
+            tok = nodelist[i]
+            ch = nodelist[i+1]
+            i = i + 3
+            if tok[0]==token.STAR:
+                if star_node is not None:
+                    raise SyntaxError, 'already have the varargs indentifier'
+                star_node = self.com_node(ch)
+            elif tok[0]==token.DOUBLESTAR:
+                if dstar_node is not None:
+                    raise SyntaxError, 'already have the kwargs indentifier'
+                dstar_node = self.com_node(ch)
+            else:
+                raise SyntaxError, 'unknown node type: %s' % tok
         return CallFunc(primaryNode, args, star_node, dstar_node,
                         lineno=extractLineNo(nodelist))
 
-    def com_argument(self, nodelist, kw, star_node):
-        if len(nodelist) == 3 and nodelist[2][0] == symbol.comp_for:
+    def com_argument(self, nodelist, kw):
+        if len(nodelist) == 3 and nodelist[2][0] == symbol.gen_for:
             test = self.com_node(nodelist[1])
             return 0, self.com_generator_expression(test, nodelist[2])
         if len(nodelist) == 2:
             if kw:
                 raise SyntaxError, "non-keyword arg after keyword arg"
-            if star_node:
-                raise SyntaxError, "only named arguments may follow *expression"
             return 0, self.com_node(nodelist[1])
         result = self.com_node(nodelist[3])
         n = nodelist[1]
